<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blog kỹ thuật máy tính]]></title>
  <link href="http://git@github.com.github.com/atom.xml" rel="self"/>
  <link href="http://git@github.com.github.com/"/>
  <updated>2015-02-13T00:35:54+09:00</updated>
  <id>http://git@github.com.github.com/</id>
  <author>
    <name><![CDATA[kỹ thuật máy tính]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cơ bản về hệ thống quảng cáo (phần 2) - Các hình thức quảng cáo trên internet]]></title>
    <link href="http://git@github.com.github.com/blog/2015/02/07/co-ban-ve-he-thong-quang-cao-slash-phan-2-slash/"/>
    <updated>2015-02-07T23:27:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2015/02/07/co-ban-ve-he-thong-quang-cao-slash-phan-2-slash</id>
    <content type="html"><![CDATA[<p>Ở <a href="http://ktmt.github.io/blog/2014/11/09/doi-dieu-ve-he-thong-quang-cao/">bài viết trước</a>, tôi đã giới thiệu về rất nhiều các thuật ngữ, cũng như khái niệm liên quan đến quảng cáo trên internet. Phần 2 sẽ thiên một chút về ‘lịch sử’ của quảng cáo trên internet, thông qua việc giới thiệu về các hình thức + cách tiến hành các chiến dịch quảng cáo. Thông qua đó cá bạn sẽ hiểu thêm tại sao chúng ta cần có các kĩ thuật quảng cáo ở mức hệ thống như DSP, hay SSP..</p>
<p>Đầu tiên tôi sẽ nói về các loại hình quảng cáo trên internet.</p>
<h1 id="quảng-cáo-thuần-pure-adverstisement">Quảng cáo thuần (pure adverstisement)</h1>
<p>Đây có lẽ là loại hình quảng cáo dễ hiểu nhất và mặc dù xuất hiện từ thời ‘xa xưa’, nhưng loại hình này vẫn khá thông dụng cho đến hiện nay. Cách quảng cáo này thông qua việc <strong><em>liên lạc trực tiếp</em></strong> giữa ‘người bán’ và ‘người mua’ (người mua ở đây có thể là nhà quảng cáo (advertiser) hoặc cũng có thể là công ty trung gian (ad-agency)). Hình thức này thường có giới hạn thời gian với một cái giá cố định, ví dụ bạn muốn đăng banner trên vnexpress trong vòng một ngày, bạn liên lạc trực tiếp cho vnexpress, trả cho vnexpress một cái giá cố định, hoặc là trả theo ‘Impression’ (hay là số view). Hình thức quảng cáo này thường có giá trị về mặt ‘brand’, nên thường khách hàng sẽ là các nhãn hiệu lớn, muốn cho khách hàng nắm được thông tin về ‘campaign’ của mình, hoặc để cho hình ảnh ‘brand’ in đậm vào tâm trí người nhìn. Hình thức này có ưu điểm và nhược điểm là :</p>
<ul>
<li>Ưu điểm: Thường các media lớn sẽ có lượng view rất lớn -&gt; có lợi về quảng bá brand</li>
<li>Nhược điểm: Giá cao, không target được người dùng nên sẽ phí một lượng impression rất lớn cho những người không quan tâm.</li>
</ul>
<h1 id="quảng-cáo-dựa-vào-search-engine-listing-adverstisement">Quảng cáo dựa vào search engine (listing adverstisement)</h1>
<p>Đây là cách quảng cáo đem lại doanh thu chủ yếu cho các search engine thông dụng như google hay yahoo. Để hình dung về hình thức này, bạn chỉ cần tham khảo 2 ví dụ dưới đây mà mình chụp lại của google.</p>
<p><img src="http://git@github.com.github.com/images/ad/listing1.png"> <img src="http://git@github.com.github.com/images/ad/listing2.png"></p>
<p>Ở hình thứ nhất, khi tôi search từ khoá liên quan đến quần áo, google sẽ đưa quảng cáo liên quan đến <strong>từ khoá</strong> đó lên đầu. Để mua được quảng cáo loại này, thì advertiser phải mua quảng cáo dưới dạng <strong>từ khoá</strong> (keyword). Dạng quảng cáo này chính là hệ thống <a href="http://www.google.co.uk/adwords/start/?channel=ha&amp;sourceid=awo&amp;subid=uk-en-ha-aw-bkha0~53770295815&amp;gclid=CLrnxP2s0cMCFcKUvQodlykANQ">Adwords</a> nổi tiếng của google mà chắc bạn đã từng nghe qua.</p>
<p>Ở hình thứ 2, bạn có thể thấy khi search từ khoá liên quan đến nhãn hiệu hàng hoá montbell, google không chỉ đưa ra link dẫn đến trang web có món hàng, mà còn đưa ra cụ thể chi tiết của từng sản phẩm. Hình thức quảng cáo này vẫn dựa trên nên tảng là adwords (mua keywords), tuy nhiên ở một mức cao hơn gọi là <a href="http://www.google.com/ads/shopping/getstarted.html">listing ads</a>. Để làm được việc này thì advertisers phải cung cấp cho google thông tin về sản phẩm (link ảnh, giá cả…) dựa trên hình thức <strong><em>feed</em></strong> (bạn có thể hình dung giống như RSS, advertiser cung cấp http://advertiser.com/feed.xml, google fetch thông tin về, đưa vào cơ sở dữ liệu của google).</p>
<p>Hình thức quảng cáo dựa trên search engine có ưu điểm và nhược điểm là:</p>
<ul>
<li>Ưu điểm: ‘động lực’ của user rất cao -&gt; tỉ lệ click rất tốt. (khi user đã ‘chủ động’ tìm kiếm thì khả năng click vào link một món hàng ưa thích sẽ rất cao)</li>
<li>Nhược điểm: Phụ thuộc vào keyword, một số keyword thông dụng có giá rất cao. Ngoài ra việc chọn lựa keyword một cách hợp lý cũng không hề dễ dàng.</li>
</ul>
<h1 id="quảng-cáo-hiển-thị-display-advertisement---programmatic">Quảng cáo hiển thị (display advertisement - programmatic)</h1>
<p>Loại hình quảng cáo này là loại hình thông dụng và ‘bình dân’ nhất, với đặc điểm chính là ‘tiến hoá’ từ quảng cáo thuần (pure advertisement). Pure advertisement có nhược điểm là phải có quá trình trao đổi trực tiếp giữa ‘người mua’ và ‘người bán’, và người bán ở đây thường chỉ là các media lớn, có lượng impression cực cao. Các media lớn này thường là các trang web báo chí (The NYTimes, Vnexpress…), hay các trang portal (như yahoo news..). Vậy các media nhỏ hơn làm sao để có thể bán inventory của mình (inventory là các ‘chỗ trống’ trên trang web để có thể đặt quảng cáo vào). Đây chính là vấn đề mà display advertisement-programmatic giải quyết, khi sinh ra các khái niệm mà tôi đã đề cập ở bài viết trước như : Ad-network, Ad-exchange, DSP, SSP…</p>
<p>Ad-network lớn nhất hiện nay có thể nhắc đến Google Display Network (GDN). GDN bao gồm cả hệ thống google adsense mà các bạn nào đã từng đặt quảng cáo adsense có thể đã biết. Khi đặt quảng cáo adsense thì bạn (media) đã gia nhập vào hệ thống network của google (GDN).</p>
<p>Mô hình quảng cáo này sẽ được tôi nhắc đến kĩ hơn trong bài viết sắp tới, tuy nhiên có thể lại các ưu nhược điểm như sau:</p>
<ul>
<li>Ưu điểm: có thể điều chỉnh được giá thông qua việc ‘bid’ nhở có RTB (bạn có thể xem lại khái niệm về Real time bidding ở bài viết trước) -&gt; về cơ bản giá sẽ rẻ hơn. Độ phủ sóng rộng hơn nhờ có ad-network. Ngoài ra nhơ việc tracking người dùng nên có thể sử dụng kĩ thuật retargeting để ‘kéo’ người dùng lại với service của mình.</li>
<li>Nhược điểm: advertiser sẽ không biết quảng cáo của mình sẽ được đặt ở đâu (RTB sẽ quyết việc này tại real-time), dẫn đến có thể quảng cáo của công ty X, sẽ lại được đặt ở … website của đối thủ của X (việc này có thể giải quyết dựa vào một số công ty 3rd-party chuyên đi đánh giá độ tin cậy của media). Một nhược điểm rất lớn nữa của loại hình này chính là các thuật toán RTB thường không đủ thông minh để xác định user nào ‘nên’ hiện và user nào ‘không nên’ hiện quảng cáo, khiến cho 90% impression sẽ bị qui vào thể loại quảng cáo gây khó chịu cho người dùng.</li>
</ul>
<h1 id="các-hình-thức-quảng-cáo-khác">Các hình thức quảng cáo khác</h1>
<p>Ngoài các hình thức trên thì hiện nay còn rất nhiều hình thức quảng cáo khác ‘mới nổi’ mà có thể kể đến điển hình như:</p>
<ul>
<li>Quảng cáo trên mạng xã hội (facebook, twitter): hình thức này có lẽ tương lai sẽ thống trị quảng cáo trên internet nói chung, khi mà các mạng xã hội như facebook, twitter nắm ‘rất nhiều’ thông tin về người dùng, đủ cho họ có thể target được chính xác ‘ai cần gì’, khiến cho chỉ với một cái giá rất rẻ nhưng đem lại hiệu quả rất lớn cho advertiser.</li>
<li>Quảng cáo trên mobile (admob, apple ad..): có lẽ các bạn sử dụng smartphone, cũng như các nhà phát triển smartphone sẽ nắm rất rõ loại hình này. Loại hình này có ưu điểm là impression rất lớn, khi mà lượng smartphone user tăng cao + thời gian sử dụng smartphone chiếm tỉ lệ cao sơ với web. Tuy nhiên nhược điểm lớn của loại hình này là các công ty như admob hay apple vẫn đang ‘loay hoay’ tìm các ‘đăt’ quảng cáo sao cho ít gây trở ngại đến người dùng nhất. 99% quảng cáo trên mobile sẽ được qui vào dạng gây cực kì khó chịu cho người dùng. Hơn nữa, tracking người dùng web và mobile hiện là một công việc không hề dễ (cross-device tracking), nên làm cho độ chính xác của quảng cáo trên mobile đang là cực thấp.</li>
</ul>
<h1 id="tổng-kết">Tổng kết</h1>
<p>Ở bài viết này tôi đã giới thiệu một cách cơ bản nhất về các loại hình quảng cáo. Bài viết chủ yếu đi về các khái niệm, để làm nền tảng cho bài viết sắp tới tôi sẽ nói rõ hơn về khía cạnh kĩ thuật của hình thức quảng cáo hiển thị (display advertisement), cũng như các cách để ‘tracking’ người dùng.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Đem sản phẩm đến với thế giới Hacker]]></title>
    <link href="http://git@github.com.github.com/blog/2015/01/08/foss/"/>
    <updated>2015-01-08T19:54:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2015/01/08/foss</id>
    <content type="html"><![CDATA[<p><em>Bài viết này là phần tiếp theo của bài viết <a href="http://ktmt.github.io/blog/2014/08/01/toi-da-xay-dung-1-phan-mem-ma-nguon-mo-nhu-the-nao/">Tôi đã xây dựng một phần mềm mã nguồn mở như thế nào</a>. Cách sử dụng từ “Hacker” là thống nhất với phần 1.</em></p>
<h1 id="vai-trò-của-cộng-đồng">Vai trò của cộng đồng</h1>
<p>“Đem sản phẩm đến với cộng đồng” luôn là phần khó đối với một người làm kỹ thuật.</p>
<p>Chúng ta có thể say mê, thức ngày thức đêm để viết lib, viết tool, hoàn thành đoạn code mà bản thân cảm thấy tâm đắc. Tuy nhiên mọi chuyện thường kết thúc ở đó. Thiếu quảng bá và truyền thông sẽ khiến sản phẩm chỉ loanh quanh ở mức bạn bè dùng thử rồi bạn bè cho ý kiến, sản phẩm làm ra chẳng bao giờ thực sự đến được với <em>cộng đồng</em>.</p>
<p>Xây dựng xong <a href="https://github.com/DTVD/rainbowstream">Rainbow Stream</a>. Tôi đã bắt đầu đi học hỏi và tìm cách quảng bá, giới thiệu. Bỏ bên lề những vấn đề kỹ thuật đã trình bày trong phần 1, phần 2 này sẽ tập trung nói về quá trình quảng bá và giới thiệu đó.</p>
<h1 id="kênh-quảng-bá">Kênh quảng bá</h1>
<p>Người dùng của sản phẩm mã nguồn mở được xác định sẽ là chính những hacker như bản thân tác giả. Bước đầu tiên tôi đã thực hiện là tìm hiểu xem cộng đồng hacker trên thế giới đang đọc gì ? ở đâu ? Bản danh sách tóm tắt dưới đây sẽ đưa ra những câu trả lời theo thứ tự.</p>
<ul>
<li><a href="https://news.ycombinator.com/">Hacker News</a> là nơi tập trung nhiều view nhất. Lên được front page của <a href="https://news.ycombinator.com/">Hacker News</a> là ước mơ của mọi dự án mã nguồn mở, và featured trên front page là cột mốc đáng nhớ đối với mọi hacker. Thuật toán ranking của <a href="https://news.ycombinator.com/">Hacker News</a> đã được đề cập trong <a href="http://ktmt.github.io/blog/2013/08/06/a-little-bit-about-news-ranking/">một bài biết khác</a> của blog KTMT, có đặc điểm là sẽ đào thải những item cũ rất nhanh dù upvote có nhiều thế nào đi nữa.</li>
<li><a href="http://www.reddit.com/">Reddit</a> là nguồn thông tin tiếp theo. Reddit có rất nhiều sub nhưng dành cho hacker thì chúng ta có <em>r/programmingp</em>, <em>r/coolgithubprojects</em>, v.v… Nếu giữ được upvote cao thì thời gian trên front page của Reddit sẽ dài hơn <a href="https://news.ycombinator.com/">Hacker News</a>. Tuy nhiên Reddit có rất nhiều downvoter (những user/bot chuyên đi downvote).</li>
<li><a href="http://twitter.com/">Twitter</a> của những blog/tạp chí/hacker nổi tiếng. Kênh này tỏ ra hiệu quả bát ngờ so với dự tính.</li>
<li>Các blog kỹ thuật - trang chủ của những tài khoản Twitter đề cập ở trên.</li>
</ul>
<h1 id="chuẩn-bị-trước-khi-bắt-đầu-chiến-dịch">Chuẩn bị trước khi bắt đầu chiến dịch</h1>
<p>Những kênh ở phần trước có thể đem lại cho bạn lượng view đầu vào rất lớn, nhưng để user <strong>nán lại và đọc hết</strong>, <strong>dùng thử</strong> sản phẩm và tốt hơn nữa là đi <strong>giới thiệu lại</strong> sản phẩm hộ bạn, bạn cần chuẩn bị thật tốt những chỉ mục sau đây</p>
<h2 id="một-cái-tên-tốt">Một cái tên tốt</h2>
<p>Một cái tên dễ nhớ, dễ đánh vần, và quan trọng hơn là <em>chưa thuộc về một sản phẩm khác</em> là điều đầu tiên cần thiết. Hãy dùng Chrome incognito mode để kiểm tra mọi ý tưởng.</p>
<h2 id="source-code-được-open-trên-github.">Source code được open trên Github.</h2>
<p>Hoặc Bitbucket hay Google Code. Tuy nhiên cộng đồng trên Github đang phát triển mạnh mẽ và nhanh chóng hơn cả. Host source code trên Github sẽ nhận được nhiều feedback và Pull Request.</p>
<h2 id="official-homepage">Official homepage</h2>
<p>Thực tế Github Project đã có thể làm official homepage. Tuy nhiên tôi vẫn mua thêm domain <a href="http://www.rainbowstream.org/">rainbowstream.org</a>, làm một cái Github Page, lấy một cái theme đẹp và trỏ vào domain làm homepage thứ 2. Tại sao ư ? 2 link homepage sẽ đem lại 2 cơ hội giới thiệu trên <a href="https://news.ycombinator.com/">Hacker News</a>. Theme đẹp cho một trang homepage đơn giản có thể tìm thấy ở <a href="http://html5up.net/">HTML5up</a>.</p>
<h2 id="readme.md">README.md</h2>
<p>README.md là cái đầu tiên đập vào mắt user khi họ đến homepage. Một file README tốt sẽ nói với user :</p>
<ul>
<li>Project của bạn <strong>tạo nên cái gì</strong> và <strong>tại sao</strong> user cần dùng nó.</li>
<li>Hướng dẫn cài dặt.</li>
<li>Hướng dẫn sử dụng.</li>
<li>Đường dẫn đến full document. Document cần phải làm riêng trên một file khác hoặc một dịch vụ khác.</li>
<li>License. License là một điểm rất quan trọng trong cộng đồng mã nguồn mở. Rất tiết bài viết này không có điều kiện trình bày cụ thể về các loại license. Ở đây <a href="https://github.com/DTVD/rainbowstream">Rainbow Stream</a> dùng MIT license.</li>
<li>Nơi user có thể nhận được sự giúp đỡ của bạn (đặt câu hỏi, yêu cầu tính năng hay báo cáo bug).</li>
<li>Cách user có thể đóng góp cho project.</li>
<li>Ảnh minh hoạ. Đối với các sản phẩm về UI, ảnh minh hoạ sẽ gây ấn tượng mạnh nhất về thị giác. Tôi thậm chí đã dùng <a href="https://github.com/icholy/ttygif">ttygif</a> tạo ảnh gif để cho ấn tượng mạnh hơn nữa :D</li>
</ul>
<h2 id="viết-ut-cho-project">Viết UT cho project</h2>
<p>Chưa cần nói đến chất lượng sản phẩm, source code được viết test sẽ có độ tin tưởng khác hẳn với những source code không có. Đặc biệt nếu project của bạn là một library với mục đích được dùng lại, không có testcase là đồng nghĩa với không có người dùng.</p>
<h2 id="một-tài-khoản-twitter">Một tài khoản Twitter</h2>
<p>Đối với cộng đồng hacker thì Twitter gần như trở thành định danh chính thức vậy. Twitter dùng để giao tiếp với user, phát đi thông báo nâng cấp hay tương tác với các tài khoản của người nổi tiếng.</p>
<h1 id="sử-dụng-các-kênh-quảng-bá">Sử dụng các kênh quảng bá</h1>
<h2 id="twitter-và-các-blog-kỹ-thuật">Twitter và các blog kỹ thuật</h2>
<p>Xác định được các tài khoản Twitter nổi tiếng là bước quan trọng đầu tiên. Bạn cần tìm ra keyword thể hiện được lĩnh vực mà sản phẩm của bạn đang hướng đến, lên <a href="https://followerwonk.com/bio/">FollowerWork</a> và tìm kiếm account của các blogger xếp theo số lượng follower. Tìm được profile rồi, hãy google ra homepage của họ (hoặc của trang tin kỹ thuật), mở phần contact để lấy email. Bước tiếp theo là soạn một email để nhờ họ giới thiệu về sản phẩm của bạn. Hãy nhớ, nội dung phải lịch sự và nhã nhặn, tóm gọn được sơ lược về sản phẩm và có <em>đường link đến homepage</em>. Đừng tở ra ngại ngùng ở tư thế người đi nhờ. Bản thân các blogger cũng cần những sản phẩm hay để thu hút view cho trang web của chính họ.</p>
<p>Đến khi sản phẩm được nhắc đến trong 1 tweet hoặc được viết hẳn thành 1 bài trên trang tin thì bạn sẽ ngạc nhiên với độ lan truyền của nó :D</p>
<p><img src="http://git@github.com.github.com/images/rs/Twitter.png"></p>
<h2 id="reddit">Reddit</h2>
<p>Giới thiệu sản phẩm mã nguồn mở trên <a href="http://www.reddit.com/">Reddit</a> là cách dễ dàng ở mức tiếp theo. <a href="http://www.reddit.com/">Reddit</a> được chia thành rất nhiều các subreddit(kênh nhỏ) về các chủ đề cụ thể khác nhau. Bạn cần tìm kênh đông thành viên và liên quan đến chủ đề của sản phẩm. Sau đây là danh sách các subreddit tôi đã thử với <a href="https://github.com/DTVD/rainbowstream">Rainbow Stream</a></p>
<ul>
<li><a href="http://www.reddit.com/r/programming/">r/programming</a></li>
<li><a href="http://www.reddit.com/r/coolgithubprojects/">r/coolgithubprojects</a></li>
<li><a href="http://www.reddit.com/r/Python/">r/Python</a></li>
<li><a href="http://www.reddit.com/r/commandline/">r/commandline</a></li>
<li><a href="http://www.reddit.com/r/linux/">r/linux</a></li>
<li><a href="http://www.reddit.com/r/unixporn/">r/unixporn</a></li>
</ul>
<p>Muốn tin đăng trông bắt mắt và gây ấn tượng với người đọc, bạn nên post kèm 1 ảnh được up thông qua <a href="http://imgur.com/">Imgur</a>. Một tin được tỉ lệ upvote cao (&gt;70%) có thể ở nguyên trên frontpage của subreddit khoảng vài ngày.</p>
<p><img src="http://git@github.com.github.com/images/rs/Reddit.png"></p>
<h2 id="hacker-news">Hacker News</h2>
<p>Chúng ta sẽ nói về phần khó nhất. Đã có vô số bài nghiên cứu về traffic của <a href="https://news.ycombinator.com/">Hacker News</a>, thời gian nào up lên là tốt nhất, chiến thuật lên front, bám front (lên được trang chủ và trụ lại trang chủ) trong thời gian dài. Bất kỳ ai cũng có thể post link lên <a href="https://news.ycombinator.com/">Hacker News</a>, tuy nhiên để post link có phần đầu là <em>[Show HN]</em> thì đòi hỏi phải có account đăng ký được một thời gian. Tôi đã lập account và đọc <a href="https://news.ycombinator.com/">Hacker News</a> trước khi làm <a href="https://github.com/DTVD/rainbowstream">Rainbow Stream</a>, nên may mắn có thể gửi link luôn khi hoàn thành sản phẩm.</p>
<p>Lên front được khoảng 20 tiếng đã đem lại 5000~6000 view và ít nhất 300+ star trên Github, rất ấn tượng phải không :) Sau đây là một vài lời khuyên nhỏ</p>
<ul>
<li>Tiêu đề đăng link cần thể hiện được <em>khả năng của sản phẩm</em> theo một <em>góc nhìn sáng tạo</em>. Hãy tham khảo <a href="https://news.ycombinator.com/show">Show HN page</a></li>
<li>Cần điểm nhấn về thị giác khi user click vào link điến trang chủ của bạn (Ảnh gif trên README.md hay trang Github Page ấn tượng)</li>
<li>Cần phâi post link vào 1 giờ chiều giờ Mỹ.</li>
<li>Cần vận động bạn bè khoảng 5~10 người upvote luôn trong 10 phút đầu tiên Hãy nhờ bảo bạn bè của bạn vào thẳng trang chủ của <a href="https://news.ycombinator.com/">Hacker News</a> để vote, không thông qua link gửi trực tiếp.</li>
</ul>
<p><img src="http://git@github.com.github.com/images/rs/HN.png"></p>
<h2 id="tổng-kết">Tổng kết</h2>
<p>Bài viết này đã tổng kết các kinh nghiệm quảng bá của một sản phẩm mã nguồn mở đối với cộng đồng hacker trên thế giới. Mặc dù chúng ta có thể áp dụng rất nhiều các mẹo vặt, hướng dẫn để tăng view cho sản phẩm, nhưng bạn hãy nhớ, điều cốt yếu nhất vẫn là chất lượng sản phẩm của bạn.</p>
<p>Chất lượng bao gồm cả chất lượng trong quá trình làm ra và chất lượng support trong cả thời gian phát triển. Hãy cố gắng fix hết bug, trả lời mọi câu hỏi và review mọi Pull Request một cách cẩn thận. Bạn sẽ nhận lại không chỉ sự tôn trọng trong giới hacker mà cả những cơ hội từ trước đến nay chưa bao giờ nghĩ tới. Happy hacking!</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mở đầu về Haskell]]></title>
    <link href="http://git@github.com.github.com/blog/2015/01/03/mo-dau-ve-haskell/"/>
    <updated>2015-01-03T14:09:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2015/01/03/mo-dau-ve-haskell</id>
    <content type="html"><![CDATA[<p>Chúc mừng năm mới 2015 tới tất cả bạn đọc ktmt blog :) Chúc các bạn một năm mới coding thật productive! ^^</p>
<p>Năm mới chắc hẳn hầu hết mọi người đều có resolution của riêng mình. Một trong những resolution của tôi năm nay là học một ngôn ngữ lập trình mới, đến level có thể viết một chương trình không đơn giản với nó. (Bạn có thể tham khảo một danh sách các resolutions cho programmer ở <a href="http://matt.might.net/articles/programmers-resolutions/">đây</a>). Ngôn ngữ mà tôi chọn là Haskell, một functional programming language, vì những ý tưởng trong ngôn ngữ lập trình này khác hẳn những ngôn ngữ lập trình tôi đã tiếp cận, như C/C++, Java, Python.</p>
<p>Tôi mới bắt đầu với Haskell được một vài tháng, và cảm thấy khá thích thú về những ý tưởng mới mẻ của nó. Tôi sẽ bắt đầu viết chia sẻ những kiến thức tôi thu thập được trong quá trình tìm hiểu ngôn ngữ này trên ktmt. Tuy nhiên, tôi phải nói trước là Haskell khá trừu tượng, và với một beginner như tôi, việc cố diễn giải các khái niệm khó của Haskell có thể sẽ không chính xác và dễ gây hiểu lầm. Vì thế, tôi sẽ tập trung vào viết những đoạn code để giải quyết một vấn đề to hoặc nhỏ nào đó và cố giải thích chúng làm được như thế bằng cách nào. Những khái niệm khó, tôi sẽ dẫn về những bài viết nổi tiếng để bạn đọc có thể tìm hiểu thêm.</p>
<p>Trong bài viết đầu tiên này, tôi sẽ hướng dẫn cách cài đặt những thành phần cơ bản để chúng ta có thể bắt đầu lập trình với Haskell. Cuối bài, sẽ có một chương trình Hello World rất đơn giản để chúng ta test xem môi trường của chúng ta đã hoàn thiện chưa.</p>
<p>Chú ý: Hiện tại tôi test trên máy tính của tôi (Windows 7). Tôi đã từng cài đặt môi trường trên Mac OS X và Ubuntu Linux, nhưng chưa có thời gian kiểm tra lại. Tôi sẽ thêm thông tin nếu cần thiết.</p>
<h1 id="the-haskell-platform">The Haskell Platform</h1>
<p>Đây là cách đơn giản nhất để chúng ta có thể bắt đầu với Haskell. Trên <a href="https://www.haskell.org/platform/">Homepage</a>, Haskell Platform được gọi là “Haskell: batteries included”. Trên homepage này, bạn có thể tải về cả package để cài đặt cho cả ba môi trường: Windows, Linux, Mac OS X. Sau khi cài đặt, bạn sẽ có rất nhiều thành phần tiêu chuẩn để bắt đầu lập trình với Haskell (<a href="https://www.haskell.org/platform/contents.html">List</a>). Trong số đó, có những thành phần tiêu biểu sau:</p>
<h2 id="ghc-glassgow-haskell-compiler">GHC (Glassgow Haskell Compiler)</h2>
<p>Đây là compiler cho Haskell.</p>
<h2 id="ghci">GHCi</h2>
<p>Đây là GHC interactive interpreter. Nếu bạn đã từng lập trình với Python hoặc Ruby, bạn có thể coi GHCi giống như khi bạn gõ <code>python</code> (với Python) hoặc <code>irb</code> (với Ruby) trên command line. GHCi cực kì hữu dụng trong quá trình bạn viết code Haskell.</p>
<p>Bạn sẽ dành khá nhiều thời gian trong GHCi, nên chúng ta sẽ dành chút thời gian để config GHCi sao cho thuận tiện nhất. File config của GHCi là <code>.ghci</code>, vị trí của file này tùy thuộc vào hệ thống bạn đang sử dụng, bạn tham khảo ở đây: <a href="https://downloads.haskell.org/~ghc/7.4.2/docs/html/users_guide/ghci-dot-files.html">GHCi dot files</a>. Tôi tạo mới một file <code>.ghci</code> trong Home folder với nội dung:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
</pre>
</td>
<td class="code">
<pre><code class='bash'><span class='line'>:set prompt <span class="s2">&quot;h&gt; &quot;</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Làm vậy, mỗi lần mở GHCi, prompt của bạn chỉ đơn giản là <code>h&gt;</code> chứ không phải là tên tất cả các module đã load (bạn hãy thử xem khác nhau như thế nào nếu không có dòng setting trên)</p>
<h2 id="cabal">Cabal</h2>
<p>Cabal là viết tắt của <code>Common Architecture for Building Applications and Libraries</code>. Về chức năng, nó tương tự như <code>pip</code> của Python hay <code>gem</code> của Ruby, dùng để cài đặt những package chuẩn từ <code>Hackage</code> (Haskell Central package archive). Những người viết package sử dụng <code>Hackage</code> để publish các libraries hay programs của họ, và những Haskell programmer khác sử dụng các tool như <code>cabal-install</code> để download và cài đặt các package này.</p>
<p>Trên Windows 7, mỗi khi sử dụng cabal, các package sẽ được install vào <code>$HOME$\AppData\Roaming\cabal</code>. Trên Unix-based system, chúng được install vào <code>~/.cabal/</code>.</p>
<p>Sau đây là những thao tác đầu tiên bạn nên làm với <code>cabal</code>:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
</pre>
</td>
<td class="code">
<pre><code class='bash'><span class='line'><span class="nv">$ </span>cabal update
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Dùng để update list các package phiên bản mới nhất trên <code>hackage.haskell.org</code>.</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
</pre>
</td>
<td class="code">
<pre><code class='bash'><span class='line'><span class="nv">$ </span>cabal install cabal-install
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Dùng để update phiên bản <code>cabal-install</code> mới nhất</p>
<h1 id="code-editor-sublime-text">Code Editor: Sublime Text</h1>
<p>Bạn có thể dùng bất cứ một text editor nào để viết code Haskell. Nếu bạn sử dụng Sublime Text, bạn nên cài plugin SublimeHaskell. Đây là plugin hỗ trợ Cabal build, error and warning highlighting, smart completion và tích hợp ghc-mod. Bạn có thể tham khảo thêm thông tin tại <a href="https://github.com/SublimeHaskell/SublimeHaskell">GitHub repo</a></p>
<h1 id="cabal-sandbox">Cabal sandbox</h1>
<p>Với Haskell, <code>sandbox</code> cho phép chúng ta build các package một cách độc lập với package environment của hệ thống, bằng cách tạo ra một package environment riêng cho project hiện tại. Nếu bạn đã quen thuộc với Python’s <code>virtualenv</code> hoặc Ruby’s <code>RVM</code>, <code>sandbox</code> là một khái niệm tương tự.</p>
<p><a href="http://coldwa.st/e/blog/2013-08-20-Cabal-sandbox.html">Bài viết này</a> trình bày khá dễ hiểu về tại sao nên sử dụng <code>sandbox</code> để tránh dependency hell, bạn có thể tham khảo thêm. Một số thao tác cơ bản với cabal sandbox gồm có:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre>
</td>
<td class="code">
<pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /path/to/my/haskell/project
</span><span class='line'><span class="nv">$ </span>cabal sandbox init                    <span class="c"># Init the sandbox</span>
</span><span class='line'><span class="nv">$ </span>cabal install --only-dependencies     <span class="c"># Install dependencies into the sandbox</span>
</span><span class='line'><span class="nv">$ </span>cabal build                           <span class="c"># Build your package inside the sandbox</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Chú ý ở đây, cabal sandbox là một feature của cabal từ version 1.18 trở đi, cho nên sau khi init một sandbox hoàn toàn mới, các command tiếp theo (như <code>build</code> hay <code>install</code>) đều sẽ sử dụng sandbox chứ không phải package environment của hệ thống.</p>
<h1 id="ví-dụ-đầu-tiên-hello-world">Ví dụ đầu tiên: Hello World</h1>
<p>Chúng ta sẽ bắt đầu với ví dụ muôn thuở khi bắt đầu ngôn ngữ lập trình mới: In ra màn hình consle dòng chữ <code>Hello World</code>.</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre>
</td>
<td class="code">
<pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir haskell-hello-world
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>haskell-hello-world
</span><span class='line'><span class="nv">$ </span>cabal init
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p><code>cabal init</code> sẽ giúp chúng ta thêm thông tin cho project của mình, như: tên project, version, người phát triển, license,…</p>
<p>Tiếp theo, chúng ta edit file Cabal. Ví dụ sau khi edit, file <code>haskell-hello-world.cabal</code> của tôi có nội dung như sau:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre>
</td>
<td class="code">
<pre><code class='haskell'><span class='line'><span class="nf">name</span><span class="kt">:</span>                <span class="n">haskell</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="n">world</span>
</span><span class='line'><span class="nf">version</span><span class="kt">:</span>             <span class="mf">0.1</span><span class="o">.</span><span class="mf">0.0</span>
</span><span class='line'><span class="nf">synopsis</span><span class="kt">:</span>            <span class="kt">Hello</span> <span class="kt">World</span><span class="o">!</span>
</span><span class='line'><span class="nf">description</span><span class="kt">:</span>         <span class="kt">Print</span> <span class="sc">&#39;Hello World&#39;</span> <span class="n">to</span> <span class="n">console</span> <span class="n">screen</span>
</span><span class='line'><span class="nf">license</span><span class="kt">:</span>             <span class="kt">BSD3</span>
</span><span class='line'><span class="nf">license</span><span class="o">-</span><span class="n">file</span><span class="kt">:</span>        <span class="kt">LICENSE</span>
</span><span class='line'><span class="nf">author</span><span class="kt">:</span>              <span class="kt">Viet</span> <span class="kt">Nguyen</span><span class="p">,</span> <span class="mi">2015</span>
</span><span class='line'><span class="nf">maintainer</span><span class="kt">:</span>          <span class="n">viet</span><span class="o">.</span><span class="n">nguyen182</span><span class="o">@</span><span class="n">gmail</span><span class="o">.</span><span class="n">com</span>
</span><span class='line'><span class="nf">copyright</span><span class="kt">:</span>           <span class="kt">Viet</span> <span class="kt">Nguyen</span>
</span><span class='line'><span class="nf">category</span><span class="kt">:</span>            <span class="kt">Text</span>
</span><span class='line'><span class="nf">build</span><span class="o">-</span><span class="kr">type</span><span class="kt">:</span>          <span class="kt">Simple</span>
</span><span class='line'><span class="nf">cabal</span><span class="o">-</span><span class="n">version</span><span class="kt">:</span>       <span class="o">&gt;=</span><span class="mf">1.10</span>
</span><span class='line'>
</span><span class='line'><span class="nf">executable</span> <span class="n">haskell</span><span class="o">-</span><span class="n">hello</span><span class="o">-</span><span class="n">world</span>
</span><span class='line'>  <span class="n">ghc</span><span class="o">-</span><span class="n">options</span><span class="kt">:</span>         <span class="o">-</span><span class="kt">Wall</span>
</span><span class='line'>  <span class="n">hs</span><span class="o">-</span><span class="n">source</span><span class="o">-</span><span class="n">dirs</span><span class="kt">:</span>      <span class="n">src</span>
</span><span class='line'>  <span class="n">main</span><span class="o">-</span><span class="n">is</span><span class="kt">:</span>             <span class="kt">Main</span><span class="o">.</span><span class="n">hs</span>
</span><span class='line'>  <span class="n">build</span><span class="o">-</span><span class="n">depends</span><span class="kt">:</span>       <span class="n">base</span> <span class="o">&gt;=</span><span class="mf">4.7</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="mf">4.8</span>
</span><span class='line'>  <span class="kr">default</span><span class="o">-</span><span class="n">language</span><span class="kt">:</span>    <span class="kt">Haskell2010</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Một số điểm lưu ý từ file cabal trên:</p>
<ul>
<li>Đặt <code>hs-source-dirs</code> là thư mục <code>src</code> để Cabal biết nơi lưu các file modules</li>
<li>Đặt <code>main-is</code> thành <code>Main.hs</code> để compiler biết đầu là main function của file binary build ra</li>
<li><code>ghc-options</code> đặt thành <code>-Wall</code> để chúng ta có thể thấy các Warning từ GHC</li>
<li><code>build-depends</code> là nơi khai báo các library cần sử dụng, có thể kèm theo các option về yêu cầu version.</li>
</ul>
<p>File code của chúng ta nằm ở <code>src/Main.hs</code> có nội dung như sau:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre>
</td>
<td class="code">
<pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Main</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="n">putStrLn</span> <span class="s">&quot;Hello World!&quot;</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Đây là một module rất đơn giản, và vì nó được dùng làm target cho <code>main-is</code>, nó phải có một function tên <code>main</code> và tên của module cũng phải tên là <code>Main</code>. Hiện tại, bạn chưa cần để ý vội đến cú pháp mà chỉ cần biết rằng chương trình in ra màn hình dòng chữ “Hello World!”. (Chú ý: Có thể bạn sẽ nghĩ <code>putStrLn</code> tương tự như <code>printf</code> hay <code>cout</code> ở C/C++, nhưng với Haskell, nguyên lý sẽ khác hơn so với bạn nghĩ, nhưng đó là câu chuyện ở những bài viết sau này.)</p>
<p>Tiếp theo, chúng ta tạo một Cabal sandbox để chứa toàn bộ các dependencies (ví dụ Hello World này của tôi hơi trivial, vì không dùng library nào cả, nhưng vì tính đầy đủ, tôi vẫn xin trình bày về sandbox ở đây):</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
</pre>
</td>
<td class="code">
<pre><code class='bash'><span class='line'><span class="nv">$ </span>cabal sandbox init
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Sau bước này, chúng ta sẽ có file <code>cabal.sandbox.config</code> chứa thông tin về package environment, và sandbox nằm ở thư mục <code>.cabal-sandbox</code></p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre>
</td>
<td class="code">
<pre><code class='bash'><span class='line'><span class="nv">$ </span>cabal install --only-dependencies
</span><span class='line'><span class="nv">$ </span>cabal install
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Nếu build thành công, bạn sẽ có file binary <code>haskell-hello-world</code> ở <code>dist/build/haskell-hello-world</code>. Thử chạy nó xem sao:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre>
</td>
<td class="code">
<pre><code class='bash'><span class='line'><span class="nv">$ </span>./dist/build/haskell-hello-world/haskell-hello-world
</span><span class='line'>Hello World!
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Và chúng ta đã build thành công program đầu tiên!</p>
<h1 id="kết-luận">Kết luận</h1>
<p>Bài viết này là bài viết đầu tiên của tôi về Haskell. Chưa có gì nhiều về syntax, idea, concept, mà chỉ là những setup ban đầu để dễ dàng bắt đầu với Haskell. Trong những bài viết tiếp theo, tôi sẽ cố gắng từng bước một trình bày các ý tưởng của Haskell một cách dễ hiểu.</p>
<p>Hẹn gặp lại!</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“Tầm quan trọng của kiểu dữ liệu”]]></title>
    <link href="http://git@github.com.github.com/blog/2014/12/15/tam-quan-trong-cua-kieu-du-lieu/"/>
    <updated>2014-12-15T16:56:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2014/12/15/tam-quan-trong-cua-kieu-du-lieu</id>
    <content type="html"><![CDATA[<h1 id="mở-đầu">Mở đầu</h1>
<p>2h sáng. “beep, you’ve got mail”. Mail từ hệ thống giám sát zabbix.</p>
<p>1 URL quan trọng trong hệ thống web không hiển thị được. Truy cập vào URL đó nhận status code http trả về 503. Zabbix định kỳ kiểm tra mã lỗi và khi mã trả về khác 200, <a href="zabbix.com">zabbix</a> gửi mail cho hắn.</p>
<p>“Lại có vấn đề gì rồi đây…” — hắn vùng dậy, mở laptop lên, mở browser ra và truy cập thử vào URL được thông báo. “Quả nhiên là không vào được”, hắn nghĩ. Ssh thử vào một máy chủ và kiểm tra error log. Thông báo lỗi “Không truy cập được đến máy chủ cơ sở dữ liệu X” liên tiếp liên tiếp được ghi ra log. “Máy chủ X lại có vấn đề gì rồi đây …”. Hắn vừa nghĩ, mắt vừa lướt qua các đồ thị giám sát tài nguyên của toàn bộ hệ thống. “Lưu lượng truy cập vào máy chủ web vẫn bình thường. Tỉ lệ cachehit vẫn không đổi. Mọi thứ không có gì có vẻ bất thường. Vậy vấn đề này ở máy chủ X rồi”. Hắn nghĩ, rồi gõ</p>
<div>
<pre><code class='bash'>ssh X</code></pre>
</div>
<h1 id="truy-tìm">Truy tìm</h1>
<p>X là một máy chủ cơ sở dữ liệu chạy mysql, 4 cores 24GB Ram 2 đĩa cứng 300GB RAID 1. Không quá yếu nhưng cũng không quá khoẻ. Vì là máy chủ cơ sở dữ liệu nên phần lớn tài nguyên của X được dùng cho mysql.</p>
<p>“Để xem chú mày bị làm sao nhé!” - hắn bắt đầu công đoạn chẩn đoán bệnh của máy chủ.</p>
<p>Sau khi vào máy chủ X, hắn gõ top. Lệnh top hiện ra máy chủ có 4 cores, tất cả đều có %cpu xấp xỉ 95%. Hắn gõ <a href="http://linux.die.net/man/1/iostat">iostat</a> 1, và quan sát I/O của đĩa cứng. <a href="http://en.wikipedia.org/wiki/Transfer_%28computing%29">TPS</a> (Trasfer per second) biến động từ 131.89 xuống đến 19.00. tps trung bình không cao. Blk_wrtn/s và Blk_read/s cũng biến động nhưng trung bình cũng không cao.</p>
<p>“CPU hoạt động cật lực trong khi đấy I/O thì không quá lớn”, hắn ghi lại điểm quan trọng này trong đầu. Ghi nhớ xong, hắn tiếp tục mở slow query log ra xem. Log này ghi lại những query mà mysql chạy quá lâu hơn 1s. 1 loạt query kiểu</p>
<pre><code>select * from table_name where video_id in (12345, ‘23434’) and language = ‘en-us’;</code></pre>
<p>được ghi ra log.</p>
<p>Query trên có 2 điểm rất kỳ lạ.</p>
<ul>
<li>Thứ nhất name được query theo cả kiểu số và xâu dữ liệu.</li>
<li>Thứ hai query trên khá đơn giản, lệnh show table status like ‘table_name’ cho hắn kết quả số dòng chỉ khoảng 70000 dòng - 1 con số không lớn. Vậy mà X phải hoạt đông 95% cpu mà vẫn không thể nào trả về kết quả câu lệnh trên trong 1s.</li>
</ul>
<div>
<pre><code class='bash'>$ mysql -u root -p
Enter password: ***********
mysql&gt; use database database_name;
mysql&gt; show table status like ‘table_name’\G;
*************************** 1. row ***************************
           Name: table_name
         Engine: InnoDB
        Version: 10
     Row_format: Compact
           Rows: 72148
 Avg_row_length: 924
    Data_length: 66732032
Max_data_length: 0
   Index_length: 14630912
      Data_free: 7340032
 Auto_increment: NULL
    Create_time: 2013-10-11 18:33:07
    Update_time: NULL
     Check_time: NULL
      Collation: utf8_general_ci
       Checksum: NULL
 Create_options:
        Comment: Latest translation for vid</code></pre>
</div>
<p>Để xem chú mày đang bận rộn xử lý cái gì nhé.</p>
<div>
<pre><code class='bash'>mysql&gt; show process list;

1 loạt query kiểu 

“select * from table_name where video_id in (12345, ‘23434’) and language = ‘en-us’;”</code></pre>
</div>
<p>“beep, you’ve got mail”. Một mail mới lại về. Máy chủ web đã không thể nào truy cập được X. Zabbix thông báo bản thân zabbix cũng không thể nào truy cập máy chủ X để lấy thông tin giám sát.</p>
<p>“Tình huống có vẻ nghiêm trọng lên.” hắn lẩm bẩm.</p>
<p>Máy chủ bận rộn CPU, I/O không lớn chứng tỏ là query trên tốn rất nhiều CPU. Có lẽ CPU đang tốn thời gian để sắp xếp và tìm kiếm, một mình chứng của việc mysql đang phải tìm với 1 lượng dữ liệu lớn. 70000 không phải con số to, do vậy chỉ có thể là máy chủ X đang phải tìm kiếm mà không có chỉ mục (index)!</p>
<p>“Không lẽ nào!”, vừa nói hắn vừa gõ lệnh</p>
<div>
<pre><code class='bash'>mysql&gt; show index from table_name;

+-------------+------------+-------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
| Table       | Non_unique | Key_name          | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment |
+-------------+------------+-------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
| table_name  |          0 | PRIMARY           |       1      | id          | A         |     73908   |     NULL | NULL   |      | BTREE      |         |
| table_name  |          0 | PRIMARY           |       2      | language    | A         |     73908   |     NULL | NULL   |      | BTREE      |         |
| table_name  |          1 | idx_table_name_1  |       1      | user_id     | A         |     24636   |     NULL | NULL   |      | BTREE      |         |
+-------------+------------+-------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+</code></pre>
</div>
<p>Rất buồn, vậy là video_id có gắn index đàng hoàng. Vậy thì không có lý do gì mà query trên lại không query theo index cả. Thật kỳ lạ. Vậy để thử xem query trên có dùng index không nhé. Đoạn hắn lấy 1 query bất kỳ và thử <a href="http://dev.mysql.com/doc/refman/5.6/en/explain.html">EXPLAIN</a>.</p>
<div>
<pre><code class='bash'>mysql&gt; explain SELECT * FROM table_name WHERE `video_id` IN (1412240325) AND `language` = “en-us”\G;
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: table_name
         type: ALL
possible_keys: PRIMARY,idx_table_name_2
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 66870
        Extra: Using where
1 row in set (0.00 sec)

ERROR:
No query specified</code></pre>
</div>
<p><em>key: NULL</em> nghĩa là query trên không sử dụng index! Tại sao bảng có chỉ mục mà query lại không dùng index. Chắc chắn là video_id có vấn đề rồi. Vừa nghĩ hắn vừa gõ câu lệnh show create table để xem kiểu dữ liệu lúc tạo bảng.</p>
<div>
<pre><code class='bash'>mysql&gt; show create table table_name;
table_name | CREATE TABLE `table_name` (
  `video_id` varchar(34) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `language` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `user_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`video_id`,`language`),
  KEY `idx_videotranslationinfo_1` (`user_id`),
  KEY `idx_videotranslationinfo_2` (`video_id`),
  KEY `idx_videotranslationinfo_3` (`language`),
  ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&#39;Latest translation for videos.&#39; |</code></pre>
</div>
<p>Có gì đó không ổn. Query thì coi video_id như là kiểu số nguyên, trong khi bảng lại định nghĩa video_id kiểu xâu dữ liệu. Có lẽ việc khác nhau trong kiểu dữ liệu này làm mysql không so sánh được truy cập với index, làm cho mysql sẽ tìm bản ghi bằng cách lặp toàn bộ bảng. Suy nghĩ vậy, hắn liền thử explain 1 query sau khi đã thay số bằng chữ.</p>
<div>
<pre><code class='bash'>mysql&gt; explain SELECT * FROM table_name WHERE `video_id` IN (“1412240325”) AND `language` = “en-us”\G;
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: table_name
         type: ALL
possible_keys: PRIMARY,idx_table_name_2
          key: PRIMARY
      key_len: NULL
          ref: NULL
         rows: 66870
        Extra: Using where
1 row in set (0.00 sec)

ERROR:
No query specified</code></pre>
</div>
<p>“Ồ la la” hắn khẽ reo lên.</p>
<p>Sau khi đổi video_id thành kiểu chuỗi thì index đã được sử dụng <em>key: PRIMARY</em>. Hắn ngay lập tức liên lạc với bên phát triển và để sửa đoạn code sinh ra query trên. Bên phát triển lập tức tìm ra có 1 dòng code chưa gọi strval để biến video_id thành xâu dữ liệu trước ném query cho DB. Bên phát triển lập tức sửa source code và cập nhật phiên bản mới nhất lên máy chủ. Ngay lập tức %cpu của X trở về 1%. Trang web lại vào bình thường như chưa từng có gì cản trở. Slow log query cũng dừng log query hẳn.</p>
<h1 id="bài-học">Bài học</h1>
<p>Index thật quan trọng và Kiểu dữ liệu cũng rất quan trọng.</p>
<p>Hắn khoái trí khi phát hiện ra hiểu ra được thêm 1 nguyên lý hoạt động của mysql cũng như ảnh hưởng của máy chủ X lên toàn bộ hệ thống. Đôi khi chỉ 1 mặt xích sai sót trong cả 1 dây chuyền có thể phá huỷ toàn bộ dây chuyền - hắn lờ mờ suy nghĩ và ngủ gục. Giờ là 4h sáng.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Đôi điều về hệ thống quảng cáo (phần 1)]]></title>
    <link href="http://git@github.com.github.com/blog/2014/11/09/doi-dieu-ve-he-thong-quang-cao/"/>
    <updated>2014-11-09T17:16:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2014/11/09/doi-dieu-ve-he-thong-quang-cao</id>
    <content type="html"><![CDATA[<h1 id="lời-nói-đầu">1. Lời nói đầu</h1>
<p>Là một lập trình viên, tôi có thể khẳng định một điều là tôi <strong><em>ghét quảng cáo</em></strong>! Và tôi chắc chắn 90% các bạn cũng ghét quảng cáo như tôi. Bằng chứng là bạn đang cài adblock extension cho chrome hoặc firefox, hay là chúng ta hay đem hình tượng ‘kangaroo’ (một quảng cáo đã trở thành hiện tượng khi phát vào chung kết C1 năm 2011) là một hình tượng cho sự ‘xấu xa’, ‘phiền phức’ của quảng cáo.</p>
<p>Chúng ta cũng hay dùng quảng cáo như là thước đo cho chất lượng của một kênh truyền hình hay là trang web, ví dụ như: ‘vtv3 dạo này toàn quảng cáo’, hay là ‘trang web abcxyz toàn quảng cáo, lừa đảo đó!’.</p>
<p>Vậy lý do làm sao chúng ta lại ghét quảng cáo đến vậy? Có lẽ nguyên nhân lớn nhất là chúng <strong>cản trở</strong> chúng ta đến với dịch vụ (che tầm nhìn của trang web hay ti vi), và chúng hiển thị những thông tin mà chúng ta coi là <strong>dư thừa</strong>, không cần thiết. Tuy nhiên có phải vì thế mà quảng cáo chỉ toàn điều xấu và không đáng tồn tại?</p>
<p>Tuy nhiên, hãy nhìn vào mặt tốt của quảng cáo một chút</p>
<ul>
<li>Quảng cáo giúp những người làm sản phẩm có cơ hội được khách hàng biết đến. Nếu không có quảng cáo thì những sản phẩm chưa được biết đến hầu như không có cơ hội ‘ngoi lên’ trên thị trường.</li>
<li>Quảng cáo giúp người tiêu dùng gặp được những sản phẩm có ích (mặc dù theo cách rất tình cờ)</li>
<li>Quảng cáo giúp cho các trang web miễn phí, các nhà phát triển app trên điện thoại miễn phí có nguồn doanh thu để tạo ra các sản phẩm có ích cho chúng ta dùng.</li>
</ul>
<p>Vậy nếu nhìn theo những hướng tích cực này thì quảng cáo không hề xấu, chỉ có cách thức tiến hành quảng cáo tồi đã gây nên những hình ảnh thiếu tích cực với quảng cáo. Vậy với tư cách là người tiêu dùng, chúng ta cần một hệ thống quảng cáo thông minh hơn, mà không <strong>cản trở</strong>, cũng như cung cấp những thông tin quảng cáo có ích, phù hợp hơn đúng không?</p>
<p>Thực tế thì hệ thống quảng cáo đã và đang thay đổi hàng ngay để thông minh hơn, đến đúng người dùng hơn. Trong bài viết này tôi sẽ giới thiệu qua về hệ thống quảng cáo trên internet nói chung, về khái niệm cũng như cách thức vận hành của chúng. Qua đó bạn sẽ hiểu tại sao google lại chỉ có thể sống được mà chỉ nhờ có quảng cáo, bạn cũng hiểu được tại sao facebook, twitter sẵn sàng cung cấp dịch vụ miễn phí cho bạn. Để bắt đầu, trước tiên chúng ta sẽ đến với các thuật ngữ chuyên môn được sử dụng trong hệ thống quảng cáo.</p>
<h1 id="các-thuật-ngữ">2. Các thuật ngữ</h1>
<p>Do hệ thống quảng cáo ở Việt Nam còn khá non nớt và thô sơ, nên các thuật ngữ trong ngành ít được phổ biến rộng rãi bằng tiếng Việt, do đó ở dưới đây tôi sẽ nói về các thuật ngữ bằng tiếng Anh.</p>
<h2 id="thuật-ngữ-chung">Thuật ngữ chung</h2>
<ul>
<li><strong><em>Media</em></strong> (hay còn gọi là publisher): media bạn có thể hiểu là các trang web (vd như vnexpress), hay các mobile application (vd như flappy bird). Media là nơi có nhiều user tập trung, và cũng là nơi để đặt quảng cáo.</li>
<li><strong><em>Advertiser</em></strong>: Là những người nắm(own) quảng cáo. Advertiser bạn có thể hình dung là các doanh nghiệp muốn đưa hình ảnh của mình đến người dùng, vd như cocacola, piagio, adidas…</li>
<li><strong><em>Click</em></strong>: Là một trong những đơn vị để tính đơn giá của quảng cáo. Khi người dùng ‘click’ vào một banner quảng cáo của advertiser, advertiser sẽ phải trả tiền cho click đó (trả tiền cho ‘ai’ thì chúng ta sẽ hiểu được ở các phần tiếp theo)</li>
<li><strong><em>Impression</em></strong>: Cũng là một đơn vị để tính đơn giá của quảng cáo. 1 impression có thể hiểu đơn giản là 1 ‘view’, tức là khi 1 user ‘nhìn’ thấy một quảng cáo, advertiser sở hữu quảng cáo đó sẽ phải trả tiền.</li>
<li><strong><em>Conversion</em></strong>: Khi người dùng nhìn quảng cáo, bấm vào trang web của advertiser, mua hàng hay trở thành khách hàng của advertiser, toàn bộ quá trình đó được gọi là ‘converse’, do đó chỉ số conversion(CV) được dùng để ám chỉ độ hiệu quả của quảng cáo.</li>
<li><strong><em>Conversion Rate(CVR)</em></strong>: Là tỉ lệ converse chia cho số lượng truy cập vào website của advertiser.</li>
<li><strong><em>Click Per Cost(CPC)</em></strong>: Nhà quảng cáo phải mất bao nhiêu tiền để có được 1 click của user.</li>
<li><strong><em>Click Through Rate(CTR)</em></strong>: Là số click / số impression. Chỉ số này cho thấy ‘độ hiệu quả’ của 1 quảng cáo.</li>
<li><strong><em>Cost Per Acquisition(CPA)</em></strong>: Là số tiền tốn để ‘kiếm’ được một khách hàng thực thụ (khách hàng trả tiền hay mua hàng của advertiser).</li>
<li><strong><em>ROI(Return on Investment)</em></strong>: Đây là số tiền để đánh giá độ hiệu quả của một ‘chiến dịch’ quảng cáo. Một chiến dịch quảng cáo advertiser có thể tung ra ở rất nhiều nơi, sử dụng rất nhiều banner khác nhau. ROI là số tiền thu được sau chiến dịch quảng cáo đó / số tiền advertiser đã đầu tư và chiến dịch đó.</li>
</ul>
<h2 id="thuật-ngữ-về-hệ-thống-kĩ-thuật">Thuật ngữ về hệ thống kĩ thuật:</h2>
<ul>
<li><strong><em>Ad-Network</em></strong>: là một ‘mạng lưới’ các media (các website hay các application). Sẽ có các công ty nắm các ad-network này. Đặc điểm của các công ty đó là họ sẽ có chiến lược để ‘phân phối’ (deliver) các quảng cáo đến các media thích hợp để tăng lợi nhuận cho họ cũng như bên media.</li>
<li><strong><em>Ad-Exchange</em></strong>: Đây là một trong những bước tiến lớn để giúp quảng cáo thông minh hơn. Adexchange là một hệ thống nằm trung gian giữa Media và Advertiser, giúp ‘trao đổi’ quảng cáo giữa các advertiser. Bạn có thể hình dung Ad-Exchange giống như một sàn chứng khoán, mà những người chơi chứng khoán là các advertiser.</li>
<li><strong><em>Realtime-Bidding</em></strong>: Là hệ thống đi kèm với Ad-Exchange, giúp việc ‘trao đổi’, ‘mua bán’ quảng cáo được diễn ra tại thời gian thực. Bạn có thể hình dung có một thời điểm có một cô gái xinh đẹp vừa mua hàng của LV cách đây 2 ngày (hệ thống quảng cáo biết được việc này thông qua cookie) vào trang web X. Tại ngày thời điểm cô gái request đến X, X sẽ tung ra một món hàng là impression của cô gái này. Các advertiser của NineWest hay H&amp;M sẽ đấu giá với nhau để mua impression của cô gái (và tất nhiên là ai chịu chơi hơn sẽ thắng). Người chiến thắng sẽ được hệ thống ‘vận chuyển’ quảng cáo của mình trở lại X, và có được impression của cô gái. Hệ thống giúp đấu giá nói trên chính là RTB.</li>
<li><strong><em>DSP (Demand Side Platform)</em></strong>: Là một hệ thống được sử dụng bởi các advertisers. Bạn có thể hình dung advertiser sử dụng DSP như một hệ thống cung cấp cánh của để bước vào thế giới của Ad-network và Ad-Exchage. DSP giúp quản lý một lúc nhiều Ad-network, Ad-exchange, giúp advertiser thống nhất cùng một user ở các media khác nhau (thông qua cookie), giúp advertiser sử dụng RTB và còn rất nhiều chức năng thông minh khác.</li>
<li><strong><em>SSP (Supply Side Platform)</em></strong>: Khác với DSP ở phía ‘gần’ với advertiser hơn, SSP ở phía gần với media hơn. SSP giúp media quản lý nhiều Ad-Network, Ad-Exchange khác nhau, giúp cho media có thể tăng lợi nhuận cho mình. Mỗi khi có một user truy cập vào media, media sẽ sử dụng SSP để chọn ra quảng cáo có giá trị tiền cao nhất. Giống như DSP, SSP là cách cửa giúp media bước vào thế giới của Ad-Network, Ad-Exchange.</li>
<li><strong><em>Retargeting</em></strong>: Đây là một kĩ thuật được sử dụng rất phổ biến trong quảng cáo. Giả sử có một cô gái xinh đẹp vào trang web của LV, ngẵm nghĩa một chiếc túi xách, xong do không có tiền, cô ấy rời khỏi trang web mất :(. Vài ngày sau, cô gái vào trang tin tức Y, đột nhiên thấy quảng cáo về chiếc túi xách cô ấy mong ước, rất may cô ấy đã nhận lương. Và nhờ thế cô ấy đã click vào quảng cáo của LV, và đôi bên cùng có lợi. Kĩ thuật giúp thực hiện quá trình tren được gọi là Re-targeting.</li>
</ul>
<p>Như vậy chúng ta đã có các khái niệm hết sức cơ bản về các thuật ngữ sử dụng trong quảng cáo, để có cái nhìn đầu tiên cho các bài viết tiếp theo. Trong phần tiếp chúng ta sẽ tiếp tục nói về:</p>
<ul>
<li>Phân loại hệ thống quảng cáo</li>
<li>Kiến trúc hệ thống quảng cáo</li>
</ul>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android NDK và OpenSSL(Phần 2)]]></title>
    <link href="http://git@github.com.github.com/blog/2014/09/27/android-ndk-va-openssl-phan-2/"/>
    <updated>2014-09-27T17:31:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2014/09/27/android-ndk-va-openssl-phan-2</id>
    <content type="html"><![CDATA[<p>Ở <a href="">bài viết lần trước</a>, tôi đã nói về “hoàn cảnh” tại sao tôi lại cần sử dụng openssl trên android native, đồng thời cũng đã giới thiệu qua về cách sử dụng ndk. Ở bài viết lần này tôi sẽ nói nốt phần còn lại về cách sử dụng openssl trên android ndk. Thông qua bài viết các bạn đồng thời có thể nắm được thêm về cách sử dụng openssl nói chung, cũng như các tiện ích mà openssl mang lại.</p>
<h1 id="giới-thiệu-về-openssl">Giới thiệu về openssl</h1>
<p>OpenSSL là một bộ thư viện/tiện ích dùng trong mã hoá (cryptography) viết bằng C, open source, và được sử dụng rất rộng rãi trên rất nhiều các phần mềm. OpenSSL cung cấp hầu hết các thuật toán mã hoá nổi tiếng như AES, RSA cũng như các thuật toán hash quan trọng như MD5, SHA1.</p>
<p>Như cái tên của nó, OpenSSL được sinh ra chủ yếu để hỗ trợ cho việc truyên tin qua internet một cách bảo mật thông qua SSL (Secure Socket Layer) và TLS (Transport Layer Security), mà ví dụ rõ ràng nhất là việc sử dụng trên các browser hay là các web server để dành cho các kết nối https.</p>
<p>Tuy nhiên OpenSSL vẫn được sử dụng rộng rãi trong nhiều hoàn cảnh khác nhau, ví dụ như khi bạn chỉ cần tính giá trị SHA1 hash, hay là muốn sử dụng một số thuật toán mã hoá đối xứng như là AES hay DES cho các ứng dụng yêu cầu về tốc độ và thực hiện đơn giản.</p>
<p>Trong thực tế OpenSSL được sử dụng rất nhiều, ví dụ như trong git, để tính giá trị HMAC khi nhận message thông qua imap, git sẽ sử dụng openssl trong trường hợp máy client có cài đặt sẵn bộ thư viện openssl:</p>
<p><a href="https://github.com/git/git/blob/97b8860c071898d9e162678ea1035a8ced2f8b1f/imap-send.c#L861" class="uri">https://github.com/git/git/blob/97b8860c071898d9e162678ea1035a8ced2f8b1f/imap-send.c#L861</a></p>
<p>Như vậy chúng ta có thể hình dung openssl là bộ thư viện (có thể gọi là qui chuẩn) dành để làm các công việc liên quan đến mã hoá.</p>
<h1 id="cài-đặt-và-sử-dụng-openssl-trên-android-native">Cài đặt và sử dụng openssl trên android native</h1>
<p>OpenSSL là một bộ thư viện viết bằng C, còn android bản chất là hệ điều hành linux. Do đó việc cài đặt OpenSSL trên Android các bạn có thể hình dung tương tự như cài đặt một thư viện trên linux, cũng có make, có build, có copy file thư viện vào các đường dẫn cần thiết.</p>
<p>OpenSSL là một thư viện đồ sộ và khá phức tạp để build. Tuy nhiên rất may mắn là những người phát triển OpenSSL đã bỏ thời gian ra làm cho chúng ta một bản hướng dẫn cực kì đầy đủ để build từ source code và sử dụng trên android. Các bạn có thể tham khảo ở đường dẫn dưới đây:</p>
<p><a href="http://wiki.openssl.org/index.php/Android" class="uri">http://wiki.openssl.org/index.php/Android</a></p>
<p>Làm theo hướng dẫn trên sẽ giúp các bạn tạo ra được 2 file (libcrypto.so libssl.so) hoặc (libcrypto.a libssl.a) tuỳ theo setting lúc build. File .so và file .a là các file thư viện động và tĩnh, mà các hàm trong các thư viện đó có thể được gọi trực tiếp từ C code. Cả .so và .a file đều có thể được gọi dễ dàng chỉ bằng việc thay đổi ndk make file. Do bản chất của ndk như đã trình bày ở <a href="http://ktmt.github.io/blog/2014/08/23/android-ndk-va-openssl/">phần 1</a>, từ android OS muốn gọi được logic từ C code phải thông qua JNI interface, chúng ta có thể hình dung được qui trình để sử dụng openssl trên ndk theo từng bước như sau:</p>
<ul>
<li><ol type="1">
<li>Code Logic sử dụng openssl trên C, sử dụng JNI để “public” các hàm cần thiết sử dụng openssl ra ngoài.</li>
</ol></li>
<li><ol start="2" type="1">
<li>Sử dụng file code ở trên, build ra các file thư viện native để có thể gọi được từ java code.</li>
</ol></li>
<li><ol start="3" type="1">
<li>Gọi logic sử dụng openssl từ java code.</li>
</ol></li>
</ul>
<p>Ở dưới đây chúng ta sẽ lần lượt đi từng bước ở trên. Đầu tiên sẽ là việc quan trọng nhất là sử dụng openssl trên C ra sao.</p>
<h1 id="sử-dụng-openssl">Sử dụng openssl</h1>
<p>OpenSSL thường được sử dụng dưới dạng “utility” trên unix system, tức là bạn sẽ gọi thông qua command line, ví dụ như sau:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
</pre>
</td>
<td class="code">
<pre><code class='bash'><span class='line'>openssl sha1 -out digest.txt file.txt
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Dòng lệnh trên ở trên console sẽ được sử dụng để tính hash của nội dung file digest.txt theo thuật toán SHA1, và ghi nội dung của hash vào file file.txt.</p>
<p>Tuy nhiên bài toán của chúng ta ở đây là cần sử dụng openssl trong “code” chứ không phải thông qua command line. Việc sử dụng openssl trong code phức tạp hơn khá nhiều so với command line. Lý do là các thuật toán mã hoá đều khá phức tạp, và để sử dụng trong code thì đòi hỏi hiểu biết về thuật toán mã hoá đang sử dụng sâu hơn. Trong bài toán như tôi đã trình bày trong phần 1, chúng ta sẽ implement một thuật toán mã hoá đối xứng thông qua openssl. Do đó trước khi bắt tay vào coding, chúng ta hãy tìm hiểu sơ qua về thuật toán mã hoá đối xứng.</p>
<h2 id="sơ-qua-về-thuật-toán-mã-hoá-đối-xứng">Sơ qua về thuật toán mã hoá đối xứng</h2>
<p>Ở phần 1 đã nói sơ qua về thế nào là mã hoá đối xứng. Một cách đơn giản, thuật toán mã hoá đối xứng là khi <strong>bên gửi và bên nhân sẽ dùng cùng một key, cùng một initialize vector</strong></p>
<p><img src="http://git@github.com.github.com/images/symmetric_crypto.png"></p>
<p>Thuật toán mã hoá đối xứng chia làm 2 loại chính: <strong>block cipher</strong> và <strong>stream cipher</strong>.</p>
<ul>
<li><strong>Block cipher</strong> là chia dữ liệu ra thành nhiều block nhỏ, mỗi block có độ dài cố định (128bit, 256bit..) N, sau đó từng block sẽ được mã hoá riêng biệt. Nếu dữ liệu có độ dài không chia hết cho N, thì đoạn dữ liệu thừa ra sẽ được thêm vào một chuỗi ngẫu nhiên để cho bằng độ dài của N rồi cũng được tiến hành mã hoá.</li>
<li><strong>Stream cipher</strong> thì đơn giản hơn, đầu tiên một khoá (keystream)sẽ được tạo ra ngẫu nhiên. Sau đó dữ liệu sẽ đơn giản là được XOR với khoá đó để cho ra chuỗi mã hoá.</li>
</ul>
<p>Stream cipher thì sẽ có tốc độ nhanh hơn rất nhiều so với Block cipher, tuy nhiên vì chỉ đơn giản thực hiện phép XOR sẽ làm Stream cipher có một số thuộc tính làm nó trở nên kém an toàn hơn so với Block cipher. Do đó trong bài toán lần này chúng ta sẽ sử dụng Block cipher.</p>
<p>Block cipher có khá nhiều “mode”. Mỗi “mode” có thể hiểu là các cách thức tiến hành mã hoá khác nhau. Cơ bản thì sẽ có 4 loại mode dưới đây:</p>
<ul>
<li><strong><em>ECB (Electronic Code Book)</em></strong>: Ở mode này, 1 block của dữ liệu ban đầu (plaintext) sẽ được mã hoá thành 1 block của dữ liệu sau mã hoá (ciphertext). Mode này không tốt ở điểm dễ bị tấn công bởi dictionary attack, và là mode kém an toàn nhất</li>
<li><strong><em>CBC (Cipher Block Chaining)</em></strong> Mode này giải quyết điểm yếu dictionary attack của mode ECB thông qua việc tiến hành XOR ciphertext của block phía trước với plaintext của block tiếp theo. Việc này được tiến hành liên tiếp cho đến khi ra kết quả cuối cùng. Từ đặc điểm là việc mã hoá được tiến hành liên tiếp, chúng ta có thể thấy cần một chuỗi ngẫu nhiên để tiến hành XOR với <em>block đầu tiên</em>. Chuỗi đó được gọi là <em>initialization vector (IV)</em>.</li>
<li>CFB (Cipher Feedback) và OFB (Output Feedback) : 2 mode này dùng để biến từ block cipher thành stream cipher, do đó thường ít được sử dụng trong thực tế.</li>
</ul>
<p>Ở bài toán của chúng ta, có thể thấy rằng CBC mode là lựa chọn tốt nhất. Việc tiếp theo là lựa chọn thuật toán mã hoá.</p>
<p>Có thể kể ra một vài thuật toán mã hoá đối xứng, sử dụng BlockCipher tiêu biểu gồm có : <strong><em>AES, BlowFish, DES, TripleDES</em></strong>. Trong đó AES (Advanced Encryption Standard) là thuật toán được tạo ra gần đây, có thể sử dụng key và độ dài block lên tới 256 bit. AES được chính phủ Mĩ sử dụng làm tiêu chuẩn mã hoá, và là một thuật toán mã hoá đã được nghiên cứu rất kỹ lưỡng trong vòng 5 năm. Do vậy mà so với các thuật toán còn lại như Blowfish hay DES, AES đảm bảo được độ an toàn cao hơn. Trong lần này chúng ta sẽ sử dụng AES 256 bit, trên CBC mode.</p>
<h2 id="openssl-thông-qua-evp-interface">Openssl thông qua EVP interface</h2>
<p>Như chúng ta đã thấy ở trên, mỗi loại thuật toán mã hoá, mỗi mode đều có những con đường (routines) khác nhau để thực hiện. Do đó nếu mỗi con đường đó được thực hiện với những interface khác nhau sẽ rất khó nhớ và khó để thực hiện. Rât may mắn, OpenSSL cung cấp sẵn cho chúng ta một interface <strong>thống nhất</strong> cho một loạt các thuật toán mã hoá khác nhau, gọi là EVP. Thông qua EVP thì qui trình mã hoá trở nên rất đơn giản thông qua việc gọi lần lượt các hàm của EVP. Để tiến hành mã hoá</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre>
</td>
<td class="code">
<pre><code class='c'><span class='line'><span class="n">EVP_CIPHER_CTX_new</span>  <span class="c1">//tạo EVP context</span>
</span><span class='line'><span class="n">EVP_EncryptInit_ex</span>  <span class="c1">//Khởi tạo việc mã hoá</span>
</span><span class='line'><span class="n">EVP_EncryptUpdate</span>   <span class="c1">//Tiến hành mã hoá</span>
</span><span class='line'><span class="n">EVP_EncryptFinal_ex</span> <span class="c1">//Trong trường hợp có sử dụng padding, tức là thêm dữ liệu vào cuối plaintext cho đủ chiều dài chia hết cho độ dài block, thì bước này dùng để mã hoá &quot;nốt&quot; đoạn dữ liệu được padding đó. Bước này được dùng để kết thúc quá trình mã hoá</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Để tiến hành giải mã chúng ta cũng dùng các hàm gần tương tự, chỉ thay Encrypt bằng Decrypt</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre>
</td>
<td class="code">
<pre><code class='c'><span class='line'><span class="n">EVP_CIPHER_CTX_new</span>
</span><span class='line'><span class="n">EVP_DecryptInit_ex</span>
</span><span class='line'><span class="n">EVP_DecryptUpdate</span>
</span><span class='line'><span class="n">EVP_DecryptFinal_ex</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<h2 id="coding">Coding</h2>
<p>Sử dụng những kiến thức đã được nói ở phần trên, chúng ta đã có thể tiến hành coding. Một đoạn sample code sử dụng openssl để mã hoá đối xứng theo AES 256bit được mô tả như dưới đây. Chúng ta sẽ đặt tên file dưới đây là security.c:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
</pre>
</td>
<td class="code">
<pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;openssl/des.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;openssl/rand.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;openssl/evp.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;openssl/aes.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;openssl/err.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;openssl/bio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;openssl/buffer.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;openssl/sha.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;jni.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;android/log.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define BUFSIZE 64</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">handleErrors</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">encrypt</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">plaintext</span><span class="p">,</span> <span class="kt">int</span> <span class="n">plaintext_len</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">iv</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">ciphertext</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">EVP_CIPHER_CTX</span> <span class="o">*</span><span class="n">ctx</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ciphertext_len</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">ctx</span> <span class="o">=</span> <span class="n">EVP_CIPHER_CTX_new</span><span class="p">()))</span> <span class="n">handleErrors</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">EVP_EncryptInit_ex</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">EVP_aes_256_cbc</span><span class="p">(),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">iv</span><span class="p">))</span>
</span><span class='line'>    <span class="n">handleErrors</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">EVP_EncryptUpdate</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">,</span> <span class="n">plaintext</span><span class="p">,</span> <span class="n">plaintext_len</span><span class="p">))</span>
</span><span class='line'>    <span class="n">handleErrors</span><span class="p">();</span>
</span><span class='line'>  <span class="n">ciphertext_len</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">EVP_EncryptFinal_ex</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">ciphertext</span> <span class="o">+</span> <span class="n">len</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">))</span> <span class="n">handleErrors</span><span class="p">();</span>
</span><span class='line'>  <span class="n">ciphertext_len</span> <span class="o">+=</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Clean up */</span>
</span><span class='line'>  <span class="n">EVP_CIPHER_CTX_free</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">ciphertext_len</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">decrypt</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">ciphertext</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ciphertext_len</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">iv</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">plaintext</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">EVP_CIPHER_CTX</span> <span class="o">*</span><span class="n">ctx</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">plaintext_len</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">ctx</span> <span class="o">=</span> <span class="n">EVP_CIPHER_CTX_new</span><span class="p">()))</span> <span class="n">handleErrors</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">EVP_DecryptInit_ex</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">EVP_aes_256_cbc</span><span class="p">(),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">iv</span><span class="p">))</span>
</span><span class='line'>    <span class="n">handleErrors</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">EVP_DecryptUpdate</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">plaintext</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">,</span> <span class="n">ciphertext_len</span><span class="p">))</span>
</span><span class='line'>    <span class="n">handleErrors</span><span class="p">();</span>
</span><span class='line'>  <span class="n">plaintext_len</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">EVP_DecryptFinal_ex</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">plaintext</span> <span class="o">+</span> <span class="n">len</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">))</span> <span class="n">handleErrors</span><span class="p">();</span>
</span><span class='line'>  <span class="n">plaintext_len</span> <span class="o">+=</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Clean up */</span>
</span><span class='line'>  <span class="n">EVP_CIPHER_CTX_free</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">plaintext_len</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="nf">base64</span><span class="p">(</span><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">input</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">BIO</span> <span class="o">*</span><span class="n">bmem</span><span class="p">,</span> <span class="o">*</span><span class="n">b64</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BUF_MEM</span> <span class="o">*</span><span class="n">bptr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">b64</span> <span class="o">=</span> <span class="n">BIO_new</span><span class="p">(</span><span class="n">BIO_f_base64</span><span class="p">());</span>
</span><span class='line'>  <span class="n">bmem</span> <span class="o">=</span> <span class="n">BIO_new</span><span class="p">(</span><span class="n">BIO_s_mem</span><span class="p">());</span>
</span><span class='line'>  <span class="n">b64</span> <span class="o">=</span> <span class="n">BIO_push</span><span class="p">(</span><span class="n">b64</span><span class="p">,</span> <span class="n">bmem</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BIO_write</span><span class="p">(</span><span class="n">b64</span><span class="p">,</span> <span class="n">input</span><span class="p">,</span> <span class="n">length</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BIO_flush</span><span class="p">(</span><span class="n">b64</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BIO_get_mem_ptr</span><span class="p">(</span><span class="n">b64</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">bptr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">buff</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">bptr</span><span class="o">-&gt;</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">buff</span><span class="p">,</span> <span class="n">bptr</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">bptr</span><span class="o">-&gt;</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">buff</span><span class="p">[</span><span class="n">bptr</span><span class="o">-&gt;</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">BIO_free_all</span><span class="p">(</span><span class="n">b64</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">buff</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">jstring</span> <span class="nf">Java_jp_co_common_android_libs_CryptUtils_stringFromJNI</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">thiz</span><span class="p">,</span> <span class="n">jstring</span> <span class="n">uuid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">plaintext</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">uuid</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">ciphertext</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">key</span> <span class="o">=</span> <span class="s">&quot;11111111111111111111111111111111&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">iv</span> <span class="o">=</span> <span class="s">&quot;2222222222222222&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ciphertext_len</span> <span class="o">=</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">plaintext</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">plaintext</span><span class="p">),</span> <span class="n">key</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">);</span>
</span><span class='line'>    <span class="n">__android_log_print</span><span class="p">(</span><span class="n">ANDROID_LOG_INFO</span><span class="p">,</span> <span class="s">&quot;kimisaki&quot;</span><span class="p">,</span> <span class="s">&quot;ndk: %s&quot;</span><span class="p">,</span> <span class="n">base64</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span> <span class="n">ciphertext_len</span><span class="p">));</span>
</span><span class='line'>    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">uuid</span><span class="p">,</span> <span class="n">plaintext</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">base64</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span> <span class="n">ciphertext_len</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Ngoài việc sử dụng các kiến thức đã nói ở trên, chúng ta có thể chú ý thấy một số điểm đặc biệt ở đoạn code trên:</p>
<ul>
<li>Chúng ta phải include đầy đủ các file header cần thiết của openssl như <openssl/evp.h>..</li>
<li>Có thể để ý thấy việc sử dụng Base64 để encode dữ liệu trả về phía android. Lý do là sau khi mã hoá thì plaintext ban đầu sẽ trở thành 1 chuỗi bit vô nghĩa, và việc encode thành Base64 sẽ giúp dữ liệu dễ để truyền qua lại hơn, và cũng dễ debug hơn. Cách sử dụng base64 qua BIO interface các bạn có thể tìm hiểu thông qua trang chủ của openssl.</li>
<li>Việc chọn <strong>độ dài cho key và IV là vô cùng quan trọng</strong>. Chọn sai độ dài cho key và IV sẽ dẫn đến các kết quả mã hoá không lường trước được và sẽ gây ra việc giải mã ra kết quả sai. Với AES 256 thì key sẽ có độ dài là 32 bytes, còn iv phải có độ dài là 16 bytes.</li>
</ul>
<h1 id="kết-hợp-với-android">Kết hợp với android</h1>
<p>Như vậy là chúng ta đã tiến hành xong công đoạn coding. Công đoạn tiếp theo không kém phần quan trọng là việc phải build được đoạn code đó thành thư viện native để sử dụng trên android OS. Để làm được việc đó chúng ta cần làm:</p>
<ul>
<li>Tổ chức cấu trúc folder sao cho hợp lý.</li>
<li>Viết make file</li>
<li>Build</li>
</ul>
<p>Cấu trúc folder theo như bài viết lần đầu, chúng ta sẽ tạo 1 folder jni ở project$ROOT. Trong đó sẽ được sắp xếp như sau</p>
<p><img src="http://git@github.com.github.com/images/openssl_folder_structure.png"></p>
<p>Chúng ta có thể thấy điểm đặc biêt ở đây là thư mục libprebuilt sẽ chứa các file .so của openssl được build <strong>cho từng platform</strong> khác nhau. Hiện tại android có thể chạy trên ARM(armeabi), Intel(x86) và MIPS. Do việc build ra thư viện .so từng platform khác nhau có thể gặp khá nhiều khó khăn nên chúng ta có thể làm theo 1 cách đơn giản hơn, đó là kiếm các file .so “có sẵn” của từng platform và copy vào đây, thay vì phải build tử source. Các file này có thể kiếm được dễ dàng từ bản phân phối của các image của android OS.</p>
<p>Một điểm nữa cần lưu ý là chúng ta cần copy các file header cần sử dụng của openssl vào trong thư mục dự án thì mới include được.</p>
<p>2 file make để build native source sẽ có nội dung như sau</p>
<ul>
<li>Android.mk
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre>
</td>
<td class="code">
<pre><code class='c'><span class='line'><span class="n">AL_PATH</span> <span class="o">:=</span> <span class="err">$</span><span class="p">(</span><span class="n">call</span> <span class="n">my</span><span class="o">-</span><span class="n">dir</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># Prebuilt libssl</span>
</span><span class='line'><span class="n">include</span> <span class="err">$</span><span class="p">(</span><span class="n">CLEAR_VARS</span><span class="p">)</span>
</span><span class='line'><span class="n">LOCAL_MODULE</span> <span class="o">:=</span> <span class="n">ssl</span>
</span><span class='line'><span class="n">LOCAL_SRC_FILES</span> <span class="o">:=</span> <span class="n">libprebuilt</span><span class="o">/</span><span class="err">$</span><span class="p">(</span><span class="n">TARGET_ARCH_ABI</span><span class="p">)</span><span class="o">/</span><span class="n">libssl</span><span class="p">.</span><span class="n">so</span>
</span><span class='line'><span class="n">include</span> <span class="err">$</span><span class="p">(</span><span class="n">PREBUILT_SHARED_LIBRARY</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># Prebuilt libcrypto</span>
</span><span class='line'><span class="n">include</span> <span class="err">$</span><span class="p">(</span><span class="n">CLEAR_VARS</span><span class="p">)</span>
</span><span class='line'><span class="n">LOCAL_MODULE</span> <span class="o">:=</span> <span class="n">crypto</span>
</span><span class='line'><span class="n">LOCAL_SRC_FILES</span> <span class="o">:=</span> <span class="n">libprebuilt</span><span class="o">/</span><span class="err">$</span><span class="p">(</span><span class="n">TARGET_ARCH_ABI</span><span class="p">)</span><span class="o">/</span><span class="n">libcrypto</span><span class="p">.</span><span class="n">so</span>
</span><span class='line'><span class="n">include</span> <span class="err">$</span><span class="p">(</span><span class="n">PREBUILT_SHARED_LIBRARY</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">include</span> <span class="err">$</span><span class="p">(</span><span class="n">CLEAR_VARS</span><span class="p">)</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div></li>
<li>Application.mk
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
</pre>
</td>
<td class="code">
<pre><code class='c'><span class='line'><span class="n">APP_ABI</span> <span class="o">:=</span> <span class="n">all</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div></li>
</ul>
<p>Chúng ta có thể chú ý thấy điểm đặc biệt ở Android.mk. Trong make file này chúng ta sẽ thấy việc chỉ định các biến build PREBUILT_SHARED_LIBRARY, LOCAL_SRC_FILE, LOCAL_MODULE để hệ thống build của ndk có thể nhận đưọc sự tồn tại của các file .so và copy vào các folder cần thiết để gọi được sau trên java code.</p>
<p>Để tiến hành build thì chúng ta chỉ cần vào thư mục dự án và gõ</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
</pre>
</td>
<td class="code">
<pre><code class='c'><span class='line'><span class="n">ndk</span><span class="o">-</span><span class="n">build</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Sau khi tiến hành build thì trong thư mục /libs sẽ có các thư mục tương ứng với các platform được tạo ra, và các file .so cần thiết sẽ được copy vào trong đó. File security.c ở trên sẽ được build thành các file security.so tương ứng.</p>
<p>Tiếp theo chỉ còn là vấn đè sử dụng các file .so trên java code:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre>
</td>
<td class="code">
<pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">native</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">stringFromJNI</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">&quot;ssl&quot;</span><span class="o">);</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">&quot;crypto&quot;</span><span class="o">);</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">&quot;security&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Chỉ với các chỉ định như trên thì chúng ta đã có thể sử dụng được hàm stringFromJNI được code trong security.c. Khi truyền vào 1 chuỗi bất kỳ, thì chúng ta sẽ nhận được kết quả mã hoá của chuỗi đó theo AES 256bit, với key và iv được qui định trong security.c. Vậy là bài toán của chúng ta đã được giải quyết :D.</p>
<h1 id="kết-luận">Kết luận</h1>
<p>Qua hai bài viết tương đối đầy đủ, hy vong các bạn đã nắm được:</p>
<ul>
<li>Cách cài đặt, sử dụng và bản chất của android ndk</li>
<li>Sơ qua về mã hoá đối xứng</li>
<li>Sơ qua về OpenSSL, cách sử dụng trực tiếp trên C code và cách để intergrate với android ndk</li>
</ul>
<p>Tham khảo:</p>
<ul>
<li><a href="http://www.amazon.com/Network-Security-OpenSSL-Cryptography-Communications-ebook/dp/B0028N4W3I/ref=sr_1_2?ie=UTF8&amp;qid=1412616205&amp;sr=8-2&amp;keywords=openssl" class="uri">http://www.amazon.com/Network-Security-OpenSSL-Cryptography-Communications-ebook/dp/B0028N4W3I/ref=sr_1_2?ie=UTF8&amp;qid=1412616205&amp;sr=8-2&amp;keywords=openssl</a></li>
</ul>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xử lý ảnh bằng Python và OpenCV: Mở đầu]]></title>
    <link href="http://git@github.com.github.com/blog/2014/09/23/xu-ly-anh-bang-python-va-opencv-mo-dau/"/>
    <updated>2014-09-23T19:04:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2014/09/23/xu-ly-anh-bang-python-va-opencv-mo-dau</id>
    <content type="html"><![CDATA[<p>Do công việc, tôi đã có một thời gian tìm hiểu về OpenCV để xử lý ảnh và video. Phần lớn các tác vụ tôi thực hiện là code OpenCV trên C++ và giao tiếp với Android qua JNI. Và rồi tôi nhận ra mình chỉ làm theo những tutorial có sẵn trên mạng và mất nhiều thời gian hơn mức cần thiết để fix bug của compiler hoặc IDE. Bản thân tôi rất có hứng thú với Computer Vision và Image Processing nói chung, nhưng cách tiếp cận như trên có vẻ như quá chậm. Sẽ tốt hơn nếu có thể tập trung nắm được những khái niệm cơ bản cùa Computer Vision trước, không bị sa đà vào việc fix bug. Bản thân việc nhanh chóng tạo ra những ứng dụng hữu ích là một động lực không nhỏ đối với việc tiếp tục học Computer Vision and Image Processing.</p>
<p>Đó là lý do tôi chuyển sang lập trình OpenCV với Python. Việc cài đặt, viết code, thử nghiệm đều trở nên đơn giản hơn rất nhiều.</p>
<p>Thêm một lý do nữa, phải nói là Computer Vision và Image Processing là những lĩnh vực khó nếu xét về khía cạnh nghiên cứu, với rất nhiều công thức toán. Tôi không nói những công thức toán đó là không cần thiết, mà là đối với người bắt đầu học, sẽ tốt hơn nếu nhanh chóng nắm được tất cả những kĩ thuật cơ bản và bắt đầu áp dụng xây dựng ứng dụng hữu ích cho mình. Sau đó, tuỳ theo nhu cầu và sở thích, có thể tiếp tục đào sâu nghiên cứu, tối ưu, chạy thời gian thực… Kể cả lúc đó, khi đã có kiến thức cơ bản rồi, việc tiếp cận sẽ càng nhanh hơn.</p>
<p>Xin lỗi vì phần giới thiệu hơi dài dòng :P Tôi xin bắt đầu luôn. Trong bài đầu tiên này, tôi sẽ trình bày cách cài đặt môi trường và một số tác vụ cơ bản khi làm việc với OpenCV trên Python. Bài viết này có thể sẽ khá cơ bản với một số độc giả, nhưng vì là bài đầu tiên trong loạt bài này, tôi vấn muốn trình bày để đảm bảo sự đầy đủ. Trong các bài sau, chúng ta sẽ cùng xây dựng những ứng dụng thú vị hơn.</p>
<h1 id="cài-đặt-môi-trường">Cài đặt môi trường</h1>
<p>Có những thành phần sau cần phải cài đặt để làm việc với OpenCV trên : * Python 2.7 * NumPy và SciPy: Bằng cách sử dụng NumPy, chúng ta có thể biểu thị hình ảnh bằng mảng đa chiều. Ngoài ra, có rất nhiều thư viện xử lý ảnh và cả machine learning sử dụng cách biểu thị mảng của NumPy. NumPy cũng hỗ trợ rất nhiều hàm toán học chúng ta có thể thực hiện nhiều phân tích có ý nghĩa hơn trên ảnh. Bên cạnh NumPy còn có SciPy đi kèm, hỗ trợ thêm về các tính toán khoa học.</p>
<p>Trên Windows, cách dễ nhất để có cả Python, NumPy và SciPy là cài đặt Enthought Canopy tại <a href="https://www.enthought.com/products/canopy/" class="uri">https://www.enthought.com/products/canopy/</a></p>
<p>Trên Mac từ 10.7 trở lên, NumPy và SciPy đã được cài đặt sẵn. * Matplotlib: là thư viện để plot. Khi xử lý ảnh, chúng ta sẽ sử dụng thư viện này để xem histogram của ảnh hoặc xem chính ảnh đó. * OpenCV: Về hướng dẫn cài đặt chi tiết, bạn có thể xem tại <a href="http://docs.opencv.org/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html">đây</a></p>
<h1 id="mở-và-lưu-file-ảnh">Mở và lưu file ảnh</h1>
<p>Hãy bắt đầu bằng tác vụ đơn giản nhất: mở một file ảnh thành một mảng NumPy, đọc các thông tin về kích cỡ, sau đó lưu mảng NumPy thành một file ảnh mới.</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>getinfo.py </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre>
</td>
<td class="code">
<pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">argparse</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">cv2</span>
</span><span class='line'>
</span><span class='line'><span class="n">ap</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
</span><span class='line'><span class="n">ap</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&quot;-i&quot;</span><span class="p">,</span> <span class="s">&quot;--image&quot;</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
</span><span class='line'>                <span class="n">help</span> <span class="o">=</span> <span class="s">&quot;Path to the image&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">args</span> <span class="o">=</span> <span class="nb">vars</span><span class="p">(</span><span class="n">ap</span><span class="o">.</span><span class="n">parse_args</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="n">image</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="s">&quot;image&quot;</span><span class="p">])</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;width: </span><span class="si">%d</span><span class="s"> pixels&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;height: </span><span class="si">%d</span><span class="s"> pixels&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;channels: </span><span class="si">%d</span><span class="s"> channels&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">&quot;Image&quot;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span><span class='line'><span class="n">cv2</span><span class="o">.</span><span class="n">imwrite</span><span class="p">(</span><span class="s">&quot;new.jpg&quot;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span><span class='line'><span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Đầu tiên, chúng ta import hai package cần thiết là <code>argparse</code> và <code>cv2</code>. <code>argparse</code> dùng để khai báo những parameter cần thiết cho chương trình của chúng ta, ở đây, chúng ta khai báo parameter là đường dẫn đến file ảnh ban đầu. Để đọc file ảnh thành một mảng NumPy, chúng ta sử dụng hàm <code>cv2.imread()</code> với parameter là tên file ảnh (đã được nhập vào từ command line). Sau bước này, ta nhận được một mảng NumPy là <code>image</code>. Tiếp theo ta in ra các thông số về file ảnh, gồm có chiều dài, chiều rộng và số channel. Ở đây, chúng ta có những điểm lưu ý về cách NumPy lưu các thông số về bức ảnh: * Một bưc ảnh có 2 chiều X và Y, gốc toạ độ tại pixel trên cùng bên trái của bức ảnh. Chiều X từ trái sang phải và chiều Y từ trên xuống dưới. NumPy lưu số pixel hơi ngược: <code>image.shape[0]</code> là số pixel theo chiều Y và <code>image.shape[1]</code> là số pixel theo chiều X. * Mỗi pixel trên bức ảnh được biểu thị dưới một trong 2 dạng: grayscale hoặc color. <code>image.shape[2]</code> lưu số channel biểu thị mỗi pixel. Với ảnh màu hiển thị trên RGB, số channel là 3, còn với ảnh đen trắng (grayscale), chúng ta chỉ có 1 channel duy nhất</p>
<p>Để hiển thị bức ảnh trên một window mới, ta sử dụng hàm <code>cv2.imshow()</code>, với 2 đối số là tên của window và tên của mảng NumPy muốn hiển thị.</p>
<p>Để lưu mảng NumPy thành một file ảnh mới, ta sử dụng hàm <code>cv2.imwrite()</code>, với 2 đối số là tên của file muốn lưu và tên của mảng NumPy. Trong ví dụ này, chúng ta lưu file mới giống hệt file cũ mà không có chỉnh sửa gì.</p>
Chạy đoạn code trên như sau:
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
</pre>
</td>
<td class="code">
<pre><code class=''><span class='line'>% python getinfo.py -i obama_fun.jpg</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Ảnh gốc:</p>
<img src="http://git@github.com.github.com/images/pythonopencv/original.gif"> Kết quả trả về
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre>
</td>
<td class="code">
<pre><code class=''><span class='line'>width: 475 pixels
</span><span class='line'>height: 356 pixels
</span><span class='line'>channels: 3 channels</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<h2 id="tạo-ảnh-avatar-bằng-kĩ-thuật-mask">Tạo ảnh avatar bằng kĩ thuật mask</h2>
<p>Trong phần này, chúng ta sẽ tạo ra ảnh avatar từ một bức hình chân dung ban đầu, theo dạng như avatar picture của Google+: hình tròn bao quanh khuôn mặt. Đoạn code như sau:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>create_avatar_circle.py </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre>
</td>
<td class="code">
<pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">argparse</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">cv2</span>
</span><span class='line'>
</span><span class='line'><span class="n">ap</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
</span><span class='line'><span class="n">ap</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&quot;-i&quot;</span><span class="p">,</span> <span class="s">&quot;--image&quot;</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
</span><span class='line'>                <span class="n">help</span> <span class="o">=</span> <span class="s">&quot;Path to the image&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">args</span> <span class="o">=</span> <span class="nb">vars</span><span class="p">(</span><span class="n">ap</span><span class="o">.</span><span class="n">parse_args</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="n">image</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="s">&quot;image&quot;</span><span class="p">])</span>
</span><span class='line'><span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">&quot;Original&quot;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">cX</span><span class="p">,</span> <span class="n">cY</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">/</span> <span class="mi">2</span> <span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">radius</span> <span class="o">=</span> <span class="mi">120</span>
</span><span class='line'><span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">shape</span><span class="p">[:</span><span class="mi">2</span><span class="p">],</span> <span class="n">dtype</span> <span class="o">=</span> <span class="s">&quot;uint8&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">cv2</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">mask</span><span class="p">,</span> <span class="p">(</span><span class="n">cX</span><span class="p">,</span> <span class="n">cY</span><span class="p">),</span> <span class="n">radius</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">masked</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">bitwise_and</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">image</span><span class="p">,</span> <span class="n">mask</span> <span class="o">=</span> <span class="n">mask</span><span class="p">)</span>
</span><span class='line'><span class="n">avatar</span> <span class="o">=</span> <span class="n">masked</span><span class="p">[</span> <span class="n">cY</span> <span class="o">-</span> <span class="n">radius</span> <span class="p">:</span> <span class="n">cY</span> <span class="o">+</span> <span class="n">radius</span><span class="p">,</span> <span class="n">cX</span> <span class="o">-</span> <span class="n">radius</span> <span class="p">:</span> <span class="n">cX</span> <span class="o">+</span> <span class="n">radius</span><span class="p">]</span>
</span><span class='line'><span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">&quot;Mask&quot;</span><span class="p">,</span> <span class="n">mask</span><span class="p">)</span>
</span><span class='line'><span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">&quot;Avatar&quot;</span><span class="p">,</span> <span class="n">avatar</span><span class="p">)</span>
</span><span class='line'><span class="n">cv2</span><span class="o">.</span><span class="n">imwrite</span><span class="p">(</span><span class="s">&quot;avatar.jpg&quot;</span><span class="p">,</span> <span class="n">avatar</span><span class="p">)</span>
</span><span class='line'><span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Đoạn code bắt đầu với các thủ tục như import packages cần thiết, khai báo các parameters đầu vào cho script, đọc file ảnh vào mảng NumPy như phần trên.</p>
<p>Để crop một phần bức ảnh, chúng ta cần tạo ra một mặt nạ <code>mask</code>, là một mảng có kích thước như bức ảnh với tất cả giá trị pixel được khởi tạo bằng 0. Tiếp đó, ta vẽ một hình tròn trắng trên mảng ‘mask’ . Sau đó, sử dụng <code>bitwise_and()</code> hai mảng <code>image</code> với nhau, có thêm tham số mặt nạ <code>mask</code>, ta được một bức ảnh <code>masked</code> chỉ có phần khuôn mặt. Tiếp tục crop bằng cách slice mảng NumPy, chúng ta được kết quả cuối cùng là bức ảnh <code>avatar</code>.</p>
Chạy đoạn code trên như sau:
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
</pre>
</td>
<td class="code">
<pre><code class=''><span class='line'>% python create_avatar_circle.py -i obama_fun.jpg</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Kết quả:</p>
<ul>
<li>Bức ảnh ban đầu</li>
</ul>
<p><img src="http://git@github.com.github.com/images/pythonopencv/original.gif"></p>
<ul>
<li><code>mask</code></li>
</ul>
<p><img src="http://git@github.com.github.com/images/pythonopencv/mask.gif"></p>
<ul>
<li><code>avatar</code></li>
</ul>
<p><img src="http://git@github.com.github.com/images/pythonopencv/avatar.gif"></p>
<p>Tất nhiên, tôi đã sử dụng file ảnh có mặt tổng thống Obama ở ngay giữa tấm ảnh và mask được đặt ở chính giữa tâm bức ảnh. Không phải mọi tấm ảnh đều như vậy; trong trường hợp đó chúng ta sẽ sử dụng kĩ thuật face detection. Nhưng đó là chủ đề của một bài viết sau.</p>
<h2 id="kết-luận">Kết luận</h2>
<p>Qua bài viết này, tôi đã giới thiệu những bước bắt đầu để làm việc với OpenCV qua Python. Bài viết khá cơ bản, nhưng đã trình bày một số khái niệm cơ bản để chuẩn bị cho những ứng dụng lần sau. Hẹn gặp lại các bạn trong các phần tiếp theo.</p>
<h1 id="tài-liệu-tham-khảo">Tài liệu tham khảo</h1>
<ol type="1">
<li><a href="http://opencv-python-tutroals.readthedocs.org/en/latest/index.html">OpenCV-Python Tutorials</a></li>
</ol>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tổng kết bản điều tra về thói quen programmer của blog ktmt]]></title>
    <link href="http://git@github.com.github.com/blog/2014/09/08/tong-ket-ban-dieu-tra-ve-thoi-quen-programmer-cua-blog-ktmt/"/>
    <updated>2014-09-08T22:14:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2014/09/08/tong-ket-ban-dieu-tra-ve-thoi-quen-programmer-cua-blog-ktmt</id>
    <content type="html"><![CDATA[<p>Thời gian vừa rồi blog ktmt có tạo một bản điều tra về các thói quen của lập trình viên ở Việt Nam nói chung. Bản điều tra nằm ở đường link:</p>
<p><a href="https://ktmt.typeform.com/to/WzOLiB" class="uri">https://ktmt.typeform.com/to/WzOLiB</a></p>
<p>Những bạn nào vẫn chưa làm mà có hứng thú làm thì nhóm bọn mình vẫn hết sức welcome.</p>
<p>Bản điều tra có mục đích chính là để tìm hiểu thực trạng và thói quen của các lập trình viên Việt Nam, qua đó điều chỉnh các bài viết của blog sao cho có ích với càng nhiều người càng tốt.Ở bài viết này mình sẽ tổng kết về một số con số mà mình cảm thấy thú vị, hy vọng có ích với mọi người.</p>
<p>Đầu tiên là tính đến thời điểm viết bài này, bản điều tra nhận được 256 câu trả lời trên tổng số 416 lượt visits (tỉ lệ là cứ 5 người xem thì 3 người trả lời). Thời gian trả lời trung bình mất tầm 4 phút, và tỉ lệ hoàn thành 100% bản điều tra là 62% (Tuy nhiên phần lớn các câu hỏi đều có tỉ lệ trả lời tiệm cận 99%, thế nên con số 62% này không có giá trị lắm)</p>
<p><img src="http://git@github.com.github.com/images/ktmt-survey/ktmt-survey1.png"></p>
<p>Sau đây là một số kết quả thú vị, mình sẽ đi lần lượt các câu hỏi từ trên xuống:</p>
<ul>
<li><ol type="1">
<li>Câu hỏi số năm kinh nghiệm: Các lập trình viên của Việt Nam đều khá trẻ, chủ yếu từ 1-3 năm kinh nghiệm. Các dải kinh nghiệm còn lại trải đều và giảm dần theo số năm.</li>
</ol></li>
<li><ol start="2" type="1">
<li>Câu hỏi về ngôn ngữ lập trình thành thạo: Câu hỏi này có kết quả không ngạc nhiên khi kết quả trải rất đều ở tất cả các ngôn ngữ. Đứng đầu là 3 ngôn ngữ có thể coi là “main stream” nhất là Java, C, C++. Lý do theo cá nhân mình là 3 ngôn ngữ này được dạy nhiều nhất trong đại học Việt Nam. Tiếp đến là các ngôn ngữ để làm web gồm có PHP/Javascript/Ruby/Python.Một số bạn cũng đã tìm hiểu và nắm vững được các ngôn ngữ mới như Scala hay Haskell, rất đáng hoan ngênh.</li>
</ol></li>
<li><ol start="3" type="1">
<li>Câu hỏi về nền tảng đã từng lập trình không có gì bất ngờ khi đi đầu là Windows, tiếp đến là Web và mobile(Android/iOS)</li>
</ol></li>
<li><ol start="4" type="1">
<li>Câu hỏi về IDE: Các lập trình viên Việt Nam khá ưa chuộng sublime text, có lẽ do tính thân thiện của Editor này. Theo sau đó là Eclipse/Vim. Visual Studio về đích với vị trí thứ 4, phải chăng lập trình trên nền dotnet đã không còn là xu hướng.</li>
</ol></li>
<li><ol start="5" type="1">
<li>Câu hỏi về lĩnh vực yêu thích: Lĩnh vực được quan tâm nhất là Web, theo sau đó mới là mobile. Ngoài ra có một số không nhỏ các bạn quan tâm đến bảo mật hay data mining, rất thú vị.</li>
</ol></li>
<li><ol start="6" type="1">
<li>Có 81% các bạn ngoài công việc/trường lớp có làm các project cá nhân. Đây quả thật đây là một con số đáng khích lệ vô cùng.</li>
</ol></li>
<li><ol start="7" type="1">
<li>Github không có gì lạ chính là dịch vụ quản lý source code được yêu thích nhất(47%). Tuy nhiên có tới 25% các bạn quản lý source code chỉ trên máy cá nhân, mà việc này khá nguy hiểm khi máy tính hỏng hóc.</li>
</ol></li>
<li><ol start="8" type="1">
<li>Có 50% các bạn đã từng đặt câu hỏi trên Stackoverflow và 50% chưa từng. Có lẽ ngôn ngữ chính là rào cản lớn nhất của việc này.</li>
</ol></li>
<li><ol start="9" type="1">
<li>Ngược lại với kết quả ở &lt;8&gt;, có tới 85% câu trả lời cho các vấn đề lập trình được các bạn tìm thấy trên Stackoverflow. Có lẽ Stackoverflow chỉ được coi là một cái “kho” để tìm kiếm chứ vẫn chưa được coi là một “diễn đàn” để mọi người đóng góp ý kiến hay trả lời giúp người khác.</li>
</ol></li>
<li><p>10/11. 50% số bạn trả lời sau khi tìm được câu trả lời cho điều mình tìm kiếm thì không lưu lại, có lẽ mọi người cho rằng tìm được kết quả là được, không quan tâm lắm đến việc lần sau gặp lại lỗi đấy thì sẽ phải mất công tìm lại lần nữa.</p></li>
<li><ol start="12" type="1">
<li>70% các bạn trả lời là có viết blog kĩ thuật cá nhân! Đây đúng là một con số rất đáng mừng.</li>
</ol></li>
<li><ol start="13" type="1">
<li>Trong những bạn có viết blog thì 40% là để memo lại các lỗi đã gặp, còn lại là các đoạn code yêu thích hoặc nội dung khác.</li>
</ol></li>
<li><ol start="14" type="1">
<li>Có tới 61% các bạn ngại viết blog vì: “Cảm thấy năng lực chưa đủ”. Đây có lẽ là một lý do rất đáng e ngại, bởi vì mọi mọi người vẫn còn “sợ” bị người khác nhìn vào và chê kém.</li>
</ol></li>
</ul>
<p>Trên đây là một số con số mình thấy khá thú vị và đã tổng kết lại. Rất cám ơn mọi người đã làm bản điều tra giúp bọn mình! Hy vọng mọi người tiếp tục ủng hộ blog trong thời gian tới!!!!</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android ndk và openssl (phần 1)]]></title>
    <link href="http://git@github.com.github.com/blog/2014/08/23/android-ndk-va-openssl/"/>
    <updated>2014-08-23T21:35:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2014/08/23/android-ndk-va-openssl</id>
    <content type="html"><![CDATA[<h1 id="mở-đầu">1. Mở đầu</h1>
<p>Gần đây ở công ty tôi có được giao một task khá hay. Công ty tôi có một game viết trên nền tảng android. Game đó viết bằng anđroid, tuy nhiên lại chủ yếu dùng web view để hiển thị. Mặc dù vậy, một số logic như là set session cho user, authenticate cho user thì lại nằm trên android.</p>
<p>Chắc các bạn cũng đã biết, android app được viết bằng java, dịch ra file dex, sau đó được phân phối trên google playstore dưới dạng file apk. Do đó, android app có một điểm yếu cố hữu mà mọi java app đều mắc phải, đó là bảo mật. Điểm yếu bảo mật ở đây là gì? Đó là việc mà mọi java app đều có thể được phân tích ngược (reverse engineer) rất dễ dàng. Việc này bắt nguồn từ bản chất java được dịch ra bytecode ở dạng khá “gần” với ngôn ngữ lập trình thông thường, và bytecode chứa đầy đủ các thông tin cần thiết để bạn có thể dịch lại nguyên vẹn lại chương trình gốc.</p>
<p>Vậy cái điểm yếu bảo mật này liên quan đến cái app tôi đang phụ trách thế nào? Như tôi vừa nói ở trên, trong cái game mà tôi đang phụ trách, logic authenticate cho user sẽ nằm trên phía android. Điều này có nghĩa là trên android app sẽ phụ trách:</p>
<ul>
<li>Mã hoá uuid của người dùng, gửi lên server</li>
<li>Server sẽ nhận uuid đó, và gửi session key về cho user để user set vào cookie.</li>
</ul>
<p>Chắc hẳn sẽ có bạn thắc mắc là qui trình xác thực này quá đơn giản. Đúng vậy, quy trình này quá đơn giản, dẫn đến là việc chỉ cần user A (người xấu) biết uuid của user B (người bị hại) thì A sẽ giả mạo được bất cứ hành động của B như là gửi đồ từ B cho A.</p>
<p>Vậy tại sao không làm một qui trình xác thực tốt hơn, như dùng thêm một token giống như onetime password mà chỉ user đó mới biết được, hay là làm cách nào để “giấu” uuid đi để cho user khác không biết. Đúng là nên như thế! Tuy nhiên vì một số lý do “lịch sử” của legacy code, mà chúng ta không thể thay đổi qui trình xác thực một cách dễ dàng như thế được.</p>
<p>Như vậy thì với flow code hiện tại thì với điểm yếu của android tôi đã nói ở trên thì một người có chút kiến thức lập trình có thể dễ dàng dịch ngược đoạn logic dùng để xác thực mà tôi đã nói ở trên. Mà trong đó có việc <code>mã hoá uuid người dùng</code> mà khi bạn nhìn được logic code thì mã hoá cũng bằng thừa. Lý do tại sao lại bằng thừa vì code hiện tại đang sử dụng “Symmetric Cryptography Algorithm”. Symmetric ở đây có nghĩa là thuật toán mã hoá đối xứng, mà điển hình gồm có những thuật toán như blowfish, AES, DES.</p>
<p>Nói một cách đơn giản thì các loại thuật toán symmetric thì <strong>bên gửi và bên nhận sẽ dùng cùng một key, cùng một intitialize vector</strong> (Các khái niệm này tôi sẽ trình bày kĩ hơn ở phần sau) , do đó chỉ cần dịch ngược được code thì user A (người xấu) sẽ có được key và initialize vector để tạo ra một request hợp lệ sử dụng uuid của user B.</p>
<p>Vậy thì chúng ta phải giải quyết vấn đề này thế nào? Sau một hồi thảo luận với công ty thì tôi nghĩ ra một giải pháp “chữa cháy” tạm thời, đấy là chuyển logic vào native code sử dụng ndk và C, mục đích để đạt được là:</p>
<blockquote>
<p>“Giấu” đi logic mã hoá uuid người dùng, giấu cả các tham số ban đầu như key và initialize vector. Do đó mà user A sẽ không biết làm cách nào để tạo ra một request hợp lệ với uuid của user B.</p>
</blockquote>
<p>Cách giải quyết này tại sao tôi nói là tạm thời, bởi vì user A nếu có thêm một chút hiểu biết về ndk thì sẽ biết được interface cung cấp ở ndk code sẽ được public ra ngoài, do đó thì vẫn có thể tận dụng được điểm này để tạo ra một request hợp lệ. Tuy nhiên do không nghĩ ra giải pháp khác nên tạm thời dùng cách này sẽ hạn chế được các hacker “gà mờ”.</p>
<p>Vậy để đi theo hướng đi này chúng ta cần phải tìm hiểu về 2 thứ đó là : <strong>Android NDK</strong> và cách để sử dụng các thuật toán mã hoá trên ndk (ở đây là sử dụng ngôn ngữ C), đó là <strong>openssl</strong>. Phần giới thiệu hơi dài dòng, nhưng đến đây các bạn đã nắm được tại sao tiêu đề bài viết lại là Android NDK và open SSL.</p>
<p>Dưới đây chúng ta sẽ đi lần lượt về 2 vấn đề cần giải quyết : Android NDK và OpenSSL</p>
<h1 id="android-ndk">2. Android NDK</h1>
<p>Android NDK là một kit phát triển giúp bạn có thể phát triển các phần mềm android mà dựa một phần trên các đoạn code viết trên C hoặc C++. Bạn sẽ cần đến NDK trong các sản phầm cần đến hiệu năng cao, mà khi đó các đoạn code được build ra binary sẽ phát huy hiệu năng tối đa. Các logic code được thực hiện trên ndk ở dứoi đây tôi sẽ gọi chung là native code.</p>
<p>Về cơ chế hoạt động của ndk, bạn có thể hiểu một cách đơn giản như trong hình vẽ dưới đây, app của bạn sẽ tiến hành giao tiếp với native code thông qua một interface gọi là JNI.</p>
<p>Một cách đơn giản, JNI là một bộ giao thức giao tiếp chuẩn của java, giúp cho java code có thể <strong>nói chuyện</strong> được với C/C++ code, có thể <strong>truyền</strong> dữ liệu giữa 2 bên.</p>
<p><img src="http://git@github.com.github.com/images/ndk-1.png"></p>
<p>Để tham khảo thêm về android ndk, các bạn có thể vào trang chủ của android tại <a href="https://developer.android.com/tools/sdk/ndk/index.html">Trang chủ của android</a>. Dưới đây tôi sẽ tóm tắt các bước cần thiết để sử dụng được ndk.</p>
<h2 id="cài-đặt">Cài đặt</h2>
<p>Cách cài đặt android ndk khá giống với sdk, tức là chỉ đơn thuần là bạn tải bộ ndk về, đặt vào đâu đó. Trong bộ NDK đó sẽ chứa đầy đủ các tool để có thể build được ndk native code từ C/C++ source (bao gồm build script và các file header cần thiết). Quá trình cài đặt có thể hiểu tóm gọn qua đoạn script dưới đây (chạy trên môi trường unix):</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre>
</td>
<td class="code">
<pre><code class=''><span class='line'>wget http://dl.google.com/android/ndk/android-ndk64-r10-darwin-x86.tar.bz2
</span><span class='line'>tar yxvf android-ndk64-r10-darwin-x86.tar.bz2
</span><span class='line'>mv android-ndk64-r10-darwin-x86 ~/
</span><span class='line'>echo "export PATH=$PATH:/~/android-ndk64-r10-darwin-x86" &gt;&gt; ~/.bash_profile
</span><span class='line'>echo "export ANDROID_NDK_ROOT=/Users/huydo/android-ndk64-r10-darwin-x86" &gt;&gt; ~/.bash_profile
</span><span class='line'>source ~/.bash_profile</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Sau khi chạy đoạn script trên thì android ndk đã được thêm vào path của hệ thống, giúp chúng ta có thể gõ các lệnh như <code>ndk-build</code> từ bất kì đâu</p>
<h2 id="sử-dụng">Sử dụng</h2>
<p>Trong bộ ndk bạn down về có chứa sẵn khá nhiều ví dụ về cách sử dụng ndk, từ đơn giản (như hello world) cho đến các ví dụ phức tạp hơn như xử lý ảnh (mà phải thao tác gửi dữ liệu giữa android app và ndk app khá phức tạp). Các bạn có thể tham khảo các ví dụ đó để có cái nhìn thực tế về ndk program. Dưới đây tôi sẽ trình bày ngắn gọn về quá trình sử dụng của tôi.</p>
<p>Như ở hình ở trên thì các bạn thấy là android app và native code sẽ “nói chuyện” với nhau thông qua một “ngôn ngữ” chung gọi là jni. Như vậy sẽ có 2 khả năng xảy ra, dẫn đến 2 ngữ cảnh để sử dụng ndk:</p>
<ul>
<li><ol type="1">
<li>Viết một số logic code quan trọng ở phía native code, và các logic còn lại để ở phía android app như bình thường. Các giao tiếp sẽ được gọi từ phía java thông qua jni. Cách tiếp cận này thuận lợi ở chỗ là chúng ta tận dùng được mọi điểm mạnh của android frame work, và chỉ các logic nào thật cần thiết mới đưa vào native code.</li>
</ol></li>
<li><ol start="2" type="1">
<li>Viết “native activity”, tức là logic của activity như hiển thị, life cycle, gọi các activity khác.. sẽ được code toàn bộ ở trên phía native. Cách này thực tế khá ít sử dụng, thường sử dụng trong trường hợp mà dữ liệu quá khó để truyền đi truyền lại giữa bên java và native, thì việc code luôn cả activity trên native cũng là một lựa chọn cần thiết.</li>
</ol></li>
</ul>
<p>Ở bài viết này tôi sẽ đi theo hướng tiếp cận 1, để giải quyết bài toán theo hướng:</p>
<blockquote>
<p>Đưa logic mã hoá uuid người dùng vào một file C, build ra binary và gọi logic đó trên phía java thông qua JNI.</p>
</blockquote>
<h2 id="coding-và-build">Coding và build</h2>
<p>Để đi theo hướng tiếp cận 1 như đã nói ở trên, chúng ta có thể dễ dàng hình dung công việc phải làm:</p>
<ul>
<li>Step 1: Viết logic code mã hoá trên C, nhận đầu vào là 1 chuỗi mô tả uuid của người dùng, đầu ra là chuỗi đó dã được mã hoá.</li>
<li>Step 2: Build đoạn code đó thành một file thư viện động (.so file) và “Nhúng” file thư viện động đó vào trong android project</li>
<li>Step 3: Viết logic code gọi native code trên java.</li>
</ul>
<h3 id="step-1-cấu-trúc-của-một-file-native-code-viết-trên-c">Step 1: Cấu trúc của một file native code viết trên C</h3>
<p>Thông thường, chúng ta sẽ tạo một folder tên là jni và đặt toàn bộ các đoạn code, header, các thư viện liên quan vào trong đó.</p>
<p><img src="http://git@github.com.github.com/images/jni-2.png"></p>
<p>File native code viết trên C khá đơn giản, chỉ cần tóm gọn lại trong 2 bước:</p>
<ul>
<li>include thư viện <jni.h></li>
<li>Viết các hàm dựa trên convention của jni để tạo ra các “interface”, và phía java sẽ gọi được các “interface” này một cách khá dễ dàng</li>
</ul>
<p>Một ví dụ hết sức về native code như dưới đây:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>hello_jni.c </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre>
</td>
<td class="code">
<pre><code class='c'><span class='line'><span class="cp">#innclude &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;jni.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">jstring</span>
</span><span class='line'><span class="nf">Java_com_example_hellojni_HelloJni_stringFromJNI</span><span class="p">(</span> <span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span>
</span><span class='line'>                                                  <span class="n">jobject</span> <span class="n">thiz</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&quot;Hello from JNI ! &quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Các bạn để ý tên hàm của native code sẽ dễ dàng nhận thấy convention như trong hình dưới đây:</p>
<p><img src="http://git@github.com.github.com/images/jni-1.png"></p>
<p>Nhờ có convention đó mà các bạn sẽ thấy việc gọi logic của hàm đó trên phía java sẽ dễ dàng hơn bao giờ hết.</p>
<p>Ngoài ra các bạn có thể để ý một số điểm đặc biệt ở một đoạn native code như dưới đấy:</p>
<ul>
<li>Giá trị trả về ở đây là jstring, đó là một kiểu dữ liệu đặc biệt của jni, mà khi phía java gọi, thư viện jni sẽ thực hiện chuyển đổi (marshalling) giá trị này về kiểu String của java.</li>
<li>Biến JNIEvn* env, bạn có thể hình dung đây là một con trỏ trỏ đến VirtualMachine (Dalvik) của android, nhờ có env này mà chúng ta có thể thao tác ngược từ phía native, để có thể sử dụng được các logic phía android. Như trong đoạn code trên thì chúng ta có thể thấy nhờ có env mà chúng ta có thể tạo được một unicode string từ trong C code.</li>
</ul>
<h3 id="step-2-build-đoạn-code-đó-thành-.so-file">Step 2: Build đoạn code đó thành .so file</h3>
<p>Để build được file native C mà chúng ta vừa viết ở trên, chúng ta cần làm 2 việc:</p>
<ul>
<li>Tạo 2 file Android.mk và Application.mk trong thư mục jni mà chúng ta đã nhắc đến ở trên</li>
<li>Android.mk có nhiệm vụ “miêu tả” module với hệ thống build. Trong file này chúng ta sẽ viết là module chúng ta có những file gì, path ở đâu, sử dụng những thư viện khác nào (dependency). Trong một app có thể có nhiều file Android.mk khi mà chúng ta có nhiều module.</li>
<li>Application.mk sẽ có nhiệm vụ “miêu tả” app của chúng ta với hệ thống build. Thông thường trong file này chúng ta sẽ mô tả những modules mà app sẽ dùng, cũng như là mô tả về CPU architecture mà app sẽ hỗ trợ (mà điển hình gồm có ARM, x86 và MIPS)</li>
<li>Build sử dụng ndk-build hết sức đơn giản chỉ bằng việc gõ lệnh <code>ndk-build</code> ở trong folder hiện tại.</li>
</ul>
<p><img src="http://git@github.com.github.com/images/ndk-2.png"></p>
<p>Sau khi sử dụng lệnh ndk-build để build thì kết quả build là các file .so sẽ được copy vào thư mục <strong>libs</strong> ở root folder theo như hình trên đây. Các bạn có thể thấy là tương ứng với mỗi kiến trúc CPU sẽ có một folder được tạo ra, trong mỗi folder đó lại có các file .so khác nhau chỉ dùng với duy nhất một kiến trúc nhất định.</p>
<h3 id="step-3-viết-logic-code-gọi-native-code-trên-java">Step 3: Viết logic code gọi native code trên java</h3>
<p>Đã build xong thư viện tĩnh, chúng ta chỉ còn một công đoạn cuối cùng là sử dụng đoạn logic ở trên trong android code. Theo như ở trên đã nói, interface của jni code sẽ được sử dụng dựa theo convention mà gồm có: package name, class name và cfunction name. Điều đó có nghĩa là: đoạn code java trong android của bạn sẽ phải có package name, class name và function name y hệt như interface của jni, thì bạn mới sử dụng được logic đó.</p>
<p>Vậy thì theo như ví dụ của chúng ta ở đây thì chúng ta cần phải làm 3 việc:</p>
<ul>
<li>package name của đoạn code phải là com/example/hellojni</li>
<li>Class name phải là HelloJni</li>
<li>Bạn phải định nghĩa một hàm tên là stringFromJNI để gọi được logic từ native code.</li>
</ul>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>HelloJni.java </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre>
</td>
<td class="code">
<pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">hellojni</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.TextView</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloJni</span> <span class="kd">extends</span> <span class="n">Activity</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">TextView</span>  <span class="n">tv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TextView</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="n">tv</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span> <span class="n">stringFromJNI</span><span class="o">()</span> <span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">tv</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">native</span> <span class="n">String</span>  <span class="nf">stringFromJNI</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">&quot;hello-jni&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Từ đoạn code trên chắc các bạn đã hình dung ra cách để gọi native code thế nào dựa vào hàm <code>System.loadLibrary(&quot;hello-jni&quot;)</code> và việc định nghĩa hàm thông qua directive <code>native</code></p>
<p>Như vậy chúng ta đã tìm hiểu rất sơ qua về ndk. Trong phần tiếp theo, tôi sẽ đi vào phần chính mà tôi muốn nói đến, đó là giới thiệu về openssl và sử dụng openssl trên android ndk.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tôi đã xây dựng một phần mềm mã nguồn mở như thế nào]]></title>
    <link href="http://git@github.com.github.com/blog/2014/08/01/toi-da-xay-dung-1-phan-mem-ma-nguon-mo-nhu-the-nao/"/>
    <updated>2014-08-01T20:00:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2014/08/01/toi-da-xay-dung-1-phan-mem-ma-nguon-mo-nhu-the-nao</id>
    <content type="html"><![CDATA[<p><em>Lưu ý trước khi đọc tiếp: Ở bài viết này tác giả dùng chữ “hacker”, không phải theo nghĩa chỉ những người làm trong lĩnh vực bảo mật hay an toàn thông tin. “Hacker” ở đây là những kỹ sư, những nhà phát triền có năng lực tự tìm hiểu, mày mò, có kỹ năng “bắt máy tính phục vụ sở thích của mình”.</em></p>
<h1 id="ý-tưởng">Ý tưởng</h1>
<p>Nếu bạn là một hacker làm việc nhiều với Mac hoặc Linux, chắc các bạn chẳng xa lạ gì với terminal - giao diện dòng lệnh cơ bản nhất của hệ điều hành Unix. Tôi là một hacker bị “cuồng terminal”, <code>zsh</code>, <code>prezto</code>, <code>tmux</code>, <code>irssi</code>, <code>vim</code>, <code>tig</code> là những tools ưa thích nhất. Tôi từng có ước mơ muốn từ bỏ các giao diện đồ hoạ, có thể lập trình, chat chit, nghe nhạc v.v.. ngay trên môi trường không-đồ-hoạ.</p>
<p>Bên cạnh đó, mặc dù không mấy mặn mà với Facebook nhưng gần đây lại bị nghiện Twitter, trong đầu tôi luôn hiện lên câu hỏi: làm thế nào để cũng có thể tương tác với Twitter chỉ qua terminal của MacOSX ?</p>
<p>Trên thực tế đã có khá nhiều thư viện mã nguồn mở có thể đáp ứng được nhu cầu trên. <a href="https://github.com/sferik/t">t</a> hay <a href="https://github.com/jugyo/earthquake">earthquake</a> là những gem(Ruby) được viết rất bài bản và đa tính năng. Tuy nhiên tôi đã quyết định tự viết một phần mềm của riêng mình, bởi tự phát triền và làm sản phẩm của mình được cộng đồng đón nhận là một mục tiêu mới mẻ và đầy thử thách.</p>
<p>Trong bài viết này, tôi sẽ giới thiệu với các bạn tôi đã xây dựng một phần mềm mã nguồn mở như thế nào, về cả kỹ năng phát triển và cách mang phần mềm của mình đến với cộng đồng hacker trên thế giới.</p>
<h1 id="xác-định-mục-tiêu">Xác định mục tiêu</h1>
<p>Khi bạn bắt đầu viết một phần mềm mã nguồn mở, điều quan trọng đầu tiên sẽ là : <strong>đã có ai thực hiện ý tưởng của bạn chưa</strong> và họ <strong>đã thực hiện được tốt đến đâu</strong>. Khi chuẩn bị viết phần mềm của mình, tôi nhận thấy <a href="https://github.com/sferik/t">t</a> giống như <em>1 twitter command trên Unix</em>, focus vào khả năng pipe với các command khác. Ngược lại, <a href="https://github.com/jugyo/earthquake">earthquake</a> là 1 app hoàn chỉnh nhưng <em>xử lý hiển thị tweets lại chưa thật tốt</em>.</p>
<p>Và từ đó <a href="https://github.com/DTVD/rainbowstream">Rainbow Stream</a> ra đời. Bạn có thể nhận ra 2 điểm nêu trên khi nhìn vào cách thức hoạt động của app dưới đây:</p>
<figure>
<img src="https://raw.githubusercontent.com/DTVD/rainbowstream/master/screenshot/rs.gif" />
</figure>
<h1 id="tạo-nên-sự-khác-biệt">Tạo nên sự khác biệt</h1>
<p>Để gây được ấn tượng với người dùng, sản phẩm của bạn vẫn cần có 1 đến 2 tính năng nổi trội. Bạn sẽ không muốn phần mềm mình viết ra mãi chỉ là “alternative to xxx or yyy, can consider if zzz stops development”. Ở đây, tôi xây đựng <a href="https://github.com/DTVD/rainbowstream">Rainbow Stream</a> tập trung vào 2 tính năng chính:</p>
<ul>
<li>Khả năng hiển thị màu sắc trên các terminal hỗ trợ 256 màu, cung cấp sẵn 1 số themes nổi tiếng.</li>
<li>Hiện thị ảnh <em>trực tiếp trên terminal</em>.</li>
</ul>
<p>Chúng ta sẽ đi vào cụ thể trong các phần tiếp theo.</p>
<h1 id="hiển-thị-màu-của-terminal">Hiển thị màu của terminal</h1>
<p>Hầu hết các terminal hiện đại đều hỗ trợ hiển thị <em>256 ANSI colors</em>. Trên shell bạn có thể dễ dàng in ra chữ theo các màu định sẵn bẳng các dùng <em>Escape character</em> như dưới đây</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>color - color.sh </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre>
</td>
<td class="code">
<pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> -e <span class="s2">&quot;\e[31mRed&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> -e <span class="s2">&quot;\e[32mGreen&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> -e <span class="s2">&quot;\e[33mYellow&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> -e <span class="s2">&quot;\e[34mBlue&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> -e <span class="s2">&quot;\e[35mMagenta&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> -e <span class="s2">&quot;\e[36mCyan&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> -e <span class="s2">&quot;\e[37mLight gray&quot;</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Hiện thị màu trên Python có thể được viết gọn theo function như sau</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>color - color.py </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre>
</td>
<td class="code">
<pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">basic_color</span><span class="p">(</span><span class="n">code</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    16 colors supported</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">bold</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
</span><span class='line'>        <span class="n">c</span> <span class="o">=</span> <span class="n">code</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">bold</span><span class="p">:</span>
</span><span class='line'>            <span class="n">c</span> <span class="o">=</span> <span class="s">&quot;1;</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">c</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;</span><span class="se">\033</span><span class="s">[</span><span class="si">%s</span><span class="s">m</span><span class="si">%s</span><span class="se">\033</span><span class="s">[0m&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">inner</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">term_color</span><span class="p">(</span><span class="n">code</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    256 colors supported</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span><span class='line'>        <span class="n">c</span> <span class="o">=</span> <span class="n">code</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;</span><span class="se">\033</span><span class="s">[38;5;</span><span class="si">%s</span><span class="s">m</span><span class="si">%s</span><span class="se">\033</span><span class="s">[0m&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">inner</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Sử dụng những function ở trên thực tế rất đơn giản: gọi thẳng function với parameter là mã ANSI color, trả về là <em>một function khác</em> và lần này nhận parameter là string để đổi thành string có màu tương ứng.</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>color - color.py </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre>
</td>
<td class="code">
<pre><code class='py'><span class='line'><span class="n">black</span> <span class="o">=</span> <span class="n">basic_color</span><span class="p">(</span><span class="s">&#39;30&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">red</span> <span class="o">=</span> <span class="n">basic_color</span><span class="p">(</span><span class="s">&#39;31&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">green</span> <span class="o">=</span> <span class="n">basic_color</span><span class="p">(</span><span class="s">&#39;32&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">yellow</span> <span class="o">=</span> <span class="n">basic_color</span><span class="p">(</span><span class="s">&#39;33&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">blue</span> <span class="o">=</span> <span class="n">basic_color</span><span class="p">(</span><span class="s">&#39;34&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">magenta</span> <span class="o">=</span> <span class="n">basic_color</span><span class="p">(</span><span class="s">&#39;35&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">cyan</span> <span class="o">=</span> <span class="n">basic_color</span><span class="p">(</span><span class="s">&#39;36&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">green</span><span class="p">(</span><span class="s">&quot;Green text&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">term_color</span><span class="p">(</span><span class="s">&#39;112&#39;</span><span class="p">)(</span><span class="s">&quot;A text with ANSI color 112&quot;</span><span class="p">)</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Giả sử chúng ta có một tập vô hạn các word không biết trước. muốn mỗi word có một màu và các word lặp lại sẽ có màu giống nhau, chúng ta có thể dùng <em>Memoization</em> trong Python như sau:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>color - color.py </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre>
</td>
<td class="code">
<pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">itertools</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class='line'><span class="n">cyc</span> <span class="o">=</span> <span class="n">itertools</span><span class="o">.</span><span class="n">cycle</span><span class="p">([</span><span class="n">black</span><span class="p">,</span><span class="n">red</span><span class="p">,</span><span class="n">green</span><span class="p">,</span><span class="n">yellow</span><span class="p">,</span><span class="n">blue</span><span class="p">,</span><span class="n">magenta</span><span class="p">,</span><span class="n">cyan</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">Memoize</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="n">cache</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">args</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
</span><span class='line'>            <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Memoize</span>
</span><span class='line'><span class="k">def</span> <span class="nf">cycle_color</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">next</span><span class="p">(</span><span class="n">cyc</span><span class="p">)(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="p">[</span><span class="s">&quot;w1&quot;</span><span class="p">,</span><span class="s">&quot;w2&quot;</span><span class="p">,</span><span class="s">&quot;w3&quot;</span><span class="p">,</span><span class="s">&quot;w1&quot;</span><span class="p">,</span><span class="s">&quot;w4&quot;</span><span class="p">]:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">cycle_color</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="c"># Now every word will has its own color, while the 1st &quot;w1&quot; and 2nd &quot;w1&quot; ends up with same color</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Các màu sắc hiển thị trong <a href="https://github.com/DTVD/rainbowstream">Rainbow Stream</a> đều dựa theo nguyên lý nói trên.</p>
<h1 id="hiển-thị-ảnh-trên-terminal">Hiển thị ảnh trên terminal</h1>
<p>Để nói cụ thể về phần này sẽ hơi dài dòng, nhưng có thể tóm gọn trong các ý sau đây:</p>
<ul>
<li>Python có một thư viện xử lý ảnh rất tốt là <code>Pillow</code>. <code>Pillow</code> cung cấp những tính năng cơ bản để thao tác với lượng thông tin trong một tấm ảnh. Nhược điểm của Pillow là khá buggy khi install và không hỗ trợ Window.</li>
<li>Tôi dùng <code>Pillow</code> để đọc thông tin về từng Pixel trong một ảnh, mỗi pixel sẽ có 4 chỉ số gồm 3 chỉ số màu (R,G,B) và 1 chỉ số về độ trong (A).</li>
<li>Màu sắc của 1 pixel nói trên được quy đổi về tập 256 màu ANSI hiển thị được trên terminal (phương pháp xem ở dưới).</li>
<li>Với mỗi pixel, tôi in ra như 1 ký tự Space với màu ANSI tương ứng, sử dụng hàm <code>term_color</code> ở đoạn trên.</li>
</ul>
<p>Trong các bước trên thì bước quy đổi màu là quan trọng nhất. Thuật toán quy đổi dùng ở đây là phương pháp tính khoảng cách vector trong không gian Euclide 3 chiều:</p>
<ul>
<li>Mỗi màu RGB coi như 1 vector với 3 chiều là R (Red), G (Green), B (Blue).</li>
<li>Mỗi màu ANSI (trong tập 256 màu của terminal) cũng tương ứng với 1 vector 3 chiều. Chúng ta có tập tiêu chuẩn 256 vector ở đây.</li>
<li>Mỗi vector RGB của 1 pixel sẽ được quy về vector tiêu chuẩn ANSI <em>gần nhất</em>. Công thức tính khoảng cách giữa 2 đầu vector như trong hình học 3 chiều : <code>((x1-x2)**2 + (y1-y2)**2 + (z1-z2)**2)**0.5</code></li>
</ul>
<p>Như vậy “ảnh” ở trên terminal thực chất là các ký tự Space với màu ANSI đã được quy đổi và in ra liên tiếp :)</p>
<h1 id="các-vấn-đề-kỹ-thuật-khác">Các vấn đề kỹ thuật khác</h1>
<p>Để hoàn thiện <a href="https://github.com/DTVD/rainbowstream">Rainbow Stream</a> thực ra cần một số kỹ năng khác như lập trình với thread, tạo interactive input bẳng readline, gọi chương trình C compile sẵn hay xử lý chung cho cả Python 2 và Python 3… Trong khuôn khổ một bài viết tôi khó có thể trình bày hết những vấn đề trên, vì vậy nếu bạn quan tâm hãy mở thẳng <a href="https://github.com/DTVD/rainbowstream">Github repo</a> và đọc source code. <a href="https://github.com/DTVD/rainbowstream">Rainbow Stream</a> là một phần mềm mã nguồn mở với MIT license.</p>
<p><em>(… còn tiếp - Làm thế nào để mang phần mềm của mình đến với thế giới hacker …)</em></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trở lại với cơ bản (2): Load Average]]></title>
    <link href="http://git@github.com.github.com/blog/2014/07/20/load-average/"/>
    <updated>2014-07-20T19:31:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2014/07/20/load-average</id>
    <content type="html"><![CDATA[<h1 id="giới-thiệu">Giới thiệu</h1>
<p>Load Average – tạm dịch là “giá trị tải trung bình” – là một chỉ số liên quan đến CPU rất cơ bản và quan trọng. Việc nắm rõ ý nghĩa của chỉ số này giúp chúng ta đánh giá được hiệu năng hiện thời của máy tính cũng như sử dụng CPU nói riêng, máy tính nói chung một cách hiệu quả nhất</p>
<p>Bài viết này bắt đầu bằng việc giải thích ý nghĩa của “giá trị tải trung bình”. Sau đó bài viết sẽ trình bày cách đánh giá chỉ số này trong thực tế. Cuối cùng bài viết đưa ra một trường hợp thực tế về cách đánh giá hiệu năng máy tính theo chỉ số này.</p>
<h1 id="tải-trung-bình-là-gì">“Tải trung bình” là gì?</h1>
<h2 id="ví-dụ-trạm-thu-phí">Ví dụ trạm thu phí</h2>
<p>Để hiểu *tải trung bình&quot; là gì ta sẽ xem xét một ví dụ thực tế như sau.</p>
<p>Bạn đang tham gia giao thông trên đường cao tốc và trước mặt của bạn là trạm thu phí đường bộ. Bạn giảm tốc để chuẩn bị qua cửa soát vé. Trạm xoát vé có 4 cửa soát vé. Tất cả các cửa đều trống và bạn chọn cửa số 1 như dưới đây.</p>
<pre><code>    H                               &lt;-- Xe ôtô của bạn
|   1   |   2   |   3   |   4   |   &lt;-- Trạm thu phí</code></pre>
<p>Bạn đánh xe đến cửa số 1, trả phí cho nhân viên soát vé. Nhân viên soát vé mở barrier chắn, và bạn đi qua. Có duy nhất xe bạn qua trạm nên từ phía trạm thu phí, <em>trạm đang phục vụ 1 xe</em>.</p>
<pre><code>|   H   |   2   |   3   |   4   |</code></pre>
<p>Giờ tưởng tượng có nhiều xe khác cũng lưu thông trên đường cao tốc. Giả sử có trước khi bạn đến trạm thu phí, đang có 2 xe khác làm thủ tục ở cửa số 1 và số 2, bạn chú ý cửa số 3,4 còn trống nên lái xe qua cửa số 3 và làm thủ tục mà không phải chờ đợi. <em>Trạm phục vụ 3 xe</em>.</p>
<pre><code>|   H&#39;   |   H&#39;   |   H   |   4   |</code></pre>
<p>Có thể thấy ở 2 trường hợp trên, trạm thu phí đang làm việc khá <em>hiệu quả</em>. Các xe ôtô đi qua với thời gian chờ đợi bằng 0. Các xe ôtô đi qua trạm xoát vé một cách nhanh chóng. Người lái xe là bạn cảm thấy thoải mái vì không phải chờ đợi.</p>
<p>Giả sử hôm nay là ngày nghỉ lễ, mọi người về quê đông nên xe khách chạy rất đông. Các gia đình tranh thủ ngày lễ nên cũng đánh xe đi chơi xa. Đường cao tốc trở nên đông đúc. Bạn đến trạm thu phí và nhận ra rằng 4 cửa đang có xe làm thủ tục. Chưa kể bạn còn đến sau 2 xe khác và phải đợi xếp hàng sau 2 xe này.</p>
<pre><code>    H                                   &lt;-- Xe ôtô của bạn
    H&#39;
    H&#39;
|   H&#39;   |   H&#39;   |   H&#39;   |   H&#39;   |   &lt;-- Trạm thu phí</code></pre>
<p>Trong trường hợp này, bạn chắc chắn sẽ phải chờ, không những chờ các xe đang làm thủ tục tại cửa trạm mà còn chờ cả các xe đến trước bạn. Thời gian có thể bị kéo dài vì nhiều lý do như 1 xe làm thủ tục mất thời gian hơn các xe khác hoặc có sự cố ở cửa soát vé. Đứng từ góc độ của trạm thu phí, trạm đang phải xử lý số lượng xe (7 xe) nhiều hơn khả năng của trạm (4 cửa). Tại thời điểm hiện tại, trạm đang bị <em>quá tải</em>.</p>
<p>Ta định nghĩa số lượng tải trung bình của trạm là số lượng xe mà trạm phải phục vụ trong một đơn vị thời gian. Như vậy ở ví dụ trên <em>trung bình tải</em> của trạm thu phí tại thời điểm bạn đến là 7.</p>
<h2 id="load-average-của-cpu">Load Average của CPU</h2>
<p>Tương tự như ví dụ trạm soát vé, “Load Average” của CPU được định nghĩa là số lượng process cần tài nguyên tính toán của CPU tại thời điểm nhất định. Giả sử tải trung bình của máy tính bạn hiện tại là 3.2, điều đó có nghĩa là tại thời điểm đó đang có trung bình 3.2 processes cần CPU xử lý. Tại thời điểm process cần CPU, nếu CPU đang rảnh process sẽ được OS cho chạy trên CPU rảnh.</p>
<p>Mổi “cửa soát vé” trong CPU máy tính sẽ là 1 lõi CPU. Với các CPU thế hệ mới trang bị công nghệ Hyperthreading, mỗi lõi vật lý có thể hoạt động được như 2 lõi logic. Vì vậy OS sẽ nhận diện 8 lõi. Ví dụ máy tính của bạn được trang bị chip mới nhất hiện tại Corei7 MQ– 4 cores 8 threads với công nghệ Hyperthreading thì đối với hệ điều hành máy tính của bạn có 8 cores.</p>
<p>Để kiểm tra máy tính của bạn có bao nhiêu lõi (cores), trên windows bạn có thể kiểm tra qua TaskManager &gt; Performance. Bên cạnh biểu đồ tỉ lệ sử dụng CPU nói chung là tỉ lệ sử dụng CPU của từng lõi. Số lượng cửa sổ bên tay phải là số lượng lõi logic.</p>
<p>Trên Linux bạn có thể kiểm tra bằng nhiều cách:</p>
<pre><code>$ top
# ấn 1
top - 20:38:48 up 2 days,  4:50,  1 user,  load average: 11.30, 11.54, 10.17
Tasks: 430 total,   2 running, 428 sleeping,   0 stopped,   0 zombie
Cpu0  : 20.5%us,  2.4%sy,  0.0%ni, 76.2%id,  0.4%wa,  0.0%hi,  0.5%si,  0.0%st
Cpu1  : 20.2%us,  1.9%sy,  0.0%ni, 77.4%id,  0.5%wa,  0.0%hi,  0.1%si,  0.0%st
Cpu2  : 19.9%us,  1.8%sy,  0.0%ni, 77.7%id,  0.5%wa,  0.0%hi,  0.1%si,  0.0%st
Cpu3  : 19.9%us,  2.3%sy,  0.0%ni, 77.2%id,  0.2%wa,  0.0%hi,  0.4%si,  0.0%st
Cpu4  : 19.8%us,  2.3%sy,  0.0%ni, 77.1%id,  0.4%wa,  0.0%hi,  0.4%si,  0.0%st
Cpu5  : 19.7%us,  2.3%sy,  0.0%ni, 77.4%id,  0.2%wa,  0.0%hi,  0.4%si,  0.0%st
Cpu6  : 20.1%us,  1.6%sy,  0.0%ni, 78.1%id,  0.1%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu7  : 19.6%us,  2.2%sy,  0.0%ni, 77.7%id,  0.1%wa,  0.0%hi,  0.3%si,  0.0%st
Cpu8  : 19.4%us,  2.2%sy,  0.0%ni, 78.0%id,  0.1%wa,  0.0%hi,  0.3%si,  0.0%st
Cpu9  : 19.8%us,  2.2%sy,  0.0%ni, 77.6%id,  0.1%wa,  0.0%hi,  0.3%si,  0.0%st
Cpu10 : 19.5%us,  1.6%sy,  0.0%ni, 78.8%id,  0.1%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu11 : 19.9%us,  2.2%sy,  0.0%ni, 77.5%id,  0.1%wa,  0.0%hi,  0.3%si,  0.0%st
Mem:  32846220k total, 32593588k used,   252632k free,   434464k buffers
Swap:  4194296k total,        0k used,  4194296k free, 22380012k cached

PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
14489 hadoop    20   0 1643m 684m  16m S 104.7  2.1  32:15.93 java
14496 hadoop    20   0 1635m 705m  16m S 104.7  2.2  32:14.63 java
16194 hadoop    20   0 1637m 655m  16m S 104.7  2.0  29:45.06 java
16243 hadoop    20   0 1630m 687m  16m S 104.7  2.1  29:28.34 java</code></pre>
<p>hoặc</p>
<pre><code>$ mpstat -P ALL
Linux 2.6.32-358.11.1.el6.x86_64 (bb2-dn07)     07/20/2014      _x86_64_        (12 CPU)

08:39:53 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest   %idle
08:39:53 PM  all   19.88    0.00    2.09    0.23    0.00    0.27    0.00    0.00   77.53
08:39:53 PM    0   20.52    0.00    2.38    0.42    0.00    0.46    0.00    0.00   76.21
08:39:53 PM    1   20.19    0.00    1.85    0.51    0.00    0.11    0.00    0.00   77.35
08:39:53 PM    2   19.95    0.00    1.81    0.48    0.00    0.11    0.00    0.00   77.65
08:39:53 PM    3   19.92    0.00    2.33    0.20    0.00    0.38    0.00    0.00   77.16
08:39:53 PM    4   19.82    0.00    2.28    0.39    0.00    0.45    0.00    0.00   77.07
08:39:53 PM    5   19.74    0.00    2.33    0.19    0.00    0.38    0.00    0.00   77.36
08:39:53 PM    6   20.14    0.00    1.64    0.13    0.00    0.01    0.00    0.00   78.09
08:39:53 PM    7   19.65    0.00    2.19    0.13    0.00    0.35    0.00    0.00   77.69
08:39:53 PM    8   19.38    0.00    2.20    0.11    0.00    0.34    0.00    0.00   77.97
08:39:53 PM    9   19.78    0.00    2.23    0.07    0.00    0.35    0.00    0.00   77.57
08:39:53 PM   10   19.53    0.00    1.59    0.11    0.00    0.01    0.00    0.00   78.76
08:39:53 PM   11   19.93    0.00    2.21    0.07    0.00    0.34    0.00    0.00   77.45</code></pre>
<p>hoặc</p>
<pre><code>$　cat /proc/cpuinfo
.....</code></pre>
<h1 id="hiểu-và-đánh-giá-tải-trung-bình-như-thế-nào">Hiểu và đánh giá “tải trung bình” như thế nào?</h1>
<p>Bên cạnh chỉ số tận dụng CPU bạn có thêm 1 chỉ số nữa gọi là “tải trung bình”. Bạn nên hiểu 2 giá trị này thế nào?</p>
<p>Tỉ lệ tận dụng CPU nói rằng một process sử dụng CPU nhiều hay ít. Giả sử bạn có một tính toán khá lớn (ví dụ sắp xếp 10GB dữ liệu), phần lớn thời gian của CPU của bạn chắc chắn sẽ bận rộn so sánh và di chuyển dữ liệu. Phần trăm sử dụng CPU sẽ cao, thời gian rảnh (idle) của CPU chắc sẽ thấp.</p>
<p>Tải trung bình nói rằng số lượng process đang đợi CPU là lớn hay nhỏ. Nếu số lượng process đợi CPU lớn, thời gian một process đợi sẽ dài, thời gian hoàn thành tác vụ của process đó sẽ dài. Bạn sẽ phải chờ kết quả lâu hơn. Ngược lại nếu số lượng process đợi thấp, bạn sẽ không phải đợi các process khác. Thời gian bạn đợi kết quả sẽ chỉ là thời gian tính toán.</p>
<p>Làm thế nào để biết được số lượng process đang đợi CPU là lớn hay nhỏ? Giống như trường hợp trạm thu phí, nếu số lượng process lớn hơn số lượng lõi CPU, chắc chắn sẽ phải có process đợi. Ngược lại nếu số lượng process nhỏ hơn số lượng lõi CPU, các process hầu như sẽ không phải xếp hàng chờ đợi mà sẽ được OS gán cho lõi đang rảnh rỗi tính toán.</p>
<p>Từ đây đặt ra câu hỏi: “đánh giá hiệu năng máy tính dựa vào tỉ lệ sử dụng CPU và tải trung bình như thế nào?”.</p>
<p>Việc đánh giá hiệu năng CPU tùy thuộc vào từng bài toán cụ thể. Ta sẽ đánh giá về hiệu năng sử dụng CPU qua các trường hợp sau (giả sử máy tính có 6 cores 12 threads - ví dụ Intel Xeon):</p>
<ul>
<li>Tỉ lệ sử dụng CPU thấp (1%), tải CPU thấp (3 - 3 processes / 12 cores)</li>
<li>Tỉ lệ sử dụng CPU cao (80%), tải CPU thấp (3 - 3 processes / 12 cores)</li>
<li>Tỉ lệ sử dụng CPU thấp (1%), tải CPU cao (18 - 18 processes / 12 cores)</li>
<li>Tỉ lệ sử dụng CPU cao (80%), tải CPU cao (18 - 18 processes / 12 cores)</li>
</ul>
<p>Trong trường hợp đầu, máy tính của bạn hầu như không dùng CPU mấy. CPU dành hầu hết thời gian cho tính toán thấp, số lượng process cũng không cao. Đứng từ góc độ chi phí, bạn đã chi tiền mua 1 CPu quá tốt so với nhu cầu thực tế :-)</p>
<p>Trường hợp 2, bạn đang sử dụng CPU ở mức khá. Bạn bắt CPU tính toán cật lực. Tuy vậy tải trung bình của CPU chỉ có 3, có nghĩa là năng lực CPU của bạn vẫn còn rất lớn mà bạn hoàn toàn có thể tận dụng. Bạn hoàn toán có thể bật thêm 9 processes với mức tính toán như hiện tại mới có thể tận dụng được hết hiệu năng của CPU.</p>
<p>Trường hợp 3 khá lý thú. CPU của bạn được dùng cho những tính toán rất nhẹ nhàng có thể xong ngay lập tức nhưng số lượng process cần CPU lại khá cao. Điều này nói lên rằng CPU của bạn đang bị quá tải process. Có nhiều lý do dẫn đến trường hợp này và mỗi trường hợp có nhiều cách giải quyết khác nhau. Một ví dụ cho trường hợp này là máy chủ web. Việc render các trang web là tính toán không hề nặng, tuy vậy với các máy chủ web chịu trafic lớn (số lượng connection lớn), các process phục vụ request sẽ phải xếp hàng dẫn đến tình trạng trang web bị phục vụ thời gian kéo dài hơn. Một ví dụ khác là máy chủ dành thời gian chủ yếu đợi thao tác vào ra (I/O) chẳng hạn nhưng truy vấn cơ sở dữ liệu. Số lượng query lớn, số lượng truy vấn cần sắp xếp lớn nhưng dữ liệu cần sắp xếp lại bé, thời gian đợi dữ liệu từ đĩa cứng lại cao. Vì vậy phần lớn CPU sẽ idle, nhưng tải CPU vẫn cao. Đối với trường hợp này, ta chỉ có cách là mua CPU với tần số thấp hơn và chia tải ra nhiều máy hơn để tối ưu hóa chi phí.</p>
<p>Trường hợp 4 là trường hợp bạn đang sử dụng CPU một cách hiệu quả nhất. Mỗi cores đều bận rộn tính toán và hầu hết các cores đều được cho sử dụng. Tùy bài toán tính toán mà trường hợp này có thể là tốt hay xấu. Nếu đây là máy chủ web có lẽ đã đến lúc bạn mua thêm máy tính.</p>
<h1 id="trường-hợp-thực-tế">Trường hợp thực tế</h1>
<p>Hiểu được ý nghĩa của tải trung bình, chúng ta hiểu rằng sử dụng CPU hiệu quả có nghĩa là phải overload CPU. Một máy tính với CPU được sử dụng hết công suất suất là một máy tính được sử dụng tốt. Nắm được cách sử dụng vũ khí tải trung bình, chúng ta sẽ thử áp dụng cho 2 trường hợp thực tế.</p>
<h3 id="cấu-hình-máy-chủ-web-1">Cấu hình máy chủ web 1</h3>
<p>Bạn có máy tính chuyên trả về file static (css, image, js). Bạn sử dụng nginx và cấu hình để nginx trả về dữ liệu trong một thư mục nhất định. Bạn sẽ cấu hình nginx với bao nhiêu workers.</p>
<p>Trả lời: 12! Nếu bạn cấu hình ít hơn 12 workers, khả năng cao là CPU của máy tính bạn đang không được sử dụng hết công suất. Tại một thời điểm nào đó sẽ có một vì cores rong chơi.</p>
<h3 id="cấu-hình-máy-chủ-web-2">Cấu hình máy chủ web 2</h3>
<p>Giả sử bạn có máy chủ web 12 cores (logic :-)) và load average hiện tại là 5. Liệu đã đến lúc bạn mua thêm máy chủ mới chưa?</p>
<p>Trả lời: Không biết :-). Nếu máy chủ của bạn dành phần lớn thời gian idle đợi dữ liệu từ đĩa cứng hoặc cơ sở dữ liệu, nút thắt cổ chai hệ thống của bạn không phải là CPU mà có thể là cơ sở dữ liệu hoặc là đĩa cứng (thao tác I/O). Nếu cơ sở dữ liệu của bạn chưa hết công suất (I/O chưa hết công suất), bạn hoàn toàn không cần mua thêm máy chủ web. Bạn có thể cầu hình lại nginx / gunicorn…) để load average cao hơn (không quá 12 - số lượng cores) nhằm tận dụng hết năng lực của CPU của máy tính hiện tại).</p>
<h3 id="cấu-hình-hadoop">Cấu hình hadoop</h3>
<p>hadoop nổi tiếng trong giới BigData. Một datanode chạy các thủ tục map / reduce viết bằng java để lấy 1 block dữ liệu từ ổ cứng; chạy thao tác map để trích xuất dữ liệu; chạy thao tác reduce để tổng hợp dữ liệu. Một datanode thực hiện rất nhiều truy vấn dữ liệu từ ổ cúng cũng như sử dụng rất nhiều cpu cho thao tác sắp xếp, tổng hợp dữ liệu. Với 1 máy tính 12 cores, bạn sẽ cấu hình bao nhiêu java process cho thao tác map/reduce?</p>
<p>Trả lời: Không biết :-) nhưng chắc chắn là lớn hơn 12. Bạn sẽ bất ngờ vì thấy câu trả lời hơi khác máy chủ web dù rằng bài toán có vẻ giống nhau! Lý do là: mô hình map/reduce của hadoop cần rất nhiều dữ liệu do vậy truy vấn đĩa cứng sẽ rất cao, thao tác I/O lớn. Dù thao tác sắp xếp dữ liệu cũng khá tốn CPU nhưng để có dữ liệu sắp xếp, 1 map process vẫn cần thời gian để chờ dữ liệu từ ổ cúng. Trong khoảng thời gian này CPU sẽ idle. Nếu bạn chỉ cấu hình số lượng map/reduce là 12 (bằng số lượng cores), sẽ có 1 khoảng thời gian mà các cores không làm việc vì phải chờ đĩa cứng. Vì vậy CPU thực chất sẽ có những lúc rất bận và những lúc rất rảnh. Để hạn chế thời gian rảnh của CPU, “best-practice” sẽ là overload CPU bằng cách cấu hình cho số lượng process lớn hơn số cores. Tỉ lệ được khuyến cáo là 1.5 lần. Nhờ vậy trong khi có những process đợi I/O, CPU sẽ bận rộn với các process trước đó.</p>
<p><strong>Cấu hình cụ thể là bài toán tùy trường hợp. Bạn nên xem bản chất bài toán và hành vi của máy chủ trước khi cấu hình</strong></p>
<h1 id="kết-luận">Kết luận</h1>
<p>Bài viết đã giải thích ý nghĩa của load-average, một chỉ số quan trọng cũng như giới thiệu một số trường hợp cấu hình thực tế liên quan đến load-average. Hy vọng qua bài viết này, bạn hiểu được ý nghĩa của load-average, áp dụng vào thực tiễn công việc sử dụng máy tính hiệu quả nhất với chi phí tốt nhất.</p>
<h1 id="câu-hỏi-phụ--">Câu hỏi phụ :-)</h1>
<p>Một câu hỏi phỏng vấn vị trí SRE của Google:</p>
<blockquote>
<p>Lệnh uptime trả về 3 kết quả Load Average. 3 con số này là gì?</p>
</blockquote>
<h1 id="tài-liệu-tham-khảo">Tài liệu tham khảo</h1>
<ol type="1">
<li><a href="http://shop.oreilly.com/product/0636920025085.do">hadoop operations</a></li>
<li><a href="http://www.amazon.com/Computer-Architecture-Quantitative-Approach-Edition/dp/0123704901">Computer Architecture, A Quantitative Approach</a></li>
<li><a href="http://nginx.org/en/docs/" class="uri">http://nginx.org/en/docs/</a></li>
</ol>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Đôi điều suy nghĩ về thiết kế phần mềm]]></title>
    <link href="http://git@github.com.github.com/blog/2014/06/24/doi-dieu-suy-nghi-ve-thiet-ke-phan-mem/"/>
    <updated>2014-06-24T20:11:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2014/06/24/doi-dieu-suy-nghi-ve-thiet-ke-phan-mem</id>
    <content type="html"><![CDATA[<p>Là một lập trình viên, công việc hàng ngày của bạn là viết code. Viết code cũng như xây dựng vậy, bạn phải đắp từng viên gạch để xây nên một ngôi nhà. Một ngôi nhà có chắc chắn và dễ thay đổi hay không không chỉ dựa vào việc bạn có dùng gạch tốt hay không, mà còn phụ thuộc rất lớn vào nhà thiết kế.</p>
<p>Gần đây tôi có đọc cuốn sách tựa đề <a href="http://www.poodr.com/">‘Practical Object Oriented Design in Ruby’</a> của Sandi Metz, một diễn giả ưa thích của tôi. Cuốn sách dành phần lớn để nói về các kĩ thuật thiết kế phần mềm với đối tượng là ngôn ngữ là Ruby. Tuy nhiên có rất nhiều ý tưởng của tác giả mà không chỉ giới hạn ở Ruby nói chung mà có thể áp dụng cho bất kì ngôn ngữ nào. Trong bài viết này tôi sẽ liệt kê ra một số ý trong cuốn sách mà tôi thấy rất hay và đáng nhớ.</p>
<h1 id="why">Why</h1>
<p>Hãy bắt đầu từ việc <strong>tại sao nên dành thời gian cho việc thiết kế phần mềm</strong>:</p>
<ul>
<li>Việc nên dành một khoảng thời gian tương đối cho việc thiết kế phần mềm một cách nghiêm chỉnh hay không phụ thuộc vào việc: Logic mà bạn sẽ viết có tầm ảnh hưởng như thế nào đến hiện tại và tương lai. Ảnh hưởng đến hiện tại là nhiều khi một tính năng có ngay lập tức là quan trọng hơn cả. Ảnh hưởng đến tương lai là khi mà tính năng mà bạn code một cách cẩu thả sẽ ảnh hưởng vô cùng lớn đến tốc độ phát triển trong tương lai, gây ra các lỗi nghiêm trọng. Hãy nhìn việc thiết kế nghiêm chỉnh hay không như là một <strong>món nợ kĩ thuật</strong> (technical debt). Bạn thiết kế cẩu thả ở thời điểm hiện tại cũng như là bạn vay mượn thời gian ở tương lai vậy. Nếu khoảng thời gian đó không đến thì sẽ không sao, nhưng nếu đằng nào nó cũng xảy đến thì hãy suy nghĩ thật kĩ, bạn có thể đang làm mất thời gian trong tương lai của mình đó :).</li>
</ul>
<h1 id="how">How</h1>
<p>Vậy việc nên dành thời gian nghiêm chỉnh để thiết kế phần mêm là nên, thì chúng ta <strong>nên thiết kế theo phương pháp thế nào</strong>:</p>
<ul>
<li>Từ xưa, việc thiết kế phần mêm thường được thực hiện theo mô hình thác nước (water flow). Mô hình này được tiến hành từ trên cao xuống thấp qua các bước như nhận yêu cầu (requirement), thiết kế kiến trúc (architecture design), thiết kế cơ bản (Basic design).. Tuy nhiên mô hình này đòi hỏi bạn phải nắm rõ 90% yêu cẩu của dự án ngày từ đầu, và việc này gần như là không thể. Do đó gần đây xu hướng là <strong>Agile development</strong>, khi mà việc phát triển chia thành nhiều chặng nhỏ, mỗi chặng sẽ có yêu cầu rõ ràng, và qua mỗi chặng sẽ đánh giá lại tính khả thi của dự án và đưa ra yêu cầu cho chặng tiếp theo. Về cơ bản thì Agile development có tính khả thi hơn cả khi mà không ai có thể đoán trước được sản phẩm đầu ra khi nào sẽ hoàn thành và nên có tính năng ra sao.</li>
</ul>
<h1 id="detail">Detail</h1>
<p>Khi đã quyết được phương pháp thiết kế, việc quan trọng nhất, khó nhất, đó là bắt tay vào làm, bắt tay vào thiết kế chương trình. Để làm được việc này tốt quả thật là rất khó, bởi vì không có một tiêu chuẩn chung nào có thể áp dụng cho mọi yêu cầu, mọi chương trình. Bản thân tôi cũng là một junior software developer, nên tôi luôn gặp khó khăn mỗi khi viết một chương trình từ đầu (from the scratch). Có rất nhiều cách để giảm khó khăn, và tăng khả năng thiết kế của bạn như: nắm vững về các design pattern, nắm vững về domain logic, đọc về kiến trúc của các phần mêm open source nổi tiếng, và sử dụng các “luật” về thiết kế. Ở dưới đây tôi sẽ nói về một số “luật” mà cuốn sách đề cập đến, mà bản thân tôi thấy khá hữu dụng.</p>
<ul>
<li><p>Rule 1: Nền tảng cơ bản của việt thiết kế hướng đối tượng, là việc các đối tượng thao tác với nhau qua việc gửi thông điệp (sending message). Do đó mà việc thiết kế một phần mêm sẽ xoay quanh việc bạn thiết kế sao cho các đối tượng <strong>gửi thông điệp cho nhau thông qua một interface dễ hiểu nhất, rõ ràng nhất</strong>. Hãy luôn hình dung bài toán của bạn sẽ được giải quyết thông qua một loạt các đối tượng gửi rất nhiều loại thông điệp cho nhau, bạn sẽ hình dung được kiến trúc tổng thể của chương trình dễ dàng hơn.</p></li>
<li><p>Rule 2: Single Responsibility: Đây là một luật khá cơ bản trong thiết kế hướng đối tượng. Ai cũng biết về luật này nhưng rất khó để làm theo, nhất là khi khối lượng chương trình tăng lên, và công việc chính của bạn hàng ngày là thêm logic vào một code base đã có. Luật này nói rằng mỗi class chỉ nên đảm trách một vai trò duy nhất. Làm thế nào để đảm bảo tính chất này là một việc khá mơ hồ. Cuốn sách nói rằng với mỗi class, bạn nên có thử <strong>mô tả về nó chỉ trong 1 câu</strong>. Làm được việc này một cách dễ dàng đảm bảo cho việc logic của class đó thống nhất và không bị lai tạp.</p></li>
<li><p>Rule 3: Giảm sự kết dính của code (<strong>Writing loosely coupled code</strong>). Cá nhân tôi thấy rule này là rule quan trọng bậc nhất trong việc thiết kế phần mềm. Muốn đánh giá một phần mềm được thiết kế tồi hay không, hãy nhìn vào việc các logic có bị kết dính(couple) hay phụ thuộc vào nhau hay không. Vậy các bạn sẽ hỏi “kết dính” cụ thể ở đây có nghĩa là gì? Sự kết dính được hình thành khi logic này “phụ thuộc” vào logic khác. Cụ thể hơn ở khái niệm phụ thuộc, đó là việc mà khi mà một trong <strong>logic của class A lại chứa các logic class B</strong>, hay nói cách khác là khi A “biết” quá nhiều về B thì khi đó A sẽ phụ thuộc vào B. Khái niệm này hay được nhắc đến bằng những cụm từ khác như là logic hiding, tức khi thiết kế một class, bạn phải giấu logic của class đó càng nhiều càng tốt. Đó chính là lý do tại sao các ngôn ngữ như java có những keyword như public, private hay protected. Vậy quay lại từ đầu, để giảm sự kết dính của code thì chúng ta phải làm một việc là thiết kế sao cho các class không phụ thuộc vào nhau, và <strong>“biết”</strong> càng ít về nhau càng tốt. Vì vậy mỗi khi bạn viết một đoạn code nào đó, bạn hãy tự đọc lại và xem đoạn code đó có sử dụng quá nhiều logic của một class hay logic bên ngoài không. Để giải quyết cho việc “writing loosely coupled code” thì có khá nhiều kĩ thuật nổi tiếng như là: Inject Dependencies, Isolate Dependencies, Reversing Dependencies mà nếu có dịp tôi sẽ giới thiệu trong một bài viết khác. Ngoài ra còn có một luật rất hữu dụng để giải quyết vấn đề kết dính của code được gọi là <a href="http://c2.com/cgi/wiki?LawOfDemeter">Law of Demeter</a>, các bạn có thể tham khảo ở đường link tôi vừa gửi.</p></li>
</ul>
<h1 id="auto-testing">Auto Testing</h1>
<p>Bản thân việc testing không nằm trong khâu “thiết kế” phần mềm. Auto testing (hay là unit test) chỉ là một bước để đảm bảo rằng logic hiện tại đang có là đang chạy “gần như là” tốt (nói gần như là do unit test không thể đảm bảo 100% việc “chạy tốt” của tất cả mọi logic. Tuy nhiên chỉ việc đảm bảo “gần như” tốt thôi đã cho thấy tầm quan trọng của testing. Có một việc mà bất kì một nhà phát triển nào khi mới bắt đầu viết test, và ngay cả những người đã quá quen việc kĩ thuật TDD (Test Driven Development) cũng sẽ băn khoăn, đó là việc <strong>nên test cái gì</strong>. Trong cuốn sách Sandi đã chia khá rõ ràng về 2 phần mà bạn nên test đó là:</p>
<ul>
<li>Test Incomming Message</li>
<li>Test Ougoing Message</li>
</ul>
<p>Như tôi đã đề cập ở trên, bản chất của việc thiết kế hướng đối tượng xoay quanh việc các class sẽ gửi message cho nhau. Do đó khi test chúng ta cũng nên xoay quanh khái niệm mesage này. Một cách đơn giản, <strong>Incomming Message</strong> tức là các message được “gửi” đến một object X, và test các message đó tương đương với việc bạn sẽ test các interface của object X đó được công khai (public interface) ra ngoài. <strong>Outgoing Message</strong> hơi phức tạp hơn một chút, giả sử bạn có một object X với method Foo, trong Foo sẽ gọi method Bar để thực hiện một logic nào đó. Việc test Foo sẽ gọi Bar đúng N lần, với kết quả nhất định sẽ được gọi là test <strong>Outgoing Message</strong>. Việc chia ra làm 2 loại message cần test sẽ giúp cho bạn nhìn thấy một cách rõ ràng hơn cái gì nên test, và cái gì không nên test.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Ở trên tôi đã trình bày về một số suy nghĩ của cá nhân, và các suy nghĩ của Sandi Metz trong cuốn sách về thiết kế phần mềm. Bản thân việc thiết kế được phần mềm tốt là rất khó, mà mỗi một dạng phần mềm, với mỗi một logic domain lại có một cách giải quyết riêng. Không có một cách giải quyết nào chung cho mọi bài toán cả, nhưng có một số qui tắc chung mà bán có thể áp dụng được cho nhiều bài toán khác nhau. Để nắm được các qui tắc đó đòi hỏi bạn không những phải đọc nhiều, làm nhiều, tích luỹ nhiều kinh nghiệm, mà còn dựa trên việc bạn thất bại nhiều nữa. Tạo ra các phần mềm tồi, khó bảo trì cũng là một bước đệm tốt để bạn rút kinh nghiệm cho các lần sau :).</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Định luật Amdahl]]></title>
    <link href="http://git@github.com.github.com/blog/2014/05/19/dinh-luat-amdahl/"/>
    <updated>2014-05-19T21:35:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2014/05/19/dinh-luat-amdahl</id>
    <content type="html"><![CDATA[<h3 id="giới-thiệu">Giới thiệu</h3>
<p>Có 1 người bạn gần đây bắt đầu lập trình với threads và thiết kế chương trình như sau.</p>
<p>Chương trình có đầu vào là một mảng gồm một số phần tử (khoảng vài chục). Chương trình làm nhiệm vụ duyệt từng phần tử trong mảng, tính toán và trả về kết quả đối với từng phần tử. Bạn mình thiết kế chương trình bằng cách với mỗi phần tử trong mảng, bạn tạo một thread và cho thread thực hiện tính toán với phần tử đó.</p>
<p>Khi mình hỏi tại sao bạn lại thiết kế chương trình như thế thì bạn trả lời: các thread sẽ chạy song song nên về lý thuyết càng nhiều thread thì chương trình chạy càng nhanh!</p>
<p>Mình nhận ra bạn mình có về không biết định luật Amdahl, tuy đơn giản nhưng lại là một định luật rát quan trọng trong tính toán song song. Khi hiểu định luật này chắc chắn bạn sẽ có cái nhìn tổng quan hơn về hệ thống máy tính nói chung, và cụ thể là lập trình multithread nói riêng. Trong bài viết này, mình muốn giới thiệu định luật Amdahl.</p>
<h3 id="định-luật-amdahl">Định luật Amdahl</h3>
<p>Giả sử bạn thay CPU mới có tốc độ cao hơn CPU cũ.</p>
<p><a href="http://en.wikipedia.org/wiki/Amdahl&#39;s_law">Định luật Amdahl</a> nói rằng sự tằng tốc nhờ cải thiện hiệu năng của CPU = thời gian chạy toàn bộ tác vụ khi sử dụng CPU cũ / thời gian chạy toàn bộ tác vụ khi sử dụng CPU mới.</p>
<p>Độ tăng tốc phụ thuộc vào 2 thừa số:</p>
<ul>
<li>Tỉ lệ chương trình có thể cải thiện nhờ CPU mới. Ví dụ chương trình của bạn có 60 tính toán, 20 tính toán có thể được chuyển qua CPU mới (ví dụ CPU mới cung cấp tập lệnh mà CPU không có) như vậy tỉ lệ này là 20/60. Tỉ lệ này luôn nhỏ hơn hoặc bằng 1.</li>
<li>Độ Tăng tốc thu được thu được từ CPU mới. Ví dụ 20 tính toán ở ví dụ trên ở CPU cũ hết 5s, CPU mới hết 2s, độ tăng tốc sẽ là 5/2</li>
</ul>
<p>Thời gian chạy với CPU mới = Thời gian chạy CPU cũ * (1 - tỉ lệ chương trình có thể cải thiện nhờ CPU mới + tỉ lệ chương trình có thể cải thiện nhờ CPU mới / độc tăng tốc thu được từ CPU mới).</p>
<pre><code> Độ tăng tốc tổng thể = Thời gian chạy trên CPU cũ / Thời gian chạy trên CPU mới     
                      = 1 / (1 - tỉ lệ chương trình cải thiện nhờ CPU mới + tỉ lệ chương trình cải thiện nhờ CPU mới / độ tăng tốc thu được từ CPU mới)</code></pre>
<h4 id="ví-dụ-1">Ví dụ 1:</h4>
<p>Bạn thay CPU cho máy chủ web. CPU mới chạy nhanh hơn CPU cũ 10 lần. Chương trình web của bạn giả sử tốn 60% cho SQL (I/O) và 40% tính toán (nhận kết quả từ cơ sở dữ liệu, render page). Hỏi tốc độ cải thiện từ việc thay CPU là bao nhiêu?</p>
<p>Giải:</p>
<ul>
<li>Tỉ lệ chương trình có thể cải thiện nhờ CPU mới = 0.4</li>
<li>Độ tăng tốc = 10</li>
</ul>
<p>Độ tăng tốc tổng thể = 1 / (0.6 + 0.4/10) = 1 / 0.64 = 1.56</p>
<p>Vậy dù rằng CPU có tính nhanh 10 lần thì tốc độ của cả hệ thống chỉ được cải thiện 1.56 lần.</p>
<h4 id="ví-dụ-2">Ví dụ 2:</h4>
<p>Hàm căn bậc hai của một số thực được sử dụng rất nhiều trong đồ hoạ máy tính. Giả sử tính toán căn bậc 2 chiếm 20% tổng thời chạy của thao tác đồ hoạ. Bạn muốn tăng tốc độ của hệ thống đồ hoạ của bạn. Có 2 lựa chọn sau đây:</p>
<ul>
<li>Mua card đồ hoạ mới với chip tính toán nhanh hơn 10 lần.</li>
<li>Tăng tốc độ của các thao tác số thực khác lên 1.6 lần (ngoài thao tác tính căn bậc 2). Giả sử tổng số thao tác số thực là 50% (50% tính toán của bạn liên quan đến số thực).</li>
</ul>
<p>Bạn sẽ đầu tư tiền hay bỏ thời gian và trí não cải thiện các thao tác còn lại.</p>
<p>Giải:</p>
<p>Trường hợp 1, độ tăng tốc = 1 / (0.8 + 0.2 / 10) = 1 / 0.82 = 1.22</p>
<p>Trường hợp 2, độ tăng tốc = 1 / (0.5 + 0.5 / 1.6) = 1.23</p>
<p>Như vậy lựa chọn 2 cho kết quả tốt hơn 1 chút!</p>
<h4 id="quan-sát">Quan sát</h4>
<p>Nếu thử quan sát, bạn sẽ thấy từ công thức Amdahl có thể rút ra là độ tăng tốc phụ thuộc cả vào bản chất bài toán. Nếu tỉ lệ có thể tăng tốc được không cao, việc bạn thêm song song cũng không giải quyết vấn đề gì. Nói cách khác nếu tỉ lệ cải thiện nhờ CPU mới = 0 thì độ tăng tốc tổng thể sẽ là 1 / (1 + 0/10) = 1 tức không thay đổi.</p>
<h4 id="bạn-mình-sai-lầm-ở-đâu">Bạn mình sai lầm ở đâu?</h4>
<p>Quay trở lợi vấn đề của bạn mình, tại sao mình lại nghĩ việc tăng số thread lên không giải quyết được tốc độ?</p>
<p>Giả sử bạn CPU bạn có 4 cores (Ví dụ Corei7 MQ). Chương trình của bạn sẽ được lập lịch bởi kernel. Nếu bạn dùng 2 threads, tại thời điểm CPU được cấp cho process của bạn, 2 cores sẽ được sử dụng để chạy chương trình. Giả sử chương trình bạn dùng CPU để tính toán 50% thời gian, 50% thời gian còn lại được chia đều cho các cores.</p>
<p>Nếu không dùng thread, chương trình của bạn là 1 chương trình liên tục bình thường, tốc độ sẽ cải thiện sẽ là:</p>
<pre><code>Độ tăng tốc = 1 / (0.5 + 0.5 / 1) = 1 (không tăng tí nào!)</code></pre>
<p>Nếu bạn dùng 2 threads:</p>
<p>Độ tăng tốc = 1 / (0.5 + 0.5 / 2) = 1.33 (Tăng 33%!)</p>
<p>Nếu bạn dùng 4 threads:</p>
<pre><code>Độ tăng tốc = 1 / (0.5 + 0.5 / 4) = 1.6 (Tăng 60%!)</code></pre>
<p>Nếu dùng 8 threads, bạn mong chờ tốc độ tăng tốc là 1.7! Sai lầm! Lý do: giống như quan sát ở trên, bản thân việc chia việc cho CPU không phải là việc làm song song được. Nói cách khác CPU chỉ thực hiện được cùng 1 lúc 4 tác vụ. Nếu có nhiều hơn 4 tác vụ, tỉ lệ thực hiện song song (số task thực hiện đồng thời không đổi, nhưng só task phải thực hiện tăng lên) sẽ giảm khiến hiệu năng toàn hệ thống giảm xuống.</p>
<p>Ví dụ ta có 4 threads, thì số task có thể tận dụng được CPU là 100%. Khi ta có 5 threads, số threads có thể tận dụng được CPU sẽ giảm xuống 80%. Ta có thể xem sự thay đổi về hiệu năng so sánh tương đối với trường hợp 1 thread như sau:</p>
<p>4 threads: Độ tăng tốc = 1 / (0 + 1 / 4) = 4</p>
<p>5 threads: Độ tăng tốc = 1 / (0.2 + 0.8 / 4) = 1 / 0.4 = 2.5</p>
<p>Như vậy độ tăng tốc tương đối với trường hợp chỉ sử dụng 1 thread đã giảm từ 4 lần xuông còn 2.5 lần.</p>
<p>Nói cách khác, khi tất cả các cores đã làm việc thì việc tăng threads sẽ chỉ làm tăng thêm phần không thể tính song song, khiến hiệu năng hệ thống giảm. Ngoài ra còn có các chi phí khác mà ta chưa kể đến như: tạo một thread cũng tốn thời gian, bộ nhớ v.v. Nói cách khác việc tăng thread không làm tăng tốc độ chương trình mà nhiều trường hợp còn làm giảm tốc độ chạy. Suy nghĩ lúc đầu của bạn mình là sai lầm!</p>
<h3 id="design-nhờ-định-luật-amdahl">Design nhờ định luật Amdahl</h3>
<p>Như ở ví dụ 2 ở trên, bạn thấy rằng việc mua card đồ hoạ mới không làm tăng hiệu năng tổng thể như việc tối ưu chương trình. Như vậy ta hoàn toàn có thể thay đổi thiết kế chương trình để làm tăng hiệu năng. Ta xét bài toán ví dụ sau đây:</p>
<p>Nhập n. In ra tất cả các số nhỏ hơn n mà là số nguyên tố.</p>
<p>Dưới góc độ thread, ta có 2 cách design hệ thống (Giả định hệ thống có CPU 4 cores)</p>
<ul>
<li>Chia n ra làm 4 phần, mỗi thread thực hiện tìm số nguyên tố trong 1 phần.</li>
<li>Một biến đếm từ 3 -&gt; n, bước nhảy 2, cho mỗi thread đang rảnh lần lượt kiểm tra xem số hiện tại có phải là số nguyên tố không.</li>
</ul>
<p>Bạn sẽ chọn cách nào?</p>
<p>Thoạt nhìn có vẻ 2 cách không có gì khác nhau, nhưng nếu để ý sẽ nhận ra là mật độ số nguyên tố không giống nhau. Nói cách khác nếu làm theo cách 1, sẽ có thread rất nhanh hoàn thành (thread phải xử lý vùng ít số nguyên tố), và có những thread phải làm việc rất vất vả (thread phải xử lý vùng có nhiều số nguyên tố). Nói cách khác cách design 1 có tỉ lệ tính toán có thể cải thiện không cao.</p>
<p>Cách 2 thoạt nhìn có vẻ chậm nhưng lại là cách cho tỉ lệ xử lý song song cao hơn, vì việc xử lý từng số một không phụ thuộc và phân bố của số nguyên tố!</p>
<p>Vậy ta nên thiết kế chương trình theo cách 2!</p>
<h3 id="tổng-kết">Tổng kết</h3>
<p>Bài viết giới thiệu định luật Amdahl, làm rõ ý nghĩa định luật cũng qua 2 ví dụ đồng thời áp dụng định luật Amdahl vào việc thiết kế bài toán đơn giản. Hy vọng qua bài viết bạn hiểu phần nào về đột tăng tốc trong tính toán song song, cũng như biết cách tính toán định lượng để đánh giá các thiết kế (Nhiều khi mua máy mới không hắn đã là tốt!).</p>
<h3 id="quiz">Quiz</h3>
<ol type="1">
<li>Lý giải tại sao các hệ thống lại thiết kế dùng worker queue!</li>
<li>mysql có biến innodb_read_io_threads. Bạn sẽ thiết lập giá trị biến này là bao nhiêu?</li>
</ol>
<h3 id="tài-liệu-tham-khảo">Tài liệu tham khảo</h3>
<ol type="1">
<li><a href="http://en.wikipedia.org/wiki/Amdahl&#39;s_law">Định luật Amdahl</a></li>
<li><a href="http://www.amazon.com/Computer-Architecture-Quantitative-Approach-Edition/dp/0123704901">Computer Architecture, A Quantitative Approach</a></li>
</ol>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Full Text Search từ lý thuyết đến thực tiễn (phần cuối)]]></title>
    <link href="http://git@github.com.github.com/blog/2014/05/09/full-text-search-tu-ly-thuyet-den-thuc-tien-phan-cuoi/"/>
    <updated>2014-05-09T20:00:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2014/05/09/full-text-search-tu-ly-thuyet-den-thuc-tien-phan-cuoi</id>
    <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Trong loạt bài viết trước về Full-text search, mình đã giới thiệu về các khái niệm hết sức cơ bản để làm nên một search-engine:</p>
<ul>
<li><a href="http://ktmt.github.io/blog/2013/10/27/full-text-search-engine/">Phần 1: Giới thiệu cơ bản: Inverted Index</a></li>
<li><a href="http://ktmt.github.io/blog/2013/11/03/full-text-search/">Phần 2: Kỹ thuật Tokenize</a></li>
<li><a href="http://ktmt.github.io/blog/2014/01/04/full-text-search-engine-part-3/">Phần 3: Tìm kiếm sử dụng Boolean Logic</a></li>
<li><a href="http://ktmt.github.io/blog/2014/03/03/full-text-search-tu-khai-niem-den-thuc-tien-phan-4/">Phần 4: Các mô hình Ranking</a></li>
</ul>
<p>Trong bài viết này, để khép lại loạt bài về Full-Text search, mình sẽ hướng dẫn cách làm một search engine hết sức đơn giản sử dụng inverted index. Sample code mình sẽ sử dụng Python để cho dễ hiểu.</p>
<h1 id="code-design">Code Design</h1>
<p>Việc đầu tiên trước khi code chúng ta phải design xem chương trình của chúng ta sẽ gồm những module nào, nhiệm vụ mỗi module ra sao. Để design được thì chúng ta phải làm rõ yêu cầu bài toán và cách giải quyết.</p>
<p>Bài toán trong bài viết này là <strong>xây dụng một search engine</strong>. Để cho đơn giản chúng ta sẽ xây dựng search engine trên command line, dựa trên đầu vào là các documents với format được định nghĩa trước. Trong bài này, mình sẽ sử dụng một sample nhỏ của twitter data như là input documents. Bài toán được tóm tắt lại như dưới đây:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre>
</td>
<td class="code">
<pre><code class=''><span class='line'>Input document:
</span><span class='line'>11  superkarafan  superkarafan  http://twitter.com/superkarafan Yes. He is Kendo Kobayashi. One of great JKamilia RT "@nicolexrina:  Is your twitter DP you? I have seen him in ametalk before!"
</span><span class='line'>12  sao_mama  saomama http://twitter.com/sao_mama @miwauknow  持って行きたいけど、北海道からだから重い(T_T)飲むゼリーとかはダメなのかな。「SMT」のときそうしたんだけど・・・
</span><span class='line'>
</span><span class='line'>Command-line Interface:
</span><span class='line'>./searcher &lt;word&gt;</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Như đã giới thiệu ở loạt bài trước, Full Text Search sử dụng inverted index để lưu lại term và các document chứa term đó:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
</pre>
</td>
<td class="code">
<pre><code class=''><span class='line'>"this" =&gt; {D1, D2, D3, D4}</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Vì vậy chúng ta cần một module để lưu Structure này, chúng ta sẽ gọi module đó là DocID. DocID sẽ có nhiệm vụ là lưu term và một array để chứa id của các documents mà chứa term đó.</p>
<p>Tuy nhiên chỉ lưu đơn thuần dữ liệu inverted index thì sẽ không đủ, chúng ta cần một module để lưu lại các document và ID của chúng để khi có kết quả tìm kiếm chúng ta có thể present kết quả dễ dàng hơn. Module này chúng ta sẽ gọi là Content. Content sẽ lưu lại Id và nội dung của document.</p>
<p>Chúng ta cũng sẽ cần một module để làm nhiệm vụ phân tích document ra thành các term như đã giới thiệu trong <a href="http://ktmt.github.io/blog/2013/11/03/full-text-search/">Bài 2: Kỹ thuật Tokenize</a>. Chúng ta sẽ gọi module này là Tokenizer.</p>
<p>Đã có Tokenizer, DocID, Content, chúng ta cần một module sử dụng cả 3 module này để lưu trữ thông tin được tạo ra từ Tokenizer vào DocID và Content, chúng ta sẽ gọi nó là Indexer.</p>
<p>Cuối cùng, chúng ta cần một module sử dụng boolean logic như đã giới thiệu trong <a href="http://ktmt.github.io/blog/2014/01/04/full-text-search-engine-part-3/">Bài 3</a> để tìm kiếm. Chúng ta sẽ gọi module này là Searcher. Module Searcher sẽ có nhiệm vụ sử dụng tách query ra thành các term, search ra một tập document chứa các term đó, và present ra màn hình.</p>
<p>Tóm tắt lại chúng ta sẽ có các module sau:</p>
<ul>
<li>DocID : Lưu inverted index</li>
<li>Content : Lưu id và dữ liệu thô từ input data</li>
<li>Tokenizer : Bóc tách term</li>
<li>Indexer : Sử dụng tokenizer để lưu thông tin</li>
<li>Searcher : Tìm kiếm</li>
</ul>
<h1 id="implement">Implement</h1>
<p>Để implement bài toán này chúng ta sẽ sử dụng python. Chúng ta cũng cần một thư viện để lưu lại/sử dụng (dump) dữ liệu (inverted index) ra file. Python có một thư viện rất tốt để dump data structure ra file gọi là Pickle.</p>
<p>Sử dụng pickle, chúng ta sẽ lưu dữ liệu ra file và khi load chương trình lên sẽ sử load file vào data structure lên sau. Tách ra làm 2 bước như vậy giúp chúng ta tách biệt được 2 quá trình 1) Index và 2) Search, mà qua đó khi có thêm dữ liệu mới, index file sẽ được update thêm mà không ảnh hưởng đên Searcher.</p>
<p>Dưới đây chúng ta sẽ đi lần lượt vào implementation của từng module. Đầu tiên là DocID.</p>
<h2 id="docid">DocID</h2>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>DocID - DocID.py </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre>
</td>
<td class="code">
<pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">pickle</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DocID</span><span class="p">:</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">docIDTable</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_doc_num</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">docIDTable</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">term</span><span class="p">,</span> <span class="n">docID</span><span class="p">,</span> <span class="n">termPos</span><span class="p">):</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">docIDTable</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>    <span class="n">value</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">docID</span><span class="p">,</span> <span class="n">termPos</span><span class="p">))</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">docIDTable</span><span class="p">[</span><span class="n">term</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">term</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">docIDTable</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">dump</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">file</span><span class="p">):</span>
</span><span class='line'>    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">docIDTable</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">load</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">file</span><span class="p">):</span>
</span><span class='line'>    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">docIDTable</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Ở DocID chúng ta có property docIDTable được lưu dưới dạng dictionary của python, mà trong đó key là term , và value sẽ là array chứa Ids của các document chứa term đó. docIDTable chính là biểu diễn bằng code của inverted index data structure.</p>
<p>Module DocID có các hàm dump và load để lưu dữ liệu ra file và load dữ liệu lên memory. Tiếp theo chúng ta sẽ đến với implemetation của module Content.</p>
<h2 id="content">Content</h2>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>Content - Content.py </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre>
</td>
<td class="code">
<pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">pickle</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Content</span><span class="p">:</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">contentTable</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_content_num</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">contentTable</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">contentTable</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">get_content_num</span><span class="p">()]</span> <span class="o">=</span> <span class="n">content</span>
</span><span class='line'>    <span class="n">current_index</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_content_num</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">current_index</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">contentTable</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Module này chỉ nhằm nhiệm vụ lưu lại dữ liệu của document và Id của document đó. Việc này sẽ được thực hiện cũng qua dictionary của python, với key là Id của document, và value là content của document tương ứng.</p>
<p>Tiếp đến, module Tokenizer sẽ được implement như dưới đây</p>
<h2 id="tokenizer">Tokenizer</h2>
<p>Để cho đơn giản, tokenizer của chúng ta sẽ sử dụng ngram.</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>Tokenizer - Tokenizer.py </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre>
</td>
<td class="code">
<pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Tokenizer</span><span class="p">:</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">engine</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">engine</span> <span class="o">=</span> <span class="n">engine</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">split</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">statement</span><span class="p">,</span> <span class="n">ngram</span><span class="p">):</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">statement</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">ngram</span><span class="p">):</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">statement</span><span class="p">)</span> <span class="o">-</span> <span class="n">ngram</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">statement</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">ngram</span><span class="p">])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<h2 id="indexer">Indexer</h2>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>Indexer - Indexer.py </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre>
</td>
<td class="code">
<pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">docid</span> <span class="kn">import</span> <span class="n">DocID</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">content</span> <span class="kn">import</span> <span class="n">Content</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">tokenizer</span> <span class="kn">import</span> <span class="n">Tokenizer</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Index</span><span class="p">:</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ngram</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">tokenizer</span> <span class="o">=</span> <span class="n">Tokenizer</span><span class="p">(</span><span class="s">&quot;ma&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">docID</span> <span class="o">=</span> <span class="n">DocID</span><span class="p">()</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">Content</span><span class="p">()</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">ngram</span> <span class="o">=</span> <span class="n">ngram</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tokenize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">statement</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">tokenizer</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">statement</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">append_doc</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">token</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">pos</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">docID</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">pos</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set_content</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">statement</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">statement</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">append</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">statement</span><span class="p">):</span>
</span><span class='line'>    <span class="n">tokenized_str</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">tokenize</span><span class="p">(</span><span class="n">statement</span><span class="p">)</span>
</span><span class='line'>    <span class="n">content_id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">set_content</span><span class="p">(</span><span class="n">statement</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">token_index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">tokenized_str</span><span class="p">:</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">append_doc</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">content_id</span><span class="p">,</span> <span class="n">token_index</span><span class="p">)</span>
</span><span class='line'>      <span class="n">token_index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">dump</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">dir</span><span class="p">):</span>
</span><span class='line'>    <span class="n">f_content_name</span> <span class="o">=</span> <span class="s">&quot;content.pickle&quot;</span>
</span><span class='line'>    <span class="n">f_docid_name</span> <span class="o">=</span> <span class="s">&quot;docid.pickle&quot;</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">f_content_name</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">docID</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">f_docid_name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">load</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">dir</span><span class="p">):</span>
</span><span class='line'>    <span class="n">f_content_name</span> <span class="o">=</span> <span class="s">&quot;content.pickle&quot;</span>
</span><span class='line'>    <span class="n">f_docid_name</span> <span class="o">=</span> <span class="s">&quot;docid.pickle&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f_content_name</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">docID</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">f_docid_name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span> <span class="n">column</span><span class="p">):</span>
</span><span class='line'>  <span class="n">indexer</span> <span class="o">=</span> <span class="n">Index</span><span class="p">(</span><span class="n">NGRAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">f</span> <span class="o">=</span> <span class="n">codecs</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="s">&quot;utf-8&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">line</span>
</span><span class='line'>    <span class="n">elems</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">indexer</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">elems</span><span class="p">[</span><span class="n">column</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="n">indexer</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="s">&quot;data/&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;usage: ./indexer.py INPUT_TSV_FILE_PATH TARGET_COLUMN_NUM&quot;</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">filepath</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="n">column</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>  <span class="n">main</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span> <span class="n">column</span><span class="p">)</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Module này có nhiệm vụ là sử dụng Tokenizer để tách input document thành các term sử dụng ngram, tức là mỗi term sẽ có độ dài bằng độ dài ngram. Sau đó sẽ index term đó vào DocID, nếu term đó đã tồn tại thì id của document hiện tại sẽ được add vào docIDTable của docId thông qua hàm “set”.</p>
<p>Kết quả index sẽ được lưu vào file docid.pickle (inverted index data) và content.pickle (content data).</p>
<h2 id="searcher">Searcher</h2>
<p>Module này có nhiệm vụ load dữ liệu đã qua index từ 2 file docid.pickle và content.pickle vào memory, sau đó với mỗi query, Searcher sẽ phân tích query đó thành các term dựa vào tokenizer, tìm kiếm document chứa các term đó dựa vào dữ liệu từ docid, và present kết quả ra màn hình dựa vào dữ liệu lấy được từ content.pickle:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>Searcher - Searcher.py </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre>
</td>
<td class="code">
<pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">docid</span> <span class="kn">import</span> <span class="n">DocID</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">content</span> <span class="kn">import</span> <span class="n">Content</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">tokenizer</span> <span class="kn">import</span> <span class="n">Tokenizer</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">collections</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Searcher</span><span class="p">:</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ngram</span><span class="p">,</span> <span class="nb">dir</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">docID</span> <span class="o">=</span> <span class="n">DocID</span><span class="p">()</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">tokenizer</span> <span class="o">=</span> <span class="n">Tokenizer</span><span class="p">()</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">Content</span><span class="p">()</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">docID</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="nb">dir</span> <span class="o">+</span> <span class="s">&quot;docid.pickle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="nb">dir</span> <span class="o">+</span> <span class="s">&quot;content.pickle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">result</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">statement</span><span class="p">,</span> <span class="n">numOfResult</span><span class="p">):</span>
</span><span class='line'>    <span class="n">tokenized_list</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">tokenizer</span><span class="o">.</span><span class="n">split_query</span><span class="p">(</span><span class="n">statement</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_search</span><span class="p">(</span><span class="n">tokenized_list</span><span class="p">,</span> <span class="n">numOfResult</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">_search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tokenList</span><span class="p">,</span> <span class="n">numOfResult</span><span class="p">):</span>
</span><span class='line'>    <span class="n">token_search_index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">tokenList</span><span class="p">:</span>
</span><span class='line'>      <span class="n">content_ids</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">docID</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="n">content_id</span> <span class="ow">in</span> <span class="n">content_ids</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">result</span><span class="p">[</span><span class="n">content_id</span><span class="p">]:</span>
</span><span class='line'>          <span class="bp">self</span><span class="o">.</span><span class="n">result</span><span class="p">[</span><span class="n">content_id</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>          <span class="bp">self</span><span class="o">.</span><span class="n">result</span><span class="p">[</span><span class="n">content_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="n">content_id</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_result</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="n">sorted_result</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">result</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">sorted_result</span><span class="p">:</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&quot;{}</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">item</span><span class="p">))</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Chúng ta có thể thấy Searcher là một module rất đơn giản sử dụng tokenizer để bóc tách query. Sau khi bóc tách query thành các term, với mỗi term chúng ta sẽ tìm các document chứa term đó dựa vào docID. Mỗi term chúng ta sẽ thu được một chuỗi Ids chứa id của document chứa chúng.</p>
<p>Để kết hợp các các chuỗi ids tìm được thành kết quả cuối cùng, chúng ta làm một mô hình ranking rất đơn giản, document nào chứa nhiều term hơn thì hiển thị trước. Logic này được thực hiện dựa vào tạo một dictionary chứa kết quả (self.result) , cứ mỗi khi tìm được document nào thì ta cộng kết quả thêm 1.</p>
<p>Kết quả cuối cùng sẽ được in ra màn hình thông qua hàm print_result. Như vậy chúng ta đã implement xong một search engine hết sức đơn giản.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Thông qua chuỗi bài viết, chúng ta đã hiểu được phần nào việc tạo ra một search engine. Để có một search engine thành công, như google hay yahoo, không những performance phải được hoàn thiện ở mức tối đa với khối lượng dữ liệu rất lớn, thì việc có một mô hình ranking thích hợp cũng vô cùng quan trọng. Hy vọng chuỗi bài viết đã đem đến cho các bạn cái nhìn cơ bản nhất về search engine.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Một số ví dụ về quy hoạch động]]></title>
    <link href="http://git@github.com.github.com/blog/2014/04/19/mot-so-vi-du-ve-quy-hoach-dong/"/>
    <updated>2014-04-19T06:47:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2014/04/19/mot-so-vi-du-ve-quy-hoach-dong</id>
    <content type="html"><![CDATA[<h1 id="giới-thiệu">Giới thiệu</h1>
<p>Quy hoạch động là một trong những kĩ thuật lập trình cơ bản được sử dụng khá nhiều trong các cuộc thi lập trình. Ý tưởng về cơ bản rất đơn giản: để giải một bài toán, chúng ta đi giải các bài toán con, sau đó tổng hợp các lời giải đó lại thành lời giải của bài toán ban đầu. Trong một số bài toán, nếu không sử dụng quy hoạch động, rất nhiều bài toán con sẽ bị tính lặp đi lặp lại. Quy hoạch động sẽ tìm cách để giải mỗi bài toán con <strong>đúng 1 lần</strong> để giảm thiểu số lần tính toán. Một khi lời giải cho một bài toán con đã có, chúng ta lưu lại và lần tiếp theo cần lời giải đó, chúng ta chỉ cần tìm lại.</p>
<p>Quy hoạch động được sử dụng rất nhiều trong các thuật toán khác, ví dụ như: thuật toán Dijkstra tìm đường đi ngắn nhất, Knapsack, Nhân ma trận theo chuỗi (Chain matrix multiplication), thuật toán Floyd-Warshall tìm đường đi ngắn nhất giữa mọi cặp đỉnh trong đồ thị (đã có bài viết giới thiệu về thuật toán này).</p>
<p>Trong bài viết này, chúng ta sẽ cùng đi qua một số ví dụ sử dụng quy hoạch động trên TopCoder.</p>
<h1 id="ví-dụ-1-zigzag">Ví dụ 1: ZigZag</h1>
<blockquote>
<p>A sequence of numbers is called a zig-zag sequence if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a zig-zag sequence.</p>
<p>For example, 1,7,4,9,2,5 is a zig-zag sequence because the differences (6,-3,5,-7,3) are alternately positive and negative. In contrast, 1,4,7,2,5 and 1,7,4,5,5 are not zig-zag sequences, the first because its first two differences are positive and the second because its last difference is zero.</p>
<p>Given a sequence of integers, sequence, return the length of the longest subsequence of sequence that is a zig-zag sequence. A subsequence is obtained by deleting some number of elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.</p>
<ol start="0" type="1">
<li></li>
</ol>
<p>{ 1, 7, 4, 9, 2, 5 }</p>
<p>Returns: 6</p>
<p>The entire sequence is a zig-zag sequence.</p>
<ol type="1">
<li></li>
</ol>
<p>{ 1, 17, 5, 10, 13, 15, 10, 5, 16, 8 }</p>
<p>Returns: 7</p>
<p>There are several subsequences that achieve this length. One is 1,17,10,13,10,16,8.</p>
<ol start="2" type="1">
<li></li>
</ol>
<p>{ 44 }</p>
<p>Returns: 1</p>
<ol start="3" type="1">
<li></li>
</ol>
<p>{ 1, 2, 3, 4, 5, 6, 7, 8, 9 }</p>
<p>Returns: 2</p>
<ol start="4" type="1">
<li></li>
</ol>
<p>{ 70, 55, 13, 2, 99, 2, 80, 80, 80, 80, 100, 19, 7, 5, 5, 5, 1000, 32, 32 }</p>
<p>Returns: 8</p>
<ol start="5" type="1">
<li></li>
</ol>
<p>{ 374, 40, 854, 203, 203, 156, 362, 279, 812, 955, 600, 947, 978, 46, 100, 953, 670, 862, 568, 188, 67, 669, 810, 704, 52, 861, 49, 640, 370, 908, 477, 245, 413, 109, 659, 401, 483, 308, 609, 120, 249, 22, 176, 279, 23, 22, 617, 462, 459, 244 }</p>
<p>Returns: 36</p>
</blockquote>
<p>Bài toán này là một dạng của bài toán tìm xâu dài nhất thoả mãn một điều kiện nào đó, ví dụ như tăng dần, giảm dần… Cách làm quy hoạch động là như sau: duyệt từ trái sang phải, tìm xâu dài nhất kết thúc tại phần tử đang xét. Xâu dài nhất này được tính dựa trên các bài toán con phía trước:</p>
<ul>
<li><p>Xem có thể thêm phần tử hiện tại vào các xâu dài nhất két thúc bằng các phần tử phía trước không.</p></li>
<li><p>Chọn xâu dài nhất có thể trong các xâu thoả mãn.</p></li>
</ul>
<p>Sau đây là đoạn code:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>ZigZag.cpp </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre>
</td>
<td class="code">
<pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ZigZag</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">longestZigZag</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">sequence</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">ZigZag</span><span class="o">::</span><span class="n">longestZigZag</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">sequence</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sequence</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">f</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">isUp</span><span class="p">[</span><span class="n">n</span><span class="p">];</span> <span class="c1">// check if in the longest sequence up to i-th member, we are going up or down</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="c1">//special case</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">){</span>
</span><span class='line'>              <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>              <span class="n">isUp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sequence</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">sequence</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">isUp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="n">sequence</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">sequence</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">f</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                  <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">f</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">isUp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">isUp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="kc">false</span> <span class="o">&amp;&amp;</span> <span class="n">sequence</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">sequence</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">f</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                  <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">f</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">isUp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">f</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<h1 id="ví-dụ-2-avoidroads">Ví dụ 2: AvoidRoads</h1>
<blockquote>
<p>In the city, roads are arranged in a grid pattern. Each point on the grid represents a corner where two blocks meet. The points are connected by line segments which represent the various street blocks. Using the cartesian coordinate system, we can assign a pair of integers to each corner as shown below.</p>
</blockquote>
<p><img src="http://git@github.com.github.com/images/AvoidPic1.GIF"></p>
<blockquote>
<p>You are standing at the corner with coordinates 0,0. Your destination is at corner width,height. You will return the number of distinct paths that lead to your destination. Each path must use exactly width+height blocks. In addition, the city has declared certain street blocks untraversable. These blocks may not be a part of any path. You will be given a String[] bad describing which blocks are bad. If (quotes for clarity) “a b c d” is an element of bad, it means the block from corner a,b to corner c,d is untraversable. For example, let’s say width = 6 length = 6 bad = {“0 0 0 1”,“6 6 5 6”} The picture below shows the grid, with untraversable blocks darkened in black. A sample path has been highlighted in red.</p>
</blockquote>
<p><img src="http://git@github.com.github.com/images/AvoidPic2.GIF"></p>
<blockquote>
<p>Examples</p>
<ol start="0" type="1">
<li></li>
</ol>
<p>6</p>
<p>6</p>
<p>{“0 0 0 1”,“6 6 5 6”}</p>
<p>Returns: 252</p>
<p>Example from above.</p>
<ol type="1">
<li></li>
</ol>
<p>1</p>
<p>1</p>
<p>{}</p>
<p>Returns: 2</p>
<p>Four blocks aranged in a square. Only 2 paths allowed.</p>
<ol start="2" type="1">
<li></li>
</ol>
<p>35</p>
<p>31</p>
<p>{}</p>
<p>Returns: 6406484391866534976</p>
<p>Big number.</p>
<ol start="3" type="1">
<li></li>
</ol>
<p>2</p>
<p>2</p>
<p>{“0 0 1 0”, “1 2 2 2”, “1 1 2 1”}</p>
<p>Returns: 0</p>
</blockquote>
<p>Vẫn trên tư tưởng quy hoạch động, dễ thấy ta cần duyệt từ đỉnh (0,0). Số lượng đường đi đến đỉnh (i,j) sẽ dựa trên số lượng đường đi đến đỉnh (i-1,j) và đỉnh (i, j-1). Chú ý nếu đường đi từ (i-1,j) hoặc (i, j-1) đến (i,j) bị chặn thì ta sẽ không tính đoạn đường đó nữa.</p>
<p>Sau đây là đoạn code (C++):</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>AvoidRoads.cpp </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre>
</td>
<td class="code">
<pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AvoidRoads</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">numWays</span><span class="p">(</span><span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">bad</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">long</span> <span class="n">AvoidRoads</span><span class="o">::</span><span class="n">numWays</span><span class="p">(</span><span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">bad</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">badVertical</span><span class="p">[</span><span class="n">width</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">height</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">badHorizontal</span><span class="p">[</span><span class="n">width</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">height</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">width</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">height</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="n">badVertical</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>          <span class="n">badHorizontal</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="n">bad</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">stringstream</span> <span class="n">temp</span><span class="p">(</span><span class="n">bad</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span>  <span class="n">t</span><span class="p">;</span>
</span><span class='line'>      <span class="n">temp</span> <span class="o">&gt;&gt;</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">y</span> <span class="o">&gt;&gt;</span> <span class="n">z</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">z</span> <span class="o">-</span> <span class="n">x</span><span class="p">)</span> <span class="o">==</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>          <span class="n">badHorizontal</span><span class="p">[</span><span class="n">min</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">z</span><span class="p">)][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>          <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;bad Horizontal at: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">min</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">z</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">y</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">t</span> <span class="o">-</span> <span class="n">y</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>          <span class="n">badVertical</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">min</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">t</span><span class="p">)]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>          <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;bad Vertical at: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">min</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">t</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">long</span> <span class="n">res</span> <span class="p">[</span><span class="n">width</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">height</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span> <span class="n">width</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">){</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">height</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="c1">//don&#39;t override the base case</span>
</span><span class='line'>          <span class="k">if</span><span class="p">((</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)){</span>
</span><span class='line'>              <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="kt">long</span> <span class="n">temp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">badHorizontal</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">temp</span> <span class="o">+=</span> <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">j</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">badVertical</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]){</span>
</span><span class='line'>              <span class="n">temp</span> <span class="o">+=</span> <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;temp = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">temp</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>          <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Ways to (&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;,&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">j</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;) is: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">res</span><span class="p">[</span><span class="n">width</span><span class="p">][</span><span class="n">height</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<h1 id="kết-luận">Kết luận</h1>
<p>Hi vọng qua 2 ví dụ trên, bạn đã phần nào có được tư tưởng quy hoạch động. Về cơ bản, chúng ta chỉ cần đi đến được cách tính bài toán hiện tại dựa vào các bài toán con trước đó là 90% công việc đã xong. Hãy luyện tập thêm để chiến đấu tại TopCoder!</p>
<h1 id="tham-khảo">Tham khảo</h1>
<ol type="1">
<li><a href="http://community.topcoder.com/tc?module=Static&amp;d1=tutorials&amp;d2=dynProg">TopCoder Graph Tutorial</a></li>
<li><a href="http://community.topcoder.com/stat?c=problem_statement&amp;pm=1259&amp;rd=4493">ZigZag</a></li>
<li><a href="http://community.topcoder.com/stat?c=problem_statement&amp;pm=1889&amp;rd=4709">AvoidRoad</a></li>
</ol>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thuật toán Floyd-Warshall để duyệt đồ thị]]></title>
    <link href="http://git@github.com.github.com/blog/2014/03/22/thuat-toan-floyd-warshall-de-duyet-do-thi/"/>
    <updated>2014-03-22T21:45:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2014/03/22/thuat-toan-floyd-warshall-de-duyet-do-thi</id>
    <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Khi nhắc đến các thuật toán duyệt đồ thị, có thể bạn đã biết (và đã từng implement) Depth-First Search, Breadth-First Search, hoặc Dijkstra. Xin nhắc lại về ý nghĩa của từng thuật toán, đứng ở khía cạnh bài toán tìm đường đi ngắn nhất. DFS dùng để giải các bài toán mà chúng ta muốn tìm được lời giải (không nhất thiết phải là quãng đường ngắn nhất), hoặc ta muốn thăm tất cả các đỉnh của đồ thị. BFS cũng để duyệt các đỉnh của đồ thị, nhưng có một tính chất quan trọng là: nếu tất cả các cạnh <em>không có trọng số</em>, lần đầu tiên một đỉnh được thăm, ta có ngay đường đi ngắn nhất đến đỉnh đó. Bây giờ đến thuật toán Disjkstra, đây là thuật toán nổi tiếng dùng để tìm đường đi ngắn nhất từ một đỉnh cho trước đến các đỉnh còn lại, trong một đồ thị có các cạnh <em>có trọng số không âm</em>. Như vậy, Dijkstra đã tiến hơn một bước so với BFS.</p>
<p>Đó là sơ qua về ba thuật toán mà có thể mọi người đều đã biết. Trong bài viết này, tôi xin giới thiệu một thuật toán ít biết đến hơn để duyệt đồ thị, đó là Floyd-Warshall.</p>
<h1 id="thuật-toán-floyd-warshall-là-gì">Thuật toán Floyd-Warshall là gì?</h1>
<p>Nếu như Dijkstra giải quyết bài toán tìm đường đi ngắn nhất từ <em>một đỉnh cho trước</em> đến mọi đỉnh khác trong đồ thị, thì Floyd-Warshall sẽ tìm đường đi ngắn nhất <em>giữa mọi đỉnh</em> sau một lần chạy thuật toán. Một tính chất nữa là Floyd-Warshall có thể chạy trên đồ thị có các cạnh có trọng số <em>có thể âm</em>, tức là không bị giới hạn như Dijkstra. Tuy nhiên, lưu ý là trong đồ thị không được có vòng (cycle) nào có tổng các cạnh là âm, nếu có vòng như vậy ta không thể tìm được đường đi ngắn nhất (mỗi lần đi qua vòng này độ dài quãng đường lại giảm, nên ta có thể đi vô hạn lần)</p>
<p>Thuật toán Floyd-Warshall so sánh tất cả các đường đi có thể giữa từng cặp đỉnh. Nó là một dạng của quy hoạch động (Dynamic Programming). Đặt hàm adj(i,j,k) là đường đi ngắn nhất từ i đến j, chỉ dùng các đỉnh trong tập {1,2,…,k}. Giả sử ta muốn tính adj{i,j,k+1}. Với mỗi cặp đỉnh i và j, đường đi ngắn nhất có thể là: (1) đường đi chỉ sử dụng các đỉnh trong tập {1,…k} hoặc (2) đường đi từ i đến k+1 rồi từ k+1 đến j, cũng chỉ sử dụng các đỉnh trong tập {1,…k}. Do vậy:</p>
<p>Trường hợp cơ bản: adj(i,j,0) = w(i,j)</p>
<p>Đệ quy: adj(i,j,k+1) = min{adj(i,j,k), adj(i,k+1, k) + adj(k+1, j, k)}</p>
<p>Đây là đoạn pseudocode của Floyd-Warshall (có một chút thay đổi, nhưng ý tưởng là như nhau)</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>pseudo.c </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre>
</td>
<td class="code">
<pre><code class='c'><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="mi">1</span> <span class="n">to</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span> <span class="n">to</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">1</span> <span class="n">to</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>          <span class="n">adj</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">adj</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">adj</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">+</span> <span class="n">adj</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Dễ thấy độ phức tạp thuật toán là O(n^3) với n là số đỉnh của đồ thị.</p>
<h1 id="thuật-toán-floyd-warshall-dùng-cho-tìm-tính-chất-kết-nối">Thuật toán Floyd-Warshall dùng cho tìm tính chất kết nối</h1>
<p>Tư tưởng của thuật toán Floyd-Warshall trong việc tìm đường đi ngắn nhất có thể áp dụng vào các bài toán dạng tìm tính chất kết nối giữa các đỉnh. Tôi xin lấy một ví dụ, đó là bài <a href="http://community.topcoder.com/stat?c=problem_statement&amp;pm=2356&amp;rd=4740">TopCoder SRM 184, Div 2, 1000-point problem</a></p>
<p>Đề bài như sau (xin chịu khó đọc hiểu đề bài)</p>
<blockquote>
<p>You are arranging a weird game for a team building exercise. In this game there are certain locations that people can stand at, and from each location there are paths that lead to other locations, but there are not necessarily paths that lead directly back. You have everything set up, but you need to know two important numbers. There might be some locations from which every other location can be reached. There might also be locations that can be reached from every other location. You need to know how many of each of these there are.</p>
<p>Create a class TeamBuilder with a method specialLocations that takes a String[] paths that describes the way the locations have been connected, and returns a int[] with exactly two elements, the first one is the number of locations that can reach all other locations, and the second one is the number of locations that are reachable by all other locations. Each element of paths will be a String containing as many characters as there are elements in paths. The i-th element of paths (beginning with the 0-th element) will contain a ‘1’ (all quotes are for clarity only) in position j if there is a path that leads directly from i to j, and a ‘0’ if there is not a path that leads directly from i to j.</p>
<p><strong>Examples</strong></p>
<ul>
<li><p>{“010”,“000”,“110”} Returns: { 1, 1 } Locations 0 and 2 can both reach location 1, and location 2 can reach both of the other locations, so we return {1,1}.</p></li>
<li><p>{“0010”,“1000”,“1100”,“1000”} Returns: { 1, 3 } Only location 3 is able to reach all of the other locations, but it must take more than one path to reach locations 1 and 2. Locations 0, 1, and 2 are reachable by all other locations. The method returns {1,3}.</p></li>
<li><p>{“01000”,“00100”,“00010”,“00001”,“10000”} Returns: { 5, 5 } Each location can reach one other, and the last one can reach the first, so all of them can reach all of the others.</p></li>
<li><p>{“0110000”,“1000100”,“0000001”,“0010000”,“0110000”,“1000010”,“0001000”} Returns: { 1, 3 }</p></li>
</ul>
</blockquote>
<p><em>Solution</em> Về cơ bản, bài này cần tìm số lượng các đỉnh mà từ đó có thể đi đến tất cả các đỉnh khác, và số lượng các đỉnh mà các đỉnh khác đều có thể đi tới. Một ví dụ rất tốt để áp dụng thuật toán Floyd-Warshall tìm tính chất kết nối giữa 2 đỉnh bất kì.</p>
<p>Trong bài này, chúng ta chỉ cần phải kiểm tra xem có đường đi từ đỉnh i đến đỉnh j trong đồ thị hay không. Chúng ta sẽ áp dụng thuật toán Floyd-Warshall trên, nhưng có thay đổi một chút trong dòng xử lý bên trong vòng lặp. Về cơ bản, chúng ta vẫn sử dụng ý tưởng là update thông tin giữa 2 đỉnh i và j, mỗi khi ta có thêm thông tin giữa đỉnh i và đỉnh k, đỉnh k và đỉnh j, với k là một đỉnh khác i và j. Nhưng ta không cập nhật thông tin về * đường đi ngắn nhất* nữa, mà ta cập nhật thông tin về <em>có hay không đường đi từ i đến j</em>. Với mỗi cặp đỉnh i và j chưa có kết nối, ta sẽ kiểm tra xem nếu có đường đi từ i đến k và từ k đến j, thì ta cập nhật là có đường đi từ i đến j.</p>
<p>Sau đây là đoạn code C++ minh hoạ:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>TeamBuilder.cpp </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre>
</td>
<td class="code">
<pre><code class='cpp'><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">TeamBuilder</span><span class="o">::</span><span class="n">specialLocations</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">paths</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="n">paths</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">adj</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">row</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="n">row</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">adj</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">row</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Floyd-Warshall</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>              <span class="c1">//i,j,k must be different</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">==</span><span class="n">j</span> <span class="o">||</span> <span class="n">j</span> <span class="o">==</span> <span class="n">k</span> <span class="o">||</span> <span class="n">k</span><span class="o">==</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>              <span class="c1">//only update those no-paths</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="n">adj</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                  <span class="k">if</span><span class="p">(</span><span class="n">adj</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">!=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">adj</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                      <span class="n">adj</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//find number of locations that can reach all other locations</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">firstNum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">canReachAll</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">j</span><span class="o">==</span><span class="n">i</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">adj</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>              <span class="n">canReachAll</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">canReachAll</span><span class="p">)</span>
</span><span class='line'>          <span class="n">firstNum</span> <span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//find number of locations that are reachable from other locations</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">secondNum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">canBeReachedFromAll</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">j</span><span class="o">!=</span><span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">adj</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>              <span class="n">canBeReachedFromAll</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">canBeReachedFromAll</span><span class="p">)</span>
</span><span class='line'>          <span class="n">secondNum</span> <span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'>  <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">firstNum</span><span class="p">);</span>
</span><span class='line'>  <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">secondNum</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<h1 id="tham-khảo">Tham khảo:</h1>
<ol type="1">
<li><a href="http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm">Floyd-Warshall Algorithm</a></li>
<li><a href="http://community.topcoder.com/tc?module=Static&amp;d1=tutorials&amp;d2=graphsDataStrucs3">TopCoder Graph Tutorial</a></li>
</ol>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Full Text Search từ khái niệm đến thực tiễn (Phần 4)]]></title>
    <link href="http://git@github.com.github.com/blog/2014/03/03/full-text-search-tu-khai-niem-den-thuc-tien-phan-4/"/>
    <updated>2014-03-03T01:43:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2014/03/03/full-text-search-tu-khai-niem-den-thuc-tien-phan-4</id>
    <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Trong <a href="http://ktmt.github.io/blog/2014/01/04/full-text-search-engine-part-3/">phần 3</a>, các bạn đã được tìm hiểu về việc sử dụng Boolean Logic để tìm ra các Document chứa các term trong query cần tìm kiếm. Vậy sau khi tìm được các Document thích hợp rồi thì chỉ việc trả lại cho người dùng, hay đưa lên màn hình? Bài toán sẽ rất đơn giản khi chỉ có 5, 10 kết quả, nhưng khi kết quả lên đến hàng trăm nghìn, thì mọi việc sẽ không đơn giản là trả lại kết quả nữa. Lúc đó sẽ có vấn đề mới cần giải quyết, đó là <strong>đưa kết quả nào lên trước</strong>, hay chính là bài toán về <strong>Ranking</strong></p>
<p>Việc Ranking trong Full Text Search thông thường sẽ được thực hiện thông qua việc <strong>tính điểm</strong> các Document được tìm thấy, rồi Rank dựa vào điểm số tính được. Việc tính điểm thế nào sẽ được thực hiện thông qua các công thức, hay thuật toán, mà mình gọi chung là <strong>Ranking Model</strong></p>
<h1 id="ranking-model">Ranking Model</h1>
<p>Trong bài viết về <a href="http://ktmt.github.io/blog/2013/08/06/a-little-bit-about-news-ranking/">Ranking news</a>, mình đã nói về việc giải quyết một bài toán gần tương tự. Tuy nhiên bài toán lần này cần giải quyết khác một chút, đó là việc Ranking sẽ phải thực hiện dựa trên mối quan hệ giữa “query terms” và “document”.</p>
<p>Ranking Model được chia làm 3 loại chính: <strong>Static, Dynamic, Machine Learning</strong>. Dưới đây mình sẽ giới thiệu lần lượt về mỗi loại này.</p>
<h1 id="static">Static</h1>
<p>Static ở đây có nghĩa là, Ranking Model thuộc loại này sẽ <strong>không phụ thuộc</strong> vào mối quan hệ ngữ nghĩa giữa “query term” và “document”. Tại sao không phụ thuộc vào “query term” mà vẫn ranking được? Việc này được giải thích dựa theo quan điểm khoa học là <code>độ quan trọng của document phụ thuộc vào mối quan hệ giữa các document với nhau</code>.</p>
<p>Chúng ta sẽ đi vào cụ thể một Ranking Model rất nổi tiếng trong loại này, đó chính là <a href="http://en.wikipedia.org/wiki/PageRank">PageRank</a>. PageRank là thuật toán đời đầu của Google, sử dụng chủ yếu cho web page, khi mà chúng có thể “link” được đến nhau. Idea của PageRank là “Page nào càng được nhiều link tới, và được link tới bởi các page càng quan trọng, thì score càng cao”. Để tính toán được PageRank, thì chúng ta chỉ cần sử dụng WebCrawler để crawl được mối quan hệ “link” giữa tất cả các trang web, và tạo được một Directed Graph của chúng.</p>
<p>Chính vì cách tính theo kiểu, tạo được Graph xong là có score, nên mô hình dạng này được gọi là “Static”.</p>
<p>Ngoài PageRank ra còn có một số thuật toán khác gần tương tự như <a href="http://en.wikipedia.org/wiki/HITS_algorithm">HITS</a> đã từng được sử dụng trong Yahoo! trong thời gian đầu.</p>
<h1 id="dynamic">Dynamic</h1>
<p>Ranking Model thuộc dạng Dynamic dựa chủ yếu vào <strong>Mối quan hệ</strong> giữa “query term” và “document”. Có rất nhiều thuật toán thuộc dạng này, có thuật toán dựa vào tần suất xuất hiện của “query term” trong document, có thuật toán lại dựa vào các đặc tính ngữ nghĩa (semantic) của query term , có thuật toán lại sử dụng những quan sát mang tính con người như thứ tự xuất hiện các từ trong “query term” và thứ tự xuất hiện trong “document”.</p>
<p>Một trong những thuật toán được sử dụng nhiều nhất là <a href="http://en.wikipedia.org/wiki/Tf%E2%80%93idf">TF-IDF</a> (Term Frequency Inverse Document Frequency). Thuật toán này dựa vào Idea là “query term” xuất hiện càng nhiều trong document, document sẽ có điểm càng cao.</p>
<p>Thuật toán này được biểu diễn dưới công thức sau <span class="math">\[TF-IDF(t, d, D) = TF(t, d) * IDF (t, D)\]</span> Ở đây t là query term, d là document cần được score, và D là tập hợp “tất cả” các documents. Trong đó thì: <span class="math">\[TF(t, d) = frequency(t, d)\]</span> <span class="math">\[IDF(t, D) = log{N \over \|\{d \in D : t \in d\}\|}\]</span></p>
<p>Một cách đơn giản thì:</p>
<ul>
<li>TF : tần suất xuất hiện của term t trong document d</li>
<li>IDF : chỉ số này biểu hiện cho tần suất xuất hiện của term t trong toàn bộ các documents. t xuất hiện càng nhiều, chỉ số càng thấp (vì xuất hiện quá nhiều đồng nghĩa với độ quan trọng rất thấp)</li>
</ul>
<p>Công thức của TF-IDF đã phối hợp một cách rất hợp lý giữa tần suất của term và ý nghĩa/độ quan trọng của term đó.</p>
<p>Trong thực tế thì người ta hay sử dụng thuật toán <a href="http://en.wikipedia.org/wiki/Okapi_BM25">Okapi BM25</a> hay gọi tắt là BM25, là một mở rộng của TF-IDF, nhưng thêm một vài weight factor hợp lý.</p>
<h1 id="machine-learning">Machine Learning</h1>
<p>Ngoài việc sử dụng các mối quan hệ đơn giản giừa query term và document, hay giứa document với nhau, thì gần đây việc sử dụng học máy (Machine Learning) trong Ranking cũng đang trở nên rất phổ biến. Để nói về Machine Learning thì không gian bài viết này có lẽ là không đủ, mình sẽ nói về ý tưởng của Model này.</p>
<p>Idea của việc sử dụng Machine Learning trong ranking là chúng ta sẽ sử dụng một mô hình xác suất để tính toán. Cụ thể hơn là chúng ta sẽ sử dụng supervised learning, nghĩa là chúng ta sẽ có input là một tập dữ liệu X để training, một model M ban đầu, một hàm error để so sánh kết quả output X’ có được từ việc áp dụng model M vào query term, và một hàm boost để từ kêt quả của hàm error chúng ta có thể tính lại được model M. Việc này được lặp đi lặp lại mỗi lần có query, hoặc lặp lại một cách định kỳ (1 ngày 1 lần, 1 tháng 1 lần..) để model M luôn luôn được cải thiện.</p>
<p>Thuật toán gần đây được sử dụng khá nhiều trong Ranking model chính là Gradient Boosting Decision Tree mà các bạn có thể tham khảo ở <a href="https://www.cse.cuhk.edu.hk/irwin.king/_media/presentations/gbdt-tom.pdf">đây</a></p>
<h1 id="conclusion">Conclusion</h1>
<p>Bài viết đã giới thiệu về 3 mô hình chính dùng để Ranking kết quả tìm kiếm trong Full Text Search. Trong thực tế thì các công ty lớn nhưn Google, Yahoo, MS sẽ không có một mô hình cố định nào cả, mà sẽ dựa trên các kết quả có từ người dùng để liên tục cải thiện. Không có một mô hinh nào là “đúng” hay “không đúng” cả, mà để đánh giá Ranking Model chúng ta sẽ phải dựa trên thông kê người dùng (như click rate, view time…). Việc hiểu rõ Ranking Model sẽ giúp chúng ta build được một search engine tốt cho service của mình, đông thời cũng giúp ích rất nhiều cho việc SEO (Search Engine Optimization).</p>
<p>Tài liệu tham khảo: - <a href="http://jmlr.org/proceedings/papers/v14/chapelle11a/chapelle11a.pdf">Yahoo! Learning to Rank Challenge Overview</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#include, #import, @import (clang modules)]]></title>
    <link href="http://git@github.com.github.com/blog/2014/01/06/clang-modules/"/>
    <updated>2014-01-06T04:14:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2014/01/06/clang-modules</id>
    <content type="html"><![CDATA[<h1 id="mở-đầu">Mở đầu</h1>
<p>Happy New Year! Chúc mọi người năm mới vui vẻ, hạnh phúc.</p>
<p>Như các bạn cũng biết gần đây XCode5 cùng iOS7 đã được giới thiệu. Đi cùng XCode5 là feature mới “modules” của Clang, một giải pháp nhằm giải quyết một số vấn đề như tăng tốc độ compile source code của ứng dụng. Hôm nay mình sẽ giới thiệu qua về tính năng modules này. Hiện tại thì modules đã có thể sử dụng trong C và Objective-C trên môi trường iOS7 hoặc MacOSX 10.9. Các đoạn code dưới đây tuy mình viết bằng Objective-C nhưng cũng gần như tương tự với C. Để hiểu về modules thì trước tiên mình sẽ giải thích lần lượt về <code>#include</code>, <code>#import</code>, và pre-compiled headers (PCH), sau đó là về modules.</p>
<h2 id="include">#include</h2>
<p>Khi chúng ta include 1 file header thì tại giai đoạn preprocessing của quá trình compile, compiler sẽ copy nội dung của file header này và paste vào dòng #include. Và tất nhiên quá trình copy/paste này là đệ quy cho đến khi copy xong tất cả file header mà nó include và các file header khác được include tại các file nó include. (hơi xoắn)</p>
<p>Ví dụ với chương trình helloworld quen thuộc như dưới đây:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>helloworld.m </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre>
</td>
<td class="code">
<pre><code class='objc'><span class='line'><span class="cp">#include &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="n">NSLog</span><span class="p">(</span><span class="err">@“</span><span class="n">Hello</span> <span class="n">world</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Chúng ta có thể chạy preprocessor để xem file sinh ra sau giai đoạn này bằng lệnh <code>clang -E helloworld.m | less</code>.</p>
<p>Nhìn vào kết quả output chúng ta có thể thấy tới hơn 92000 dòng là của Foundation.h (và của các file header mà Foundation.h include), chỉ 8 dòng cuối là code của chúng ta.</p>
<p>Với việc sử dụng <code>#include</code> tồn tại vấn đề gọi là recursive include. Ví dụ :</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>FirstFile.h </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre>
</td>
<td class="code">
<pre><code class='objc'><span class='line'><span class="cp">#include &quot;SecondFile.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Some code */</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>SecondFile.h </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre>
</td>
<td class="code">
<pre><code class='objc'><span class='line'><span class="cp">#include &quot;FirstFile.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Some other code */</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Khi đấy preprocessor sẽ duyệt file FirstFile.h và copy nội dung của SecondFile.h vào FirstFile.h. Khi duyệt file SecondFile.h lại copy/paste nội dung của file FirstFile.h. Vấn đề này được gọi là recursive include.</p>
<h2 id="import">#import</h2>
<p>Trong Objective-C để tránh vấn đề recursive include như trên thì chúng ta thường dùng <code>#import</code>. Khi dùng <code>#import</code> thì trước khi include 1 file header, preprocessor sẽ kiểm tra xem file đấy đã được include chưa, nếu đã include rồi thì sẽ không include nữa. Tương tự trong C chúng ta cũng tránh recursive include bằng việc kiểm tra file header đã được include chưa như sau:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre>
</td>
<td class="code">
<pre><code class=''><span class='line'>#ifndef MYFILE_H
</span><span class='line'>#define MYFILE_H
</span><span class='line'> 
</span><span class='line'>// Some code
</span><span class='line'>  
</span><span class='line'>#endif</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<h2 id="import-1"><span class="citation" data-cites="import">@import</span></h2>
<p>Tuy nhiên việc sử dụng <code>#import</code> cũng như <code>#include</code> khiến cho preprocessor đối mặt với 1 số vấn đề khác như Fragility và Performance. Để hiểu về vấn đề Header Fragility chúng ta xem qua một ví dụ đơn giản sau:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>MyFile.h </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre>
</td>
<td class="code">
<pre><code class='objc'><span class='line'><span class="cp">#define NSURL @“my url&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MyClass</span> :<span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Khi đó sau quá trình preprocessing thì file header của chúng ta sẽ như sau:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre>
</td>
<td class="code">
<pre><code class='objc'><span class='line'><span class="cp">#define NSURL @“my url&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// đoạn code được copy từ Foundation.h</span>
</span><span class='line'><span class="c1">// và tất cả những đoạn có chứa NSURL của Foundation.h đều bị thay bằng “my url”</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MyClass</span> :<span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Tất cả những đoạn NSURL của Foundation.h đều bị preprocessor thay thế bằng “my url” do có <code>#define NSURL @“my url”</code> bên trên. Từ đó ta thấy với việc dùng <code>#include</code> hay <code>#import</code> thông thường thì các header của các file khác, hay của thư viện mà chúng ta dùng đều có thể bị ảnh hưởng như việc dùng <code>#define</code> ở trên.</p>
<p>Về vấn đề performance thì như ở trên ta đã thấy <code>#include</code> và <code>#import</code> sẽ copy/paste toàn bộ file header mà nó include (đệ quy). Như ở ví dụ đầu tiên chúng ta chỉ include mình Foundation.h nhưng sau khi preprocessing thì có tới hơn 92000 dòng là của Foundation.h (và các file header mà Foundation.h include), chỉ 8 dòng cuối là code của chúng ta. Thế nên thời gian compile sẽ trở nên nhiều hơn rất nhiều.</p>
<h2 id="pre-compiled-headers">Pre-compiled headers</h2>
<p>Để giải quyết 1 phần vấn đề performance chúng ta có thể dùng precompiled headers (.pch). Nếu các bạn chú ý thì tất cả iOS project khi được XCode tạo ra đều có file PROJECTNAME-Prefix.pch như sau:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span>PROJECTNAME-Prefix.pch </span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre>
</td>
<td class="code">
<pre><code class='objc'><span class='line'><span class="cp">#import &lt;Availability.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef __IPHONE_3_0</span>
</span><span class='line'><span class="cp">#warning &quot;This project uses features only available in iOS SDK 3.0 and later.&quot;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef __OBJC__</span>
</span><span class='line'>    <span class="err">#</span><span class="n">import</span> <span class="o">&lt;</span><span class="n">UIKit</span><span class="o">/</span><span class="n">UIKit</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="err">#</span><span class="n">import</span> <span class="o">&lt;</span><span class="n">Foundation</span><span class="o">/</span><span class="n">Foundation</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span><span class="n">Foundation</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Trong file .pch này chúng ta sẽ include những header mà có khả năng được include tại nhiều nơi trong source code của ứng dụng như Foundation.h, UIKit.h… Khi source code của ứng dụng được compile thì file .pch này sẽ được compile đầu tiên, đồng nghĩa với việc tất cả file header được include trong file .pch này sẽ được compile trước và được include vào tất cả source code.</p>
<p>Bằng viêc caching những file header đã được biên dịch này thì những file này chỉ cần compile 1 lần, những lần sau chỉ cần sử dụng lại nên thời gian compile sẽ được rút gọn.</p>
<p>Thế nhưng các developer thường không hay quản lý file .pch này, và không phải file header nào cũng được dùng tại nhiều nơi trong source code nên hiệu quả của .pch chưa được cao.</p>
<h2 id="modules">Modules</h2>
<p>Vào tháng 11 năm 2012, Doug Gregor (một kỹ sư của Apple) đã giới thiệu tính năng modules nhằm giải quyết vấn đề trên của proprocessor thay cho .pch. Vậy module là gì? Module chính là một package mô tả một library, framework.</p>
<p>Ví dụ chạy 2 lệnh dưới đây ta sẽ có thể xem được các module trong SDK của iOS7.</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre>
</td>
<td class="code">
<pre><code class=''><span class='line'>% cd `xcrun --sdk iphoneos --show-sdk-path`
</span><span class='line'>% find . -name module.map   
</span><span class='line'>
</span><span class='line'> ./Developer/Library/Frameworks/XCTest.framework/module.map   
</span><span class='line'> ./System/Library/Frameworks/AudioToolbox.framework/module.map   
</span><span class='line'> ./System/Library/Frameworks/AudioUnit.framework/module.map   
</span><span class='line'> ./System/Library/Frameworks/CoreAudio.framework/module.map     
</span><span class='line'>    :     
</span><span class='line'>    :   
</span><span class='line'> ./usr/include/dispatch/module.map   
</span><span class='line'> ./usr/include/mach-o/module.map   
</span><span class='line'> ./usr/include/module.map   
</span><span class='line'> ./usr/include/objc/module.map</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Với mỗi framework ta thấy có 1 file module.map để mô tả framework đấy.</p>
<p>Và để sử dụng framework chúng ta có thể thay <code>#import &lt;Frameworkname.h&gt;</code> bằng <code>@import Frameworkname;</code> Ví dụ khi sử dụng framework Foundation ta sẽ dùng <code>@import Foundation;</code> Vậy khi trong một file header gặp đoạn import module thì compiler đã xử lý gì và tại sao lại giải quyết được vấn đề Fragility và Performance của preprocessor?</p>
<p>Ví dụ khi trong một file header, preprocessor gặp <code>@import Foundation</code> thì sẽ xử lý các bước như sau:</p>
<ul>
<li>Tìm file module.map của framework có tên là Foundation</li>
<li>Dựa vào mô tả về framework trong file module.map này compiler sẽ parse các file headers và sinh ra file module (lưu dưới dạng AST - biểu diễn dưới dạng tree trước khi chuyển sang mã máy)</li>
<li>Load file module này tại đoạn khai báo import</li>
<li>Cache file module này để sử dụng lại cho những lần sau</li>
</ul>
<p>Thứ nhất thay vì copy nội dung các file header được include rồi mới compile, mà import trưc tiếp file module đã được lưu dưới dạng AST nên các header của framework ko bị ảnh hưởng bởi các đoạn code trước khi import (như #define) -&gt; tránh được vấn đề Fragility.</p>
<p>Thứ hai là nhờ việc cache những file module này mà compiler không phải biên dịch lần 2 nên sẽ rút gọn thời gian biên dịch.</p>
<p>Ngoài ra một điều thú vị nữa mà tính năng module mang lại cho lập trình viên đó là chúng ta không phải tự tay link các framework mà chúng ta import. Ví dụ như trước đây nếu trong file tmp.m có <code>#include &lt;Foundation/Foundation.h&gt;</code> thì khi biên dịch chúng ta phải tự link tới Foundation bằng lệnh : <code>clang tmp.m -o tmp -framework Foundation</code></p>
<p>Thế nhưng khi sử dụng <code>@import</code> thì chúng ta không cần phải tự link tới framework nữa mà chỉ cần:</p>
<p><code>clang tmp.m -o tmp -fmodules</code></p>
<p>Với XCode chúng ta sẽ không phải add thêm các framework mà mình muốn dùng trong <code>Link Binary With Libraries</code> như hình dưới đây.</p>
<p><img src="http://git@github.com.github.com/images/clang_modules/link_framework.png"></p>
<p>Đối với những project được tạo từ XCode5 thì tính năng module tự động được enable. Nhưng những project được tạo trước đây các bạn phải tự enable trong phần <code>Build Settings</code> (tức là set flag -fmodules).</p>
<p><img src="http://git@github.com.github.com/images/clang_modules/enable_module.png"></p>
<h1 id="kết-luận">Kết luận</h1>
<p>Bài viết này mình đã giới thiệu qua tính năng module của Clang trong được giới thiệu từ XCode5. Và đồng thời cũng giải thích qua về <code>#include</code>, <code>#import</code>, pch. Mặc dù tính năng module vẫn đang trong quá trình hoàn thiện nhưng hiện tại chúng ta đã có thể sử dụng với XCode5.</p>
<p>Các bạn có thể tìm hiểu thêm tại:</p>
<ul>
<li><a href="http://clang.llvm.org/docs/Modules.html">clang_modules</a></li>
<li><a href="http://llvm.org/devmtg/2012-11/Gregor-Modules.pdf">Bài phát biểu của Gregor</a></li>
</ul>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Full Text Search, Từ Khái Niệm đến Thực Tiễn (Phần 3)]]></title>
    <link href="http://git@github.com.github.com/blog/2014/01/04/full-text-search-engine-part-3/"/>
    <updated>2014-01-04T21:23:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2014/01/04/full-text-search-engine-part-3</id>
    <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Trong <a href="http://ktmt.github.io/blog/2013/11/03/full-text-search/">phần 2</a>, chúng ta đã nắm được một kĩ thuật cơ bản và quan trọng để tạo ra search-engine, đó chính là kĩ thuật tách chữ (Tokenize), thông qua 2 phương pháp chính là N-gram và Morphological Analysis. Nhờ có kĩ thuật này mà văn bản gốc sẽ được bóc tách thành các kí tự, sau đó sẽ được lưu trữ dưới dạng Inverted Index như đã giới thiệu ở <a href="http://ktmt.github.io/blog/2013/10/27/full-text-search-engine/">phần 1</a>.</p>
<p>Trong bài viết này, chúng ta sẽ tìm hiểu là làm thế nào, mà khi được cung cấp đầu vào là một chuỗi truy vấn (query string), search engine sẽ cung cấp được cho chúng ta kết quả phù hợp nhất. Về cơ bản, để tìm kiếm bên trong một khối dữ liệu khổng lồ đã được index dưới dạng “Inverted Index”, search-engine sẽ sử dụng “Boolean Logic”.</p>
<h1 id="boolean-logic-và-tại-sao-search-engine-lại-sử-dụng-boolean-logic">Boolean Logic và tại sao Search Engine lại sử dụng Boolean Logic</h1>
<p>Khi nhắc đến Boolean Logic, các bạn sẽ hình dung ra trong đầu những hình ảnh như thao tác AND/OR/XOR với bit, mạch logic trong điện tử số, hay biểu đồ ven. Đối tượng thao tác của Boolean Logic có thể là bit, cổng logic, hay là tập hợp (set). Trong bài này, Boolean Logic sẽ được nhắc đến với đối tượng là tập hợp (set), và hình ảnh dễ hình dung nhất khi thao tác với đối tượng này chính là biểu đồ Ven.</p>
<p>Để tìm hiểu mối liên quan giữa Boolean Logic và Search Engine, chúng ta hãy thử hình dung cơ chế của Search Engine. Khi được cung cấp một chuỗi truy vấn (query string), việc đầu tiên Search Engine sẽ phải sử dụng Parser module để bóc tách chuỗi truy vấn này theo một <strong>ngữ pháp</strong> đã được qui định trước, để tạo thành các token sử dụng cho logic tìm kiếm. Việc sử dụng Parser này cũng giống như compiler hay intepreter sẽ sử dụng các cú pháp đã được định nghĩa trước của một ngôn ngữ bất kỳ để dịch một đoạn code ra mã máy hoặc là bytecode. Ngữ pháp qui định trước càng phức tạp, không chỉ dẫn đến việc parse chuỗi truy vấn trở nên phức tạp hơn, việc viết ra một câu truy vấn phức tạp hơn (ảnh hưởng đến người dùng), mà còn khiến logic tìm kiếm cũng trở nên phức tạp, qua đó làm giảm hiệu suất của việc tìm kiếm. Chính vì thế mà việc tận dụng một ngữ pháp gần giống với Boolean Logic không những sẽ giúp giữ cho độ phức tạp khi parse query string ở mức thấp, mà nó còn giúp cho người dùng tạo ra những câu truy vấn dễ hiểu hơn.</p>
<h1 id="sử-dụng-boolean-logic-trong-search-engine">Sử dụng Boolean Logic trong Search Engine</h1>
<p>Boolean logic sử dụng trong Search Engine thường sẽ gồm 3 phép toán chính là <strong>AND</strong>, <strong>NOT</strong> <strong>và OR</strong> Hãy trở lại ví dụ gần giống trong <a href="http://ktmt.github.io/blog/2013/10/27/full-text-search-engine/">phần 1</a>, chúng ta có 5 documents {D1, D2, D3, D4, D5} đã được index như sau:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre>
</td>
<td class="code">
<pre><code class=''><span class='line'>D1 = "This is first document"
</span><span class='line'>D2 = "This is second one"
</span><span class='line'>D3 = "one two"
</span><span class='line'>D4 = "This one is great"
</span><span class='line'>D5 = "This two is great!"</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre>
</td>
<td class="code">
<pre><code class=''><span class='line'>"this" =&gt; {D1, D2, D4, D5}
</span><span class='line'>"is" =&gt; {D1, D2, D4, D5}
</span><span class='line'>"first" =&gt; {D1}
</span><span class='line'>"document" =&gt; {D1}
</span><span class='line'>"second" =&gt; {D2}
</span><span class='line'>"one" =&gt; {D2, D3, D4}
</span><span class='line'>"two" =&gt; {D3, D5}</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Giả sử chúng ta muốn query một câu truy vấn như sau : “This one”. Sử dụng Morphological Analysis đã giới thiệu trong <a href="http://ktmt.github.io/blog/2013/11/03/full-text-search/">phần 2</a>, chúng ta sẽ tách câu truy vấn đó thành 2 token là “This” và “one”. Bỏ qua yếu tố chữ hoa và chữ thường, thì “This” đã được index {D1, D2, D4, D5}, và “one” đã được index {D2, D3, D4}.</p>
<p>Thông thường để cho dễ hiểu và phù hợp với logic của người dùng, thì space sẽ tương đương với logic AND, hay là việc tìm kiếu “This one” sẽ tương đương với kết tìm kiếm “This” AND với kết quả tìm kiếm “one”. Hay như trong ví dụ này thì kết quả tìm kiếm sẽ là kết quả AND của 2 set {D1, D2, D4, D5} và {D2, D3, D4}. Kết quả này có thể thấy dễ dàng là {D2, D4}</p>
Vậy nếu người dùng input là “This OR one” thì sao? Lúc này kết quả tìm kiếm sẽ là
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
</pre>
</td>
<td class="code">
<pre><code class=''><span class='line'>{D1, D2, D4, D5} OR {D2, D3, D4} = {D1, D3, D5}</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
Từ ví dụ trên chúng ta thấy rằng độ phức tạp của việc tìm kiếm lúc này sẽ chuyển thành
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre>
</td>
<td class="code">
<pre><code class=''><span class='line'>Độ phức tạp của parse query string(1) 
</span><span class='line'>+ Độ phức tạp của Index lookup(2) 
</span><span class='line'>+ Độ phức tạp của thao tác boolean Logic dựa trên kết quả của Index lookup(3)</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>(1) thường sẽ không lớn do query string do user input khá ngắn, và trong trường hợp query string được generate phức tạp khi sử dụng lucene hoặc solr, thì việc sử dụng boolean logic rất đơn giản cũng làm độ phức tạp khi parse query string là không cao.</p>
<p>(2) Độ phức tạp của Index lookup tương đương với việc tìm kiếm giá trị của một key trong Hash table, chỉ khác là trên HDD, tuy nhiên so sánh với việc tìm kiếm trên BTree của MySQL thì performance của xử lý này là hoàn toàn vuợt trội.</p>
<p>(3) Thao tác này có thể được optimize rất nhiều dựa vào các lý thuyết tập hợp, hay các thư viện toán học cho big number.</p>
<p>Như vậy chúng ta có thể thấy bài toán tìm kiếm ban đầu đã được đưa về 3 bài toán nhỏ hơn, dễ optimize hơn.</p>
<h1 id="kết-luận">Kết luận</h1>
<p>Bài viết đã giới thiệu về việc sử dụng Boolean Logic trong Full Text Search Engine. Qua đó các bạn chắc đã hình dung ra phần nào khi các bạn gõ một câu lệnh tìm kiếm vào ô tìm kiếm của Google, những gì sẽ xảy ra đằng sau (mặc dù trên thực tế những gì google làm sẽ phức tạp hơn rất nhiều).</p>
<p>Tham khảo:</p>
<ul>
<li><a href="http://gihyo.jp/dev/serial/01/make-findspot">Make Findspot</a></li>
</ul>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trở lại cơ bản - Độ tin cậy]]></title>
    <link href="http://git@github.com.github.com/blog/2013/12/22/tro-lai-co-ban-1-do-tin-cay/"/>
    <updated>2013-12-22T20:36:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/12/22/tro-lai-co-ban-1-do-tin-cay</id>
    <content type="html"><![CDATA[<h3 id="giới-thiệu">Giới thiệu</h3>
<p>Các bạn là fan của <a href="http://en.wikipedia.org/wiki/Distributed_computing">tính toán phân tán</a> chắc hẳn đều biết <a href="http://en.wikipedia.org/wiki/Werner_Vogels">Werner Vogels</a> (CTO của amazon) cũng như trang blog <a href="www.allthingsdistributed.com">All Things Distributed</a> của ông. Một trong những loạt bài viết mà cá nhân tôi rất thích là loạt bài viết có tựa đề: Back-to-Basic của Vogels. Trong loạt bài viết này, Vogels giới thiệu những paper nổi tiếng mà những người làm tính toán phân tán cần đọc và tất cả đều hết sức cơ bản.</p>
<p>Lấy cảm hứng từ trùm bài viết đấy, mình quyết định sẽ viết trùm bài có tựa đề “Trở lại cơ bản” tổng hợp lại những kiến thức cơ bản, trước hết là để cho bản thân và sau đấy để là để chia sẻ cho mọi người (có những thứ bạn nghĩ là cơ bản nhưng không phải ai cũng biết ;) ).</p>
<p>Bài viết tuần này sẽ nêu khái lược khái niệm độ tin cậy, cách tính độ tin cậy.</p>
<h3 id="độ-tin-cậy-là-gì">Độ tin cậy là gì?</h3>
<p>Độ tin cậy có thể hiểu là độ bền của sản phẩm hoặc dịch vụ . Sản phẩm (dịch vụ) của bạn càng bền, chạy càng lâu mà không hỏng hóc gì, thì độ bền của sản phẩm càng cao, và do đó độ tin cậy vào sản phẩm của bạn nói riêng và của người dùng nói chung vào sản phẩm càng cao. Đối với dịch vụ (cloud, website) thì độ tin cậy có thể đo bằng thời gian hệ thống sẵn sàng phục vụ bạn (không bị dừng vì sự cố hay hỏng hóc).</p>
<p>Với cách hiểu trên, một vấn đề đặt ra là làm thế nào <strong>cân đo đong đếm</strong> độ tin cậy. Ví dụ khi một hãng phần cứng bán cho bạn 1 chiếc ổ cứng và họ bảo đảm với bạn rằng phần cứng của họ có độ tin cậy cao, thì họ dựa vào điều gì để nói như vậy?</p>
<p>Các hãng bán máy tính đều đưa ra chế độ bảo hành cho sản phẩm của họ, với lời quảng cáo rằng trong thời gian bảo hành họ sẵn sàng thay thế sản phầm của họ nếu sản phẩm của họ bị lỗi. Độ tin cậy như vậy có thể đo bằng thời gian bảo hành. Qua thời gian bảo hành, sản phẩm có thể bị hỏng hóc và hãng sẽ không chịu trách nhiệm cho những hỏng hóc đó. Ví dụ máy tính apple thường có thời gian bảo hành 1 năm.</p>
<p>Đối với các sản phẩm là dịch vụ trên internet, người ta thường đưa ra các <a href="http://en.wikipedia.org/wiki/Service-level_agreement">Service Level Agreements (SLA)</a> hoặc <strong>Service Level Objectives (SLO)</strong> để quảng cáo cho độ tin cậy của dịch vụ, và họ sẵn sàng bồi thường cho khách hàng nếu sản phẩm của họ không đáp ứng được những “đồng ý” này. Amazon EC2 cam kết trong <a href="http://aws.amazon.com/ec2-sla/">Amazon SLA</a> rằng họ đảm bảo EC2 99.95% có uptime thời gian trong 1 tháng. Nếu họ không đáp ứng điều kiện này, họ sẽ có chính xác bồi thường cho người dùng. Giống như vậy, các công ty dịch vụ cloud khác nhưng rackspace cũng đều có <a href="http://www.rackspace.com/information/legal/cloud/sla">Rackspace SLA</a> của riêng họ. Ngược lại việc hãng cloud như heroku không có một đảm bảo SLA nào ngoài <a href="https://www.heroku.com/policy/promise">Heroku Promise</a>, làm cho độ tin tưởng vào sản phẩm của họ giảm hẳn.</p>
<h3 id="đo-độ-tin-cậy-thế-nào">Đo độ tin cậy thế nào?</h3>
<p>Chắc chắn amazon sẽ không ngu gì đưa ra 1 cam kết không tưởng 100% uptime, nhưng họ cũng không thể đưa ra con số quá thấp được vì điều đó sẽ làm giảm khả năng cạnh tranh với các công ty khác. Apple cũng không dại gì đưa ra số năm bảo hành cao hơn vì nó sẽ làm giảm lợi nhuận của họ. Vậy các hãng đưa ra các con số trên như thế nào?</p>
<p>Mỗi công ty cung câp dịch vụ sẽ có nhiều chỉ số riêng để đánh giá và tính toán trước khi đưa ra con số của dịch vụ của họ, tuy vậy các tính toán đề dựa vào cách tính cơ bản trình bày dưới đây.</p>
<p>Để tính toán độ tin cậy, ta chia hệ thống làm 2 trạng thái tương ứng như được ghi trong SLA:</p>
<ul>
<li>Thời gian phục vụ như cam kết</li>
<li>Thời gian dừng dịch vụ (do hỏng hóc)</li>
</ul>
<p>Hệ thống thay đổi giữa 2 trạng thái này là: hỏng hóc và phục hồi. Để đo được độ tin cậy của hệ thống, ta cần đo được thời gian hệ thống ở 1 trong 2 trạng thái trên. Một hệ thống được xây dựng từ nhiều modules, do vậy độ tin cậy của hệ thống sẽ liên quan đến độ tin cậy của từng module trong hệ thống. Trước hết ta tìm hiểu các chỉ số tương ứng với 2 trạng thái trên.</p>
<p>Độ tin cậy của 1 thành phần (module) được đo bằng thời gian phục vụ liên tục từ lúc bắt đầu được sử dụng đến lúc hỏng hóc gọi là MTTF (Mean Time to Failure). Nghịch đảo của con số này chính là tỉ lệ hỏng hóc FIT (Failures in time) và thường được đo bằng số hỏng hóc / 1 tỷ giờ vận hành.</p>
<p>Độ hỏng hóc (hỏng nặng hay nhẹ) được đo bằng MTTR (Mean Time To Repair) hay thời gian từ lúc hệ thống hỏng hóc cho đến lúc được phục hồi.</p>
<p>Thời gian giữa 2 lần hỏng hóc</p>
<pre><code>MTBF (Mean Time Between Failures) = MTTF + MTTR</code></pre>
<p>Tính sẵn sàng của 1 modules (Module availability) được đo bởi thời gian hoạt động cho đến lúc hỏng hóc trên tổng thời gian giữa 2 lần hỏng hóc:</p>
<pre><code>Module Availability = MTTF / (MTTF + MTTR)</code></pre>
<p>Từ công thức trên, ta có thể đo được tính sẵn sàng của hệ thống dựa vào tính tin cậy của từng module dùng để xây dựng nên hệ thống.</p>
<h3 id="áp-dụng">Áp dụng</h3>
<p>Tính MTTF của 1 hệ thống Giả sử ta có 1 hệ thống được xây dựng bởi</p>
<ul>
<li>10 đĩa cứng, mỗi đĩa có MTTF 1000000 giờ</li>
<li>1 bộ điều khiển <a href="http://en.wikipedia.org/wiki/SCSI">SCSI</a> có MTTF 500000 giờ</li>
<li>1 bộ nguồn có MTTF 200000 giờ</li>
<li>1 quạt làm mát có MTTF 200000 giờ</li>
<li>1 cáp SCSI có MTTF 1000000 giờ.</li>
</ul>
<p>Hãy tính MTTF của cả hệ thống.</p>
<p>Lời giải</p>
<p>Tỉ lệ hỏng hóc của toàn hệ thống:</p>
<pre><code>Failure rate = 10 / 1000000 + 1/500000 + 1/200000 + 1/200000 + 1/1000000
             = (10 + 2 + 5 + 5 + 1) / 1000000 = 23 / 1000000 = 23000 / 1000000000</code></pre>
<p>hệ thống sẽ có tỉ lệ hỏng hóc 23000FIT. MTTF của hệ thống sẽ bằng nghịch đảo con số trên</p>
<pre><code>MTTF = 1000000000 / 230000 = 43450 giờ (khoảng 5 năm)</code></pre>
<p>Từ con số trên, ta có thể thấy mặc dù MTTF của từng module khá lớn, nhưng MTTF của cả hệ thống nói chung chỉ là 5 năm. MTTF của các module trong máy tính cá nhân có lẽ thấp hơn nhiều. Có lẽ vì vậy mà các công ty bán phần cứng không bao giờ đưa ra thời gian bảo hành lâu quá 2, 3 năm! Từ con số này các công ty làm dịch vụ internet cũng phải có cách lập kế hoạch bảo trì thay mới máy chủ để đảm bảo tính tin cậy của dịch vụ của mình. Trong trường hợp công ty mình, tất cả các máy chủ đều được thay mới sau 5 năm (Và giờ bạn đã hiều tại sao phải thay và con số 5 này từ đâu ra :) ).</p>
<h3 id="kết-luận">Kết luận</h3>
<p>Qua bài viết này, chúng ta đã có thể lý giải và cân đong đo đếm được độ tin cậy của hệ thống dựa trên các chỉ số MTTF, MTTR, FIT, cũng như lý giải được ý nghĩa của SLA của 1 dịch vụ.</p>
<h3 id="tham-khảo">Tham khảo</h3>
<ul>
<li><a href="http://www.amazon.com/Computer-Architecture-Quantitative-Approach-Edition/dp/0123704901">Computer Architecture A quantitative Approach</a></li>
</ul>]]></content>
  </entry>
  
</feed>
