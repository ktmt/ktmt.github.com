<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java, | Blog kỹ thuật máy tính]]></title>
  <link href="http://git@github.com.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://git@github.com.github.com/"/>
  <updated>2015-05-07T01:18:39+09:00</updated>
  <id>http://git@github.com.github.com/</id>
  <author>
    <name><![CDATA[kỹ thuật máy tính]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tutorial: Duplicate file finder (Java)]]></title>
    <link href="http://git@github.com.github.com/blog/2013/06/30/tutorial-duplicate-file-finder-java/"/>
    <updated>2013-06-30T09:07:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/06/30/tutorial-duplicate-file-finder-java</id>
    <content type="html"><![CDATA[<h1 id="mở-đầu">Mở đầu</h1>
<p>Trong quá trình dọn dẹp máy tính cá nhân, tôi gặp phải vấn đề là quá nhiều file trùng lặp trong máy tính. Việc có quá nhiều file như vậy gây lãng phí ổ cứng, cộng thêm đôi lúc tôi không còn nhớ là file này đặt ở thư mục này có ý nghĩa gì nữa. Giá mà có công cụ nào đó để tìm tự động các file này cho tôi thì tốt quá nhỉ??</p>
<p>Không cần phải giá mà nữa, không gì bằng làm ra cho mình một công cụ như vậy. Bài viết này sẽ trình bày những bước đầu tiên tôi prototype công cụ tìm kiếm các file trùng lặp. Thông qua bài viêt này, tôi cũng sẽ giới thiệu về những chủ đề sau trong Java: tính hash, thread pooling.</p>
<h1 id="md5-checksum">MD5 checksum</h1>
<p>MD5 là một thuật toán mã hóa thông điệp (message-digest), về bản chất là một hàm băm (hash) xuất ra một giá trị 128-bit (16-byte). MD5 được sử dụng rất nhiều trong các ứng dụng bảo mật, và cũng được sử dụng để kiểm tra tính toàn vẹn dữ liệu (ví dụ như bạn down một file từ Internet về, thường có một MD5 key đi kèm, để bạn kiểm tra xem file bạn down có chính xác giống nguồn down không.)</p>
<p>Tôi không có ý định đi sâu vào cách tính MD5, bạn có thể tham khảo trên google. Lưu ý là thuật toán MD5 vẫn có thể sinh ra cùng một giá trị hash với 2 file có nội dung khác nhau (tuy nhiên trường hợp này rất hiếm). Để chắc chắn tìm được 2 file có nội dung giống hệt nhau, ta sẽ so sánh theo thứ tự: so sánh giá trị hash, so sánh độ lớn của file, và cuối cùng là so sánh từng byte của hai file để chắc chắn chúng trùng nhau.</p>
<p>Trong Java, hàm băm đã được đưa vào thư viện <em>java.security</em>, thông qua class <em>MessageDigest</em>. Bạn chỉ cần khai báo đối tượng <em>MessageDigest</em>, sau đó chọn phương thức mã hóa MD5, hoặc SHA. Việc bạn phải làm đối với từng file là chuyển file thành byte stream, và update dòng input này vào đối tượng <em>MessageDigest</em> trên, và bạn sẽ nhận được một dòng byte kết quả.</p>
<p>Chi tiết về class <em>MessageDigest</em>, bạn có thể tham khảo tại đây: <a href="http://docs.oracle.com/javase/6/docs/api/java/security/MessageDigest.html" class="uri">http://docs.oracle.com/javase/6/docs/api/java/security/MessageDigest.html</a></p>
<p>{%codeblock MD5.java %} public static String getMD5(File file) { if(!file.exists()) return “”; try { MessageDigest md = MessageDigest.getInstance(“MD5”);</p>
<pre><code>        //read the file into a byte array
        byte[] input = new byte[(int) file.length()];
        InputStream in = new FileInputStream(file);
        in.read(input);
        in.close();
        
        //update the MessageDigest and process
        md.update(input);
        byte[] fileDigest = md.digest();
        
        return ByteArrayToString(fileDigest);
    }
    catch(IOException e )
    {
        e.printStackTrace();
        return &quot;&quot;;
    }
    catch(NoSuchAlgorithmException e)
    {
        return &quot;&quot;;
    }
}

private static String ByteArrayToString(byte[] ba)
{
   StringBuilder sb = new StringBuilder();
   for(byte b: ba)
      sb.append(String.format(&quot;%02x&quot;, b&amp;0xff));
   return sb.toString();
}</code></pre>
<p>{%endcodeblock %}</p>
<h1 id="theading">Theading</h1>
<p>Threading, hay concurrency, trong Java là một chủ đề khá phức tạp và tôi cũng chưa đủ khả năng nắm rõ được tất cả. Do vậy, trong bài viết này, tôi xin chỉ đề cập đến kĩ thuật thread pooling để phân bài toán ra thành nhiều tác vụ, chạy trên nhiều luồng khác nhau.</p>
<p>Thread pool là gì? Bạn có thể hiểu nôm na là thay vì cứ gọi một luồng mới cho từng tác vụ khi cần thiết (phương pháp này gặp nhược điểm vì việc tạo thread mới sẽ gặp overhead), ta tạo sẵn một cái “bể” (pool) trong đó khởi động sẵn một loạt các luồng (thread). Các luồng này ngoi ngoi lên để đợi ta ném tác vụ vào để chúng thực hiện. Sau khi thực hiện xong, nó sẽ báo cáo lại kết quả, kết thúc tác vụ, và quay trở lại “bể” để tiếp tục ngoi ngoi chờ tác vụ mới. Chỉ khi nào đóng “bể”, thì các luồng mới bị mất đi.</p>
<p>Trong bài toán tìm file trùng lặp này, tôi sẽ áp dụng thread pooling như sau:</p>
<ul>
<li>Tạo một class DuppFind, implement Runnable class (đây là class ta có thể truyền vào cho pool), đại diện cho tác vụ tìm kiếm. Với mỗi object DuppFind, nó sẽ được truyền vào các tham số gồm có:</li>
</ul>
<p>– Thư mục bắt đầu tìm kiếm</p>
<p>– Map<String, List<String>&gt;: là một map chứa key là md5 và value là một List chứa đường dẫn đến các file có md5 value như vậy</p>
<p>– pool, thuộc class ExcutorService.</p>
<ul>
<li>Mỗi tác vụ sau khi được luồng chọn để thực thi, nó sẽ làm gì? Nhiệm vụ của tác vụ là quét tất cả các file, thư mục có trong thư mục được chỉ định tìm kiếm. Nếu gặp file, nó sẽ tính MD5 cho file đó, và thêm vào Map. Nếu gặp thư mục, tác vụ này sẽ tạo ra một tác vụ DuppFind mới, chỉ định thư mục mới này cho tác vụ DuppFind mới, và ném vào pool (bây giờ bạn đã hiểu tại sao object DuppFind luôn được truyền pool vào rồi đấy:) )</li>
</ul>
<p>Một vài điểm lưu ý:</p>
<ul>
<li><p>Mỗi tác vụ phải có trách nhiệm đợi tất cả các tác vụ con nó tạo ra hoàn thành thì mới được chấm dứt. Tôi thực hiện điều này bằng cách sử dụng đối tượng Future được trả lại mỗi lần ném tác vụ mới vào pool. Sau đó chỉ cần gọi polling kết quả từ tác vụ con là được.</p></li>
<li><p>Với những Collection dùng chung giữa các thread, cần phải dùng những Concurrecy Collection mà Java cung cấp. Cụ thể ở đây, tôi dùng ConcurrentHashMap cho Map và CopyOnWriteArrayList cho List.</p></li>
</ul>
<p>Dưới đây là đoạn code cho phần thread pooling:</p>
<p>{%codeblock DuppFind.java %} public class DuppFind implements Runnable{ private File directory; private Map<String, List<String>&gt; md5FileMap; private ExecutorService pool;</p>
<pre><code>public DuppFind(File directory, Map&lt;String, List&lt;String&gt;&gt; md5FileMap, ExecutorService pool)
{
    this.directory = directory;
    this.md5FileMap = md5FileMap;
    this.pool = pool;
}   

@Override
public void run () {
    try
    {
        File[] files = directory.listFiles();
        ArrayList&lt;Future&lt;?&gt;&gt; results = new ArrayList&lt;Future&lt;?&gt;&gt;();
        for(File file : files)
        {
            if(file.isDirectory())
            {
                //System.out.println(&quot;Dir: &quot; + file.getAbsolutePath());
                DuppFind df = new DuppFind(file, md5FileMap, pool);
                Future&lt;?&gt; result = pool.submit(df);
                results.add(result);
            }
            else if(file.isFile())
            {
                //calculate md5
                String md5 = MD5Utils.getMD5(file);
                List&lt;String&gt; listFile = new CopyOnWriteArrayList&lt;String&gt;();
                if(md5FileMap.get(md5) != null)
                {
                    System.out.println(&quot;Duplicate md5: &quot; + md5 + &quot;, size now: &quot; + md5FileMap.get(md5).size());
                    listFile.addAll(md5FileMap.get(md5));
                }
                listFile.add(file.getAbsolutePath());
                md5FileMap.remove(md5);
                md5FileMap.put(md5, listFile);
                System.out.println(&quot;Add: File&quot; + file.getAbsolutePath() + &quot;, MD5: &quot; + md5);
            }
        }
        
        //wait until all sub-tasks complete
        for(Future&lt;?&gt; result: results)
        {
            result.get();
        }
    }
    catch(InterruptedException e)
    {
        e.printStackTrace();
    }
    catch(ExecutionException e)
    {
        e.printStackTrace();
    }
}</code></pre>
<p>} {%endcodeblock %}</p>
<p>Toàn bộ code đã ở trên github: <a href="https://github.com/viethnguyen/DuppFind" class="uri">https://github.com/viethnguyen/DuppFind</a></p>
<h1 id="đánh-giá">Đánh giá</h1>
<ul>
<li><p>Đoạn code trên chạy chính xác với những thư mục nhỏ, không có quá nhiều thư mục con, cháu… Tuy nhiên, với những thư mục chứa nhiều thư mục con, vì có quá nhiều tác vụ vào thread pool, nên hay xảy ra exception out of memory - heap.</p></li>
<li><p>Mới chỉ kiểm tra xem 2 file có MD5 trùng nhau không. Nếu trùng nhau rồi, ta cần kiểm tra thêm độ dài 2 file có trùng nhau không, rồi nếu trùng tiếp thì phải check từng byte để chắc chắn nhất có thể (xóa đi khỏi hối hận :P)</p></li>
<li><p>Ở trên mới hiển thị ra những file nào trùng lặp. Cần cho phép user xóa file trùng lặp trong chương trình.</p></li>
<li><p>Cần thiết kế GUI!</p></li>
</ul>
<p>Bạn thấy đó, còn khá nhiều vấn đề cần giải quyết để có một tool hoàn chỉnh. Những vấn đề này sẽ được cải tiến và được report lại trong một ngày không xa :) Nếu bạn cảm thấy hứng thú, rất welcome contribute :)</p>
<h1 id="tham-khảo">Tham khảo</h1>
<ol type="1">
<li>Core Java</li>
<li>Java Concurrency in Practice</li>
<li>Effective Java</li>
</ol>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Pattern: Áp dụng Builder Pattern trong test (Java)]]></title>
    <link href="http://git@github.com.github.com/blog/2013/06/14/design-pattern-ap-dung-builder-pattern-trong-test-java/"/>
    <updated>2013-06-14T22:31:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/06/14/design-pattern-ap-dung-builder-pattern-trong-test-java</id>
    <content type="html"><![CDATA[<h1 id="giới-thiệu">Giới thiệu</h1>
<p>Builder Pattern là một pattern trong cuốn Design Pattern của “Gang of Four”. Mục đích của Builder Pattern như sau: Separate the construction of a complex object from its representation so that the same construction process can create different representations (tạm dịch: tách rời quá trình tạo object với nội dung và cấu trúc bên trong của nó, nhờ vậy tương ứng với một quá trình tạo object có thể có nhiều cách tạo nhiều thể hiện khác nhau.)</p>
<p>Bên cạnh đó, Builder pattern còn được dùng để giải quyết một vấn đề thường gặp trong quá trình test: cách nào tốt nhất để tạo những object có quá nhiều optional parameters, trong khi tạm thời một số parameter ta muốn để giá trị default, giá trị của parameter này không ảnh hưởng gì lắm đến algorithm hay flow của chương trình. Bài viết này sẽ trình bày phương pháp sử dụng Builder pattern này.</p>
<h1 id="ví-dụ">Ví dụ</h1>
<p>Ta lấy ví dụ ta có một class quản lý sách, với các trường như sau: tiêu đề, tên tác giả, thể loại, năm xuất bản, ISBN. Để phục vụ việc tạo một object thuộc class này, ta nghĩ đến việc tạo một constructor như sau: {%codeblock constructor.java %} public Book(String title, String author, Genre genre, GregorianCalendar publishDate, String ISBN) { this.title = title; this.author = author; this.genre = genre; this.publishDate = publishDate; this.ISBN = ISBN; } {%endcodeblock %}</p>
<p>Và trong chương trình, để tạo một object Book, ta gọi: {%codeblock constructor.java %} Book book2 = new Book(“Core Java”, “Cay Horstman”, Genre.TECHNOLOGY, new GregorianCalendar(2012,12,7), “0137081898”); {%endcodeblock %}</p>
<p>Ta thấy, với cách tạo object như trên, có một số nhược điểm như sau:</p>
<ul>
<li><p>Ta bắt buộc phải khai báo tất cả các parameters, không có giá trị default. Ta sẽ bị buộc phải set cả những parameters mà ta không quan tâm khi thực hiện test object.</p></li>
<li><p>Đoạn code khá khó hiểu khi ta chỉ khai báo giá trị của parameter và truyền vào constructor. Người đọc sẽ phải đếm vị trí của parameters, soi vào trong khai báo constructor của Book.java để biết giá trị này là gán cho parameter nào. Với ví dụ trên, chỉ có 5 parameter, nhưng với những class phức tạp có nhiều parameters hơn nữa, việc khai báo như trên rõ ràng không tốt về mặt code visibility.</p></li>
<li><p>Xuất hiện nhu cầu tạo object với các constructor với bộ tham số đầu vào khác nhau. Như ví dụ ở trên, ta muốn tạo object nhưng không muốn nhập thể loại, hoặc không muốn nhập năm xuất bản, … dẫn đến rất nhiều phiên bản constructor khác nhau.</p></li>
</ul>
<p>Hoặc bạn có thể khai báo theo một cách thứ hai, theo kiểu JavaBean như sau: tạo một constructor default, không đối số, ví dụ như Book(), sau đó thì tạo một loạt các setter để nhập các tham số cho parameter. Lúc đó thì code cho từng đối tượng sẽ như sau:</p>
<p>{%codeblock bean.java %} Book book = new Book(); book.setTitle(“Core Java”); book.setAuthor(“Cay Horstman”); book.setGenre(Genre.Technology); book.setPublishDate(new GregorianCalendar(2012,7,1)); book.setISBN(“0137081898”); {%endcodeblock %}</p>
<p>Nhưng cách này lại có nhược điểm là: vì việc tạo object bị kéo dài qua nhiều câu lệnh, có thể object sẽ bị rơi vào trạng thái unstable (ví dụ như ta quên mất set publishDate, như thế book sẽ không có giá trị cho publishDate !).</p>
<p>Để khắc phục những nhược điểm trên, có một phương pháp sử dụng Builder pattern như sau: Thay vì tạo object mong muốn trực tiếp, ta gọi một static factory với các tham số bắt buộc, nhận về một <em>builder object</em>. Sau đó gọi các setter method dể đặt các tham số tùy chọn. Cuối cùng gọi build method, tạo ra object. Để dễ hiểu hơn, ta quan sát ví dụ sau:</p>
<p>{%codeblock builder.java %} public class Book { public enum Genre {FICTION, NONFICTION, TECHNOLOGY, SELFHELP, BUSINESS, SPORT};</p>
<pre><code>private String title;
private String author;
private Genre genre;
private GregorianCalendar publishDate;
private String ISBN;

public static class Builder
{
    //required params
    private String title;
    private String author;
    
    //optional params
    private Genre genre = Genre.FICTION;
    private GregorianCalendar publishDate = new GregorianCalendar(1900,1,1);
    private String ISBN = &quot;000000000&quot;;
    
    public Builder(String title, String author)
    {
        this.title = title;
        this.author = author;
    }
    
    public Builder genre (Genre val)
    {
        this.genre = val;
        return this;
    }
    
    public Builder publishDate(GregorianCalendar val)
    {
        this.publishDate = val;
        return this;
    }
    
    public Builder ISBN(String val)
    {
        this.ISBN = val;
        return this;
    }
    
    public Book build()
    {
        return new Book(this);
    }
}

public Book(Builder builder)
{
    title = builder.title;
    author = builder.author;
    genre = builder.genre;
    publishDate = builder.publishDate;
    ISBN = builder.ISBN;
}

@Override
public String toString()
{
    return &quot;Title: &quot; + title + &quot;, author: &quot; + author + &quot;, genre: &quot; + genre.toString() + &quot;, publish year: &quot; 
                + publishDate.get(Calendar.YEAR) + &quot;, ISBN: &quot; + ISBN;
}</code></pre>
<p>} {%endcodeblock %}</p>
<p>Lúc đó ta có thể tạo Book object bằng cách sau: {%codeblock builder.java %} Book book = new Book.Builder(“Effective Java”, “Joshua Bloch”) .publishDate(new GregorianCalendar(2008,05, 28)) .build(); {%endcodeblock %}</p>
<p>Ta thấy, cách tạo object này có ưu điểm hơn so với cách dùng constructor thông thường:</p>
<ul>
<li><p>Không cần phải khai báo những parameter nào mà ta tạm thời chưa quan tâm. Những parameters đó sẽ nhận giá trị default. Trong ví dụ trên, ta đã bỏ qua khai báo cho genre và ISBN. Chúng sẽ nhận giá trị default: genre = FICTION, ISBN = “0000000000”.</p></li>
<li>Ta thấy rõ là giá trị nào là gán cho parameter nào. Ví dụ: publishDate(new GregorianCalendar(2008,05, 28)) là gán giá trị cho parameter ngày xuất bản.</li>
<li><p>Thứ tự của các method là không quan trọng. Ta có thể gọi các method để update thêm các giá trị cho các parameter theo thứ tự tùy ý. Object sẽ chưa được tạo cho đến khi gọi build(). Do vậy, builder rất dễ sử dụng và giúp ta tránh khỏi những sai lầm không mong muốn đối với thứ tự parameter.</p></li>
</ul>
<h1 id="kết-luận">Kết luận</h1>
<p>Bài viết đã giới thiệu cách sử dụng Builder Pattern để việc tạo object trong quá trinh test được dễ dàng hơn, đồng thời khiến đoạn code được sáng sủa hơn về mặt trình bày.</p>
<h1 id="tham-khảo">Tham khảo</h1>
<ul>
<li><p>Effective Java - Joshua Bloch</p></li>
<li><p>Design Patterns - Elements of Reusable</p></li>
</ul>]]></content>
  </entry>
  
</feed>
