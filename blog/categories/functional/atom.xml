<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: functional | Blog kỹ thuật máy tính]]></title>
  <link href="http://git@github.com.github.com/blog/categories/functional/atom.xml" rel="self"/>
  <link href="http://git@github.com.github.com/"/>
  <updated>2015-05-07T01:18:39+09:00</updated>
  <id>http://git@github.com.github.com/</id>
  <author>
    <name><![CDATA[kỹ thuật máy tính]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Haskell's laziness]]></title>
    <link href="http://git@github.com.github.com/blog/2015/02/15/haskells-laziness/"/>
    <updated>2015-02-15T04:04:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2015/02/15/haskells-laziness</id>
    <content type="html"><![CDATA[<p>Trong bài viết này, tôi sẽ trình bày về một đặc tính của Haskell khá khác biệt so với các ngôn ngữ lập trình khác, đó là laziness (dịch tiếng việt nôm na là “luời biếng”, nhưng tôi xin đuợc giữ nguyên từ gốc tiếng anh).</p>
<p>Chúng ta hiểu laziness như thế naò? <code>Lazy evaluation</code> nghĩa là, việc evaluate các đối số của hàm sẽ đuợc trì hoãn càng lâu càng tốt, chúng sẽ không đuợc evaluate cho đến khi biểu thức thực sự cần đến gía trị của chúng. Khi một biểu thức đuợc đưa làm đối số cho một hàm, nó chỉ đuợc đóng gọn lại thành một biểu thức chưa đuợc đánh gía (unevaluated expression), mà chưa đuợc tính toán gì cả.</p>
<p>Chúng ta sẽ sử dụng Lecture 7 của course CIS 194 (<a href="http://www.cis.upenn.edu/~cis194/fall14/lectures/07-laziness.html">Link</a>) để minh họa cho việc tìm hiểu Laziness. Bên cạnh đó, tôi sẽ trình bày qua những syntax cơ bản của Haskell theo bài viết.</p>
<h1 id="tính-số-fibonacci">Tính số Fibonacci</h1>
<p>Trong bài tập thứ nhất, chúng ta sẽ viết một hàm <code>fib</code> để tính ra số Fibonacci thứ n</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Exercise 1 </span>
<span class="ot">fib ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span>
fib <span class="dv">0</span> <span class="fu">=</span> <span class="dv">0</span>
fib <span class="dv">1</span> <span class="fu">=</span> <span class="dv">1</span>
fib n <span class="fu">=</span> fib (n<span class="fu">-</span><span class="dv">1</span>) <span class="fu">+</span> fib (n<span class="fu">-</span><span class="dv">2</span>)</code></pre>
<p>Bên trên là điển hình của cách viết một hàm (function) trong Haskell. Truớc tiên, chúng ta có tên hàm nằm truớc dấu <code>::</code>, trong truờng hợp này là hàm <code>fib</code>. Tiếp theo, nằm sau dấu <code>::</code>, chúng ta có <code>Integer -&gt; Integer</code>, đây chính là nơi khai báo đối số và giá trị trả về của Haskell. Trong truờng hợp này, hàm <code>fib</code> nhận đối số là Integer (số Fibonacci thứ mấy) và trả về Integer (số Fibonacci cần tìm). Tài liệu sau đây nói một cách khá đầy đủ về syntax viết function, bạn nên đọc thêm: <a href="http://learnyouahaskell.com/syntax-in-functions">Syntax in Functions</a></p>
<p>Sau dòng khai báo tên hàm và nguyên mẫu hàm là định nghĩa của một loạt pattern matching. Haskell sẽ match từ trên xuống duới, do vậy truớc tiên ta khai báo base case cho số Fibonacci thứ 0 và thứ 1. Các số Fibonacci tiếp theo, vì không match các base pattern nên sẽ sử dụng pattern thứ ba, cộng hai số Fibonacci phía truớc.</p>
<p>Chúng ta thấy cách khai báo pattern matching khá gần gũi vớí định nghiã dãy Fibonacci chúng ta đã học. Tiếp theo, ta định nghiã một dãy Fibonacci vô hạn như sau:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">fibs1 ::</span> [<span class="dt">Integer</span>]
fibs1 <span class="fu">=</span> map fib [<span class="dv">0</span><span class="fu">..</span>]</code></pre>
<p><code>map</code> là một function trong Haskell, nhận vaò hai đối số là một hàm f và một danh sách. Nó sẽ trả về một danh sách mới mà các phần từ là kết qủa trả về tuơng ứng khi áp dụng hàm f với từng phần tử trong danh sách cũ. <code>[0..]</code> là cách viết danh sách tất cả các số nguyên duơng. Như vậy, ta có <code>fibs1</code> là danh sách tất cả các số Fibonacci.</p>
<p>Hãy khởi động GHCi và check hàm mới này:</p>
<pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">ghci</span> 
<span class="kw">Prelude&gt;</span> :l HW07.hs
[<span class="kw">1</span> of 1] Compiling HW07             ( HW07.hs, interpreted )
<span class="kw">Ok</span>, modules loaded: HW07.
<span class="kw">*HW07&gt;</span> fibs1
[<span class="kw">0</span>,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,</code></pre>
<p>Bạn sẽ thấy một vài số Fibonacci đầu tiên hiện ra rất nhanh, nhưng đến một lúc nào đó, sẽ rất lâu để tính đuợc số Fibonacci tiếp theo. Lý do là vì mỗi số Fibonacci bị tính đi tính lại quá nhiều lần!</p>
<p>Và đây là lúc chúng ta áp dụng Laziness của Haskell.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Exercise 2 </span>
<span class="ot">fibs2 ::</span> [<span class="dt">Integer</span>]
fibs2 <span class="fu">=</span> [<span class="dv">0</span>,<span class="dv">1</span>] <span class="fu">++</span> zipWith (<span class="fu">+</span>) fibs2 (tail fibs2)</code></pre>
<p>Chúng ta đã biết dãy Fibonacci bắt đầu từ hai số 0, 1, nên ta khởi đầu khai baó dãy bằng 0,1.</p>
<p>Giả sử ta đã có một dãy Fibonacci vô hạn:</p>
<pre class="sourceCode bash"><code class="sourceCode bash">[<span class="kw">0</span>, 1, 1, 2, 3, 5, 8, 13, ...]</code></pre>
<p><code>tail</code> là phép toán bỏ đi phần tử đầu tiên của một dãy:</p>
<pre class="sourceCode bash"><code class="sourceCode bash">[<span class="kw">1</span>, 1, 2, 3, 5, 8, 13, ...]</code></pre>
<p><code>zipWith</code> kết hợp 2 dãy trên theo từng cặp phần tử sử dụng một phép toán naò đó (ở đây là phép cộng):</p>
<pre class="sourceCode bash"><code class="sourceCode bash">[<span class="kw">0</span>, 1, 1, 2, 3, 5, 8, 13, ...]
<span class="kw">+</span> 
[<span class="kw">1</span>, 1, 2, 3, 5, 8, 13, ...]
= 
[<span class="kw">1</span>, 2, 3, 5, 8, 13, ...]</code></pre>
<p>Như vậy, dãy vô hạn Fibonacci có thể đuợc tính bằng cách thêm hai phần tử đầu tiên (0, 1) vào kết quả sau khi zip dãy Fibonacci vô hạn với <code>tail</code> của nó!</p>
<p>Và đây chính là sức mạnh của laziness! <code>fibs2</code> là kết quả trả về mà chúng ta lại có thể để xuất hiện ở bên vế phải! Haskell chỉ evaluate vế phải khi naò thực sự cần thiết, cho nên mỗi khi cần tính một phần tử mới cho dãy <code>fibs2</code>, nó mới quay ra tìm lại những phần tử đằng truớc (đã đuợc tính).</p>
<p>Bạn hãy thử chạy lại <code>fibs2</code> với GHCi và quan sát, số Fibonacci tuôn ra như thác lũ :) Hãy thử chỉ lấy 100 số Fibonacci ban đầu xem:</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">*HW07&gt;</span> take 100 fibs2</code></pre>
<p>100 số Fibonacci đầu tiên xuất hiện trong chớp mắt!</p>
<h1 id="streams">Streams</h1>
<p>Trong phần này, chúng ta định nghĩa kiểu dữ liệu (data type) <code>Stream</code>, gần giống với <code>list</code> nhưng bị ràng buộc là <em>phải vô hạn</em></p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Stream</span> a <span class="fu">=</span> <span class="dt">Cons</span> a (<span class="dt">Stream</span> a)</code></pre>
<p>Bên trên là cách khai baó một kiểu dữ liệu, bắt đầu bằng từ khoá <code>data</code>. <code>Stream</code> là tên kiểu dữ liệu, tiếp sau đó đến truớc dấu <code>=</code> là <code>type variable</code>, tức là <code>a</code> có thể thay cho <code>Integer</code>, <code>String</code>, … và ta có kiểu dữ liệu <code>Stream Integer</code> hoặc <code>Stream String</code> tuơng ứng. Phiá sau dấu <code>=</code> là constructor của kiểu dữ liệu này: <code>Cons</code>, với 2 đối số thuộc kiểu <code>a</code> và <code>Stream a</code>. Bạn hãy tham khaỏ về cách taọ kiểu dữ liệu tại <a href="http://learnyouahaskell.com/making-our-own-types-and-typeclasses">Link này</a></p>
<p>Hàm sau convert một stream thành list:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">streamToList ::</span> <span class="dt">Stream</span> a <span class="ot">-&gt;</span> [a]
streamToList (<span class="dt">Cons</span> x s) <span class="fu">=</span> x <span class="fu">:</span> streamToList s</code></pre>
<p>Trong exercise 4, chúng ta phải viết một instance của <code>Show</code> cho kiểu dữ liệu Stream. đến đây, chúng ta cần biết thêm về khái niệm <code>Typeclass</code> của Haskell. Typeclass có thể coi là một loại “giao diện”, nó định nghĩa một số loại hành vi, và các kiểu dữ liệu mà có cùng hành vi đó có thể được khai báo là instance của typeclass đó. Lấy ví dụ, <code>Eq</code> typeclass định nghĩa một giao diện cho những thứ có thể so sánh được. Cụ thể các hành vi mà nó định nghĩa như sau:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">class</span> <span class="dt">Eq</span> a <span class="kw">where</span>
<span class="ot">    (==) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span>  
<span class="ot">    (/=) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span>  
    x <span class="fu">==</span> y <span class="fu">=</span> not (x <span class="fu">/=</span> y)  
    x <span class="fu">/=</span> y <span class="fu">=</span> not (x <span class="fu">==</span> y)</code></pre>
<p>Theo đó, bất cứ type nào muốn được là một instance của <code>Eq</code> typeclass sẽ phải khai báo các hàm <code>(==)</code>, <code>(/=)</code> (trên thực tế, chỉ cần khai báo một hàm, vì hàm còn lại được định nghĩa là phủ định của hàm kia).</p>
<p>Ví dụ, ta có một type như sau:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Coin</span> <span class="fu">=</span> <span class="dt">Head</span> <span class="fu">|</span> <span class="dt">Tail</span> </code></pre>
<p>Chúng ta muốn <code>Coin</code> type là một instance của <code>Eq</code> typeclass thì ta làm như sau:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Eq</span> <span class="dt">Coin</span> <span class="kw">where</span> 
    <span class="dt">Head</span> <span class="fu">==</span> <span class="dt">Head</span> <span class="fu">=</span> <span class="dt">True</span> 
    <span class="dt">Tail</span> <span class="fu">==</span> <span class="dt">Tail</span> <span class="fu">=</span> <span class="dt">True</span> 
    _ <span class="fu">==</span> _ <span class="fu">=</span> <span class="dt">False</span> </code></pre>
<p>Ở đây, chúng ta vẫn dùng pattern matching để định nghĩa hàm (==) với từng trường hợp của 2 đối số.</p>
<p>Quay trở lại với exercise 4, chúng ta định nghĩa <code>Stream a</code> thành một instance của <code>Show</code> typeclass như sau:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> <span class="dt">Show</span> (<span class="dt">Stream</span> a) <span class="kw">where</span> 
    show s <span class="fu">=</span> show <span class="fu">$</span> take <span class="dv">20</span> (streamToList s)</code></pre>
<p>Chúng ta thấy sự xuất hiện của kí tự “lạ”: <code>=&gt;</code>. Trong khai báo instance, những gì xuất hiện trước dấu <code>=&gt;</code> là những ràng buộc về type. Ở đây, chúng ta muốn <code>Stream a</code> là instance của <code>Show</code> thì bản thân <code>a</code>, một type variable, cũng phải là một instance của <code>Show</code>. Có như vậy, chúng ta mới định nghĩa được hàm <code>show</code> của <code>Show</code> typeclass cho <code>Stream a</code> dựa trên hàm <code>show</code> cho <code>a</code>.</p>
<p>Đến kí tự lạ tiếp theo: <code>$</code>. Đây chỉ đơn giản là một chỉ dẫn cho Haskell là tất cả những gì xuất hiện sau <code>$</code> có độ ưu tiên phép toán cao hơn, tức là <code>show $ take 20 (streamToList s)</code> tương đương với <code>show (take 20 (streamToList s))</code>. Nhưng chúng ta không muốn dùng quá nhiều dấu ngoặc, phải không :)</p>
<p>Trong định nghĩa hàm <code>show</code> cho <code>Stream a</code>, chúng ta không muốn nó in hết ra vô hạn phần tử, mà chỉ muốn in ra 20 phần tử đầu tiên. Do đó chúng chuyển nó thành list bằng hàm <code>streamToList</code>, lấy 20 phần tử đầu tiên bằng <code>take 20</code> và áp dụng hàm <code>show</code> cho <code>List a</code> type (khi <code>a</code> là instance của <code>Show</code> rồi thì <code>[a]</code> cũng là instance của <code>Show</code> )</p>
<p>Chúng ta phải có một vài <code>Stream</code> để test. Hãy định nghĩa chúng:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">streamRepeat ::</span> a <span class="ot">-&gt;</span> <span class="dt">Stream</span> a 
streamRepeat x <span class="fu">=</span> <span class="dt">Cons</span> x (streamRepeat x)

<span class="ot">streamMap ::</span> (a<span class="ot">-&gt;</span>b) <span class="ot">-&gt;</span> <span class="dt">Stream</span> a <span class="ot">-&gt;</span> <span class="dt">Stream</span> b
streamMap f (<span class="dt">Cons</span> x s) <span class="fu">=</span> <span class="dt">Cons</span> (f x) (streamMap f s)

<span class="ot">streamFromSeed ::</span> (a<span class="ot">-&gt;</span>a) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Stream</span> a 
streamFromSeed f x <span class="fu">=</span> <span class="dt">Cons</span> x (streamMap f (streamFromSeed f x))</code></pre>
<p><code>streamRepeat</code> tạo ra một stream chứa vô hạn các phần tử giống hệt nhau. <code>streamMap</code> áp dụng một hàm <code>(a-&gt;b)</code> lên tất cả các phần tử của một <code>Stream a</code> để nhận được một Stream mới: <code>Stream b</code>. Cuối cùng <code>streamFromSeed</code> là một cách khác để tạo ra một stream, bằng cách bắt đầu từ một “hạt giống” thuộc type <code>a</code>, cũng chính là phần tử đầu tiên của Stream, rồi liên tục sử dụng một hàm có kiểu <code>a-&gt;a</code> để tạo ra các phẩn tử tiếp theo.</p>
<p>Tôi sẽ để dành phần này cho độc giả chiêm nghiệm xem tại sao lại viết như vậy.</p>
<p>Bây giờ, chúng ta hãy cùng test thử những gì chúng ta đã viết trong GHCi</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">*HW07&gt;</span> show $ streamFromSeed (<span class="st">&#39;x&#39;</span>:) <span class="st">&quot;o&quot;</span>
<span class="st">&quot;[</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">xo</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">xxo</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">xxxo</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">xxxxo</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">xxxxxo</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">xxxxxxo</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">xxxxxxxo</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">xxxxxxxxo</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">xxxxxxxxxo</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">xxxxxxxxxxo</span>
<span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">xxxxxxxxxxxo</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">xxxxxxxxxxxxo</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">xxxxxxxxxxxxxo</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">xxxxxxxxxxxxxxo</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">xxxxxxxxxxxxxxxo</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">xxxxxxxxxxxxxxxxo</span><span class="dt">\&quot;</span><span class="st">,</span>
<span class="dt">\&quot;</span><span class="st">xxxxxxxxxxxxxxxxxo</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">xxxxxxxxxxxxxxxxxxo</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">xxxxxxxxxxxxxxxxxxxo</span><span class="dt">\&quot;</span><span class="st">]&quot;</span>
<span class="kw">*HW07&gt;</span> show $ streamRepeat <span class="st">&quot;o&quot;</span>
<span class="st">&quot;[</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">,</span><span class="dt">\&quot;</span><span class="st">o</span><span class="dt">\&quot;</span><span class="st">]&quot;</span>
<span class="kw">*HW07&gt;</span> show $ streamMap (+ 1) <span class="kw">(streamRepeat</span> 0<span class="kw">)</span>
<span class="st">&quot;[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]&quot;</span></code></pre>
<p>Như vậy ta đã có một số hàm để làm việc với <code>Stream</code>, ta sẽ thử định nghĩa dãy số tự nhiên bằng <code>Stream</code> như sau:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">nats ::</span> <span class="dt">Stream</span> <span class="dt">Integer</span>
nats <span class="fu">=</span> streamFromSeed (<span class="fu">+</span> <span class="dv">1</span>) <span class="dv">0</span> </code></pre>
<p>Test trong GHCi:</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">*HW07&gt;</span> show nats
<span class="st">&quot;[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]&quot;</span></code></pre>
<p>Ví dụ tiếp theo: Tính ruler function f(n) = số mũ lớn nhất của 2 là ước số của n. Bình thuờng chúng ta sẽ nghĩ đến việc chia 2 cho đến khi lẻ thì thôi. Nhưng tôi sẽ trình bày một lời giải khác, sử dụng laziness và cấu trúc dữ liệu vô hạn của Haskell.</p>
<p>Thay vì tính từng f(n) một, chúng ta sẽ xây dựng hẳn cả dãy số <code>ruler</code> f(n) với n bắt đầu từ 1: <code>0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4...</code>, trong đó phần tử thứ n trong stream là số mũ lớn nhất của 2 là ước số của n.</p>
<p>Dễ thấy có thể coi dãy trên là trộn xen kẽ của hai dãy, một dãy toàn 0 (vì tuơng ưng với n lẻ nên số mũ lớn nhất của 2 chỉ là 0) và dãy còn lại tuơng ứng với n chẵn. điều kì diệu là dãy thứ hai bao gồm chính các phần tử của dãy <code>ruler</code> nhưng cộng thêm 1 (Bạn thử suy nghĩ xem tại sao). Vì thế mà ta có cách khai báo <code>ruler</code> là một <code>Stream Integer</code> rất đẹp như sau:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">interleaveStreams ::</span> <span class="dt">Stream</span> a <span class="ot">-&gt;</span> <span class="dt">Stream</span> a <span class="ot">-&gt;</span> <span class="dt">Stream</span> a
interleaveStreams (<span class="dt">Cons</span> x1 s1) <span class="fu">~</span>(<span class="dt">Cons</span> x2 s2) <span class="fu">=</span> <span class="dt">Cons</span> x1 (<span class="dt">Cons</span> x2 (interleaveStreams s1 s2))

<span class="ot">ruler ::</span> <span class="dt">Stream</span> <span class="dt">Integer</span>
ruler <span class="fu">=</span> interleaveStreams (streamRepeat <span class="dv">0</span>) (streamMap (<span class="fu">+</span> <span class="dv">1</span>) ruler)</code></pre>
<p>Lại thêm một kí tự lạ: tilde sign <code>~</code>! Tôi đã thêm nó vào truớc đối số thứ hai của <code>interleaveStreams</code>. Kí tự này dùng để báo hiệu compiler đừng evaluate đối số thứ hai này. Nếu không có kí tự <code>~</code>, pattern matching của hàm <code>interleaveStream</code> sẽ phải evaluate đối số thứ hai để đảm bảo nó thuộc type <code>Stream a</code>. đó không phải là điều chúng ta muốn, vì hàm <code>ruler</code> gọi hàm <code>interleaveStream</code> với đối số thứ hai chứa <code>ruler</code>, tức là gọi đệ quy vô hạn lần. Nếu đối số thứ hai của <code>interleaveStream</code> không lazy, hàm này sẽ dừng mãi ở việc evaluate để phục vụ pattern matching.</p>
<p>Nói nôm na, thêm dấu <code>~</code> truớc một đối số là chúng ta đã bảo với compiler là: “đừng lo, tôi đảm bảo đối số này sẽ có kiểu Stream a, nên đừng evaluate làm gì” :)</p>
<h1 id="kết-luận">Kết luận</h1>
<p>Bài viết này đã trình bày một số ví dụ để minh họa lazy evaluation của Haskell. Nó cho phép ta làm việc với những kiểu cấu trúc dữ liệu <em>vô hạn</em>, một pattern khá thuờng gặp trong Haskell. Việc định nghiã một cấu trúc dữ liệu vô hạn thực chất chỉ taọ ra một biểu thức chưa đuợc evaluate, mà ta sử dụng nó để chỉ ra cấu trúc dữ liệu hoàn chỉnh “có thể” phát triển đến như thế naò, và chỉ phần naò cần thiết mới đuợc tính toán.</p>
<p>Tuy nhiên, chủ đề laziness là một chủ đề khá phức tạp, đặc biệt khi chúng ta muốn đánh giá time và space của program. Có khá nhiều bài viết trên mạng về vấn đề này, một trong số đó bạn có thể tham khảo thêm là:</p>
<ul>
<li><a href="https://hackhands.com/lazy-evaluation-works-haskell/">How Lazy Evaluation Works in Haskell</a></li>
</ul>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mở đầu về Haskell]]></title>
    <link href="http://git@github.com.github.com/blog/2015/01/03/mo-dau-ve-haskell/"/>
    <updated>2015-01-03T14:09:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2015/01/03/mo-dau-ve-haskell</id>
    <content type="html"><![CDATA[<p>Chúc mừng năm mới 2015 tới tất cả bạn đọc ktmt blog :) Chúc các bạn một năm mới coding thật productive! ^^</p>
<p>Năm mới chắc hẳn hầu hết mọi người đều có resolution của riêng mình. Một trong những resolution của tôi năm nay là học một ngôn ngữ lập trình mới, đến level có thể viết một chương trình không đơn giản với nó. (Bạn có thể tham khảo một danh sách các resolutions cho programmer ở <a href="http://matt.might.net/articles/programmers-resolutions/">đây</a>). Ngôn ngữ mà tôi chọn là Haskell, một functional programming language, vì những ý tưởng trong ngôn ngữ lập trình này khác hẳn những ngôn ngữ lập trình tôi đã tiếp cận, như C/C++, Java, Python.</p>
<p>Tôi mới bắt đầu với Haskell được một vài tháng, và cảm thấy khá thích thú về những ý tưởng mới mẻ của nó. Tôi sẽ bắt đầu viết chia sẻ những kiến thức tôi thu thập được trong quá trình tìm hiểu ngôn ngữ này trên ktmt. Tuy nhiên, tôi phải nói trước là Haskell khá trừu tượng, và với một beginner như tôi, việc cố diễn giải các khái niệm khó của Haskell có thể sẽ không chính xác và dễ gây hiểu lầm. Vì thế, tôi sẽ tập trung vào viết những đoạn code để giải quyết một vấn đề to hoặc nhỏ nào đó và cố giải thích chúng làm được như thế bằng cách nào. Những khái niệm khó, tôi sẽ dẫn về những bài viết nổi tiếng để bạn đọc có thể tìm hiểu thêm.</p>
<p>Trong bài viết đầu tiên này, tôi sẽ hướng dẫn cách cài đặt những thành phần cơ bản để chúng ta có thể bắt đầu lập trình với Haskell. Cuối bài, sẽ có một chương trình Hello World rất đơn giản để chúng ta test xem môi trường của chúng ta đã hoàn thiện chưa.</p>
<p>Chú ý: Hiện tại tôi test trên máy tính của tôi (Windows 7). Tôi đã từng cài đặt môi trường trên Mac OS X và Ubuntu Linux, nhưng chưa có thời gian kiểm tra lại. Tôi sẽ thêm thông tin nếu cần thiết.</p>
<h1 id="the-haskell-platform">The Haskell Platform</h1>
<p>Đây là cách đơn giản nhất để chúng ta có thể bắt đầu với Haskell. Trên <a href="https://www.haskell.org/platform/">Homepage</a>, Haskell Platform được gọi là “Haskell: batteries included”. Trên homepage này, bạn có thể tải về cả package để cài đặt cho cả ba môi trường: Windows, Linux, Mac OS X. Sau khi cài đặt, bạn sẽ có rất nhiều thành phần tiêu chuẩn để bắt đầu lập trình với Haskell (<a href="https://www.haskell.org/platform/contents.html">List</a>). Trong số đó, có những thành phần tiêu biểu sau:</p>
<h2 id="ghc-glassgow-haskell-compiler">GHC (Glassgow Haskell Compiler)</h2>
<p>Đây là compiler cho Haskell.</p>
<h2 id="ghci">GHCi</h2>
<p>Đây là GHC interactive interpreter. Nếu bạn đã từng lập trình với Python hoặc Ruby, bạn có thể coi GHCi giống như khi bạn gõ <code>python</code> (với Python) hoặc <code>irb</code> (với Ruby) trên command line. GHCi cực kì hữu dụng trong quá trình bạn viết code Haskell.</p>
<p>Bạn sẽ dành khá nhiều thời gian trong GHCi, nên chúng ta sẽ dành chút thời gian để config GHCi sao cho thuận tiện nhất. File config của GHCi là <code>.ghci</code>, vị trí của file này tùy thuộc vào hệ thống bạn đang sử dụng, bạn tham khảo ở đây: <a href="https://downloads.haskell.org/~ghc/7.4.2/docs/html/users_guide/ghci-dot-files.html">GHCi dot files</a>. Tôi tạo mới một file <code>.ghci</code> trong Home folder với nội dung:</p>
<pre class="sourceCode bash"><code class="sourceCode bash">:<span class="kw">set</span> prompt <span class="st">&quot;h&gt; &quot;</span></code></pre>
<p>Làm vậy, mỗi lần mở GHCi, prompt của bạn chỉ đơn giản là <code>h&gt;</code> chứ không phải là tên tất cả các module đã load (bạn hãy thử xem khác nhau như thế nào nếu không có dòng setting trên)</p>
<h2 id="cabal">Cabal</h2>
<p>Cabal là viết tắt của <code>Common Architecture for Building Applications and Libraries</code>. Về chức năng, nó tương tự như <code>pip</code> của Python hay <code>gem</code> của Ruby, dùng để cài đặt những package chuẩn từ <code>Hackage</code> (Haskell Central package archive). Những người viết package sử dụng <code>Hackage</code> để publish các libraries hay programs của họ, và những Haskell programmer khác sử dụng các tool như <code>cabal-install</code> để download và cài đặt các package này.</p>
<p>Trên Windows 7, mỗi khi sử dụng cabal, các package sẽ được install vào <code>$HOME$\AppData\Roaming\cabal</code>. Trên Unix-based system, chúng được install vào <code>~/.cabal/</code>.</p>
<p>Sau đây là những thao tác đầu tiên bạn nên làm với <code>cabal</code>:</p>
<pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">cabal</span> update</code></pre>
<p>Dùng để update list các package phiên bản mới nhất trên <code>hackage.haskell.org</code>.</p>
<pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">cabal</span> install cabal-install</code></pre>
<p>Dùng để update phiên bản <code>cabal-install</code> mới nhất</p>
<h1 id="code-editor-sublime-text">Code Editor: Sublime Text</h1>
<p>Bạn có thể dùng bất cứ một text editor nào để viết code Haskell. Nếu bạn sử dụng Sublime Text, bạn nên cài plugin SublimeHaskell. Đây là plugin hỗ trợ Cabal build, error and warning highlighting, smart completion và tích hợp ghc-mod. Bạn có thể tham khảo thêm thông tin tại <a href="https://github.com/SublimeHaskell/SublimeHaskell">GitHub repo</a></p>
<h1 id="cabal-sandbox">Cabal sandbox</h1>
<p>Với Haskell, <code>sandbox</code> cho phép chúng ta build các package một cách độc lập với package environment của hệ thống, bằng cách tạo ra một package environment riêng cho project hiện tại. Nếu bạn đã quen thuộc với Python’s <code>virtualenv</code> hoặc Ruby’s <code>RVM</code>, <code>sandbox</code> là một khái niệm tương tự.</p>
<p><a href="http://coldwa.st/e/blog/2013-08-20-Cabal-sandbox.html">Bài viết này</a> trình bày khá dễ hiểu về tại sao nên sử dụng <code>sandbox</code> để tránh dependency hell, bạn có thể tham khảo thêm. Một số thao tác cơ bản với cabal sandbox gồm có:</p>
<pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">cd</span> /path/to/my/haskell/project
$ <span class="kw">cabal</span> sandbox init                    <span class="co"># Init the sandbox</span>
$ <span class="kw">cabal</span> install --only-dependencies     <span class="co"># Install dependencies into the sandbox</span>
$ <span class="kw">cabal</span> build                           <span class="co"># Build your package inside the sandbox</span></code></pre>
<p>Chú ý ở đây, cabal sandbox là một feature của cabal từ version 1.18 trở đi, cho nên sau khi init một sandbox hoàn toàn mới, các command tiếp theo (như <code>build</code> hay <code>install</code>) đều sẽ sử dụng sandbox chứ không phải package environment của hệ thống.</p>
<h1 id="ví-dụ-đầu-tiên-hello-world">Ví dụ đầu tiên: Hello World</h1>
<p>Chúng ta sẽ bắt đầu với ví dụ muôn thuở khi bắt đầu ngôn ngữ lập trình mới: In ra màn hình consle dòng chữ <code>Hello World</code>.</p>
<pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">mkdir</span> haskell-hello-world
$ <span class="kw">cd</span> haskell-hello-world
$ <span class="kw">cabal</span> init</code></pre>
<p><code>cabal init</code> sẽ giúp chúng ta thêm thông tin cho project của mình, như: tên project, version, người phát triển, license,…</p>
<p>Tiếp theo, chúng ta edit file Cabal. Ví dụ sau khi edit, file <code>haskell-hello-world.cabal</code> của tôi có nội dung như sau:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">
name<span class="fu">:</span>                haskell<span class="fu">-</span>hello<span class="fu">-</span>world
version<span class="fu">:</span>             <span class="fl">0.1</span><span class="fu">.</span><span class="fl">0.0</span>
synopsis<span class="fu">:</span>            <span class="dt">Hello</span> <span class="dt">World</span><span class="fu">!</span>  
description<span class="fu">:</span>         <span class="dt">Print</span> <span class="ch">&#39;Hello World&#39;</span> to console screen  
license<span class="fu">:</span>             <span class="dt">BSD3</span>
license<span class="fu">-</span>file<span class="fu">:</span>        <span class="dt">LICENSE</span>
author<span class="fu">:</span>              <span class="dt">Viet</span> <span class="dt">Nguyen</span>, <span class="dv">2015</span>
maintainer<span class="fu">:</span>          viet<span class="fu">.</span>nguyen182<span class="fu">@</span>gmail<span class="fu">.</span>com
copyright<span class="fu">:</span>           <span class="dt">Viet</span> <span class="dt">Nguyen</span> 
category<span class="fu">:</span>            <span class="dt">Text</span>
build<span class="fu">-</span><span class="kw">type</span><span class="fu">:</span>          <span class="dt">Simple</span>
cabal<span class="fu">-</span>version<span class="fu">:</span>       <span class="fu">&gt;=</span><span class="fl">1.10</span>

executable haskell<span class="fu">-</span>hello<span class="fu">-</span>world
  ghc<span class="fu">-</span>options<span class="fu">:</span>         <span class="fu">-</span><span class="dt">Wall</span>
  hs<span class="fu">-</span>source<span class="fu">-</span>dirs<span class="fu">:</span>      src
  main<span class="fu">-</span>is<span class="fu">:</span>             Main.hs 
  build<span class="fu">-</span>depends<span class="fu">:</span>       base <span class="fu">&gt;=</span><span class="fl">4.7</span> <span class="fu">&amp;&amp;</span> <span class="fu">&lt;</span><span class="fl">4.8</span>
  default<span class="fu">-</span>language<span class="fu">:</span>    <span class="dt">Haskell2010</span></code></pre>
<p>Một số điểm lưu ý từ file cabal trên:</p>
<ul>
<li>Đặt <code>hs-source-dirs</code> là thư mục <code>src</code> để Cabal biết nơi lưu các file modules</li>
<li>Đặt <code>main-is</code> thành <code>Main.hs</code> để compiler biết đầu là main function của file binary build ra</li>
<li><code>ghc-options</code> đặt thành <code>-Wall</code> để chúng ta có thể thấy các Warning từ GHC</li>
<li><code>build-depends</code> là nơi khai báo các library cần sử dụng, có thể kèm theo các option về yêu cầu version.</li>
</ul>
<p>File code của chúng ta nằm ở <code>src/Main.hs</code> có nội dung như sau:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span> 

main <span class="fu">=</span> putStrLn <span class="st">&quot;Hello World!&quot;</span></code></pre>
<p>Đây là một module rất đơn giản, và vì nó được dùng làm target cho <code>main-is</code>, nó phải có một function tên <code>main</code> và tên của module cũng phải tên là <code>Main</code>. Hiện tại, bạn chưa cần để ý vội đến cú pháp mà chỉ cần biết rằng chương trình in ra màn hình dòng chữ “Hello World!”. (Chú ý: Có thể bạn sẽ nghĩ <code>putStrLn</code> tương tự như <code>printf</code> hay <code>cout</code> ở C/C++, nhưng với Haskell, nguyên lý sẽ khác hơn so với bạn nghĩ, nhưng đó là câu chuyện ở những bài viết sau này.)</p>
<p>Tiếp theo, chúng ta tạo một Cabal sandbox để chứa toàn bộ các dependencies (ví dụ Hello World này của tôi hơi trivial, vì không dùng library nào cả, nhưng vì tính đầy đủ, tôi vẫn xin trình bày về sandbox ở đây):</p>
<pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">cabal</span> sandbox init</code></pre>
<p>Sau bước này, chúng ta sẽ có file <code>cabal.sandbox.config</code> chứa thông tin về package environment, và sandbox nằm ở thư mục <code>.cabal-sandbox</code></p>
<pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">cabal</span> install --only-dependencies
$ <span class="kw">cabal</span> install</code></pre>
<p>Nếu build thành công, bạn sẽ có file binary <code>haskell-hello-world</code> ở <code>dist/build/haskell-hello-world</code>. Thử chạy nó xem sao:</p>
<pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">./dist/build/haskell-hello-world/haskell-hello-world</span>
<span class="kw">Hello</span> World!</code></pre>
<p>Và chúng ta đã build thành công program đầu tiên!</p>
<h1 id="kết-luận">Kết luận</h1>
<p>Bài viết này là bài viết đầu tiên của tôi về Haskell. Chưa có gì nhiều về syntax, idea, concept, mà chỉ là những setup ban đầu để dễ dàng bắt đầu với Haskell. Trong những bài viết tiếp theo, tôi sẽ cố gắng từng bước một trình bày các ý tưởng của Haskell một cách dễ hiểu.</p>
<p>Hẹn gặp lại!</p>]]></content>
  </entry>
  
</feed>
