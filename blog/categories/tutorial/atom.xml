<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorial | Blog kỹ thuật máy tính]]></title>
  <link href="http://git@github.com.github.com/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://git@github.com.github.com/"/>
  <updated>2015-05-07T01:18:39+09:00</updated>
  <id>http://git@github.com.github.com/</id>
  <author>
    <name><![CDATA[kỹ thuật máy tính]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[tự tạo dịch vụ thu gọn url với sinatra và redis]]></title>
    <link href="http://git@github.com.github.com/blog/2013/07/10/tu-tao-dich-vu-thu-gon-url-voi-sinatra-va-redis/"/>
    <updated>2013-07-10T15:24:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/07/10/tu-tao-dich-vu-thu-gon-url-voi-sinatra-va-redis</id>
    <content type="html"><![CDATA[<h2 id="mở-đầu">Mở đầu</h2>
<p>Chắc hẳn các bạn đã biết về các dịch vụ rút gọn url, điển hình là bit.ly. Mục đích của dịch vụ này là nhằm thu gọn là những url rất dài để tiết kiệm chữ (cho những dịch vụ giới hạn về số kí tự như twitter chẳng hạn) và để cho url nhìn gọn hơn. Cơ chế của một dịch vụ rút gọn url khá đơn giản, vậy tại sao không tự làm một dịch vụ cho chính mình. Bài này mình sẽ hướng dẫn cách làm một url shorten service đơn giản dựa trên sinatra và redis.</p>
<h2 id="cài-đặt">Cài đặt</h2>
<p>Để cài đặt sinatra thì bạn phải có ruby đã cài sẵn trên máy, việc cài đặt sinatra khá đơn giản thông qua <strong>gem</strong>: {% codeblock sinatra_install.sh %} gem install sinatra {% endcodeblock %}</p>
<p>Tiếp đến là redis, để cài đặt redis thì tùy thuộc vào hệ điều hành, trên mac-osx các bạn có thể cài đặt rất dễ dàng thông qua <strong>brew</strong>: {% codeblock redis_install.sh %} brew install redis {% endcodeblock %} Trên linux hoặc windows các bạn có thể google để tìm ra hướng dẫn cài tương ứng. Các bạn khởi động redis thông qua, khi khởi động redis mà không set option với config gì cả thì redis sẽ chạy trên localhost và port là 6789: {% codeblock redis_install.sh %} redis-server {% endcodeblock %}</p>
<h2 id="giới-thiệu-qua-về-sinatra-và-redis">Giới thiệu qua về sinatra và redis</h2>
<p>Sinatra là một mini webframework based trên Rack(Rack là web server interface rút gọn nhất có thể rất nổi tiếng trên ruby). Sinatra cung cấp cho bạn một DSL(Domain specific language) để có thể build một web app một cách dễ dàng nhất. Các bạn có thể tìm hiểu về sinatra ở <a href="http://www.sinatrarb.com/intro.html">trang chủ của sinatra</a>.</p>
<p>Redis là hệ thống lưu trữ key-value với rất nhiều tính năng và được sử dụng rộng rãi. KTMT blog đã có <a href="http://ktmt.github.io/blog/2013/07/02/tim-hieu-redis/">một bài viết về redis</a> cách đây không lâu, các bạn có thể tham khảo lại. Về cách sử dụng redis, các bạn có thể tham khảo tại <a href="http://redis.io/documentation">trang chủ redis</a></p>
<h2 id="thiết-kế-chương-trình">Thiết kế chương trình</h2>
<p>Cơ chế của một dịch vụ thu gọn hết sức đơn giản, được thể hiện ở diagram dưới đây:</p>
<p>{% img /images/urlshorten/url-shorten-flow.png %}</p>
<p>Chắc bạn nào đã dùng bit.ly sẽ tưởng tượng ra usage flow một dịch vụ rút gọn url nên có. Cơ chế chúng ta dùng ở bài viết này như sau: đầu tiên user sẽ gửi url cần rút gọn thông qua form input. Web server nhận được request này sẽ hash url lại thành một chuỗi ngắn hơn, thông thường từ 5~10 kí tự, webserver sẽ lưu lại cặp <hash, origin url> vào redis, và trả lại chuỗi hash đó được ghép vào url của dịch vụ : http://your-service.com/hash.</p>
<p>Khi user click vào http://your-service.com/hash, đầu tiên server sẽ dùng chuỗi hash tìm original url trên redis, sau đó sẽ trả về response 301 (redirect) với location mới là original url, nhờ vậy mà user sẽ được redirect đến original url.</p>
<p>Như vậy là đã định hình ý tưởng nên làm gì, chúng ta sẽ bắt tay vào code</p>
<h2 id="coding">Coding</h2>
<ol type="1">
<li>Tạo khung Đầu tiên là sườn của một Sinatra app, có get, post. Chúng ta tạo folder cho app của chúng ta và tạo 1 file là app.rb chính là sinatra app: {% codeblock make.sh %} mkdir url_shorten &amp;&amp; cd url_shorten touch app.rb &amp;&amp; vim app.rb {% endcodeblock %}</li>
</ol>
<p>Sau đó chúng ta sẽ tạo cái khung cho sinatra app như dưới đây: {% codeblock url_shorten.rb %} require ‘sinatra/base’ require ‘redis’</p>
<p>class UrlShort &lt; Sinatra::Base set :public_dir, File.dirname(<strong>FILE</strong>) + ‘/static’</p>
<p>get ‘/’ do erb :index end end</p>
<p>UrlShort.run! {% endcodeblock %}</p>
<p>Sinatra có syntax dạng DSL: get ‘some info’ do ‘something’ để represent cho ‘get’ request rất dễ hiểu. Đoạn code trên có nghĩa là khi request đến ‘/’ (root) thì sẽ render file index nằm trong views. Như vậy chúng ta đã có cái khung đơn giản nhất của một web service, nhận request, trả về view. (erb là template engine có sẵn của ruby, nó sẽ render file có đuôi erb ra html)</p>
<p>Tiếp đến chúng ta sẽ thực hiện xử lý hash url. Về mặt lý thuyết thì gọi là hash không đúng lắm vì hash phải là nhận đầu vào X và trả lại Y là kết quả của việc hash X, bài toán của chúng ta ở đây chỉ đơn thuần là generate ra một chuỗi random để represent cho một cái url, như vậy bài toán của chúng ta sẽ là một hàm random_hash(N) nhận đầu vào N là độ dài của chuỗi input và đầu ra là một chuỗi random (cả chữ cả số) có độ dài N, ví dụ như sau: {% codeblock hash.rb %} rand_hash(5) #=&gt; “s4xA6” {% endcodeblock %} Để giải quyết bài toán này thì có khá nhiều hướng đi:</p>
<ol type="1">
<li>Loop từ 1 đến 5 rồi với mỗi lần loop bạn random ra một số hoặc chữ cái.</li>
<li>Tạo ra 1 array có độ dài 64 gồm từ [0..9] [a..z] và [A..Z] và random ra 5 vị trí trong đó (việc này có thể thực hiện rất dễ dàng thông qua Array#sample của ruby).</li>
<li>Sử dụng base64. base64 có một đặc điểm là sẽ biến 1 số M thành 1 chuỗi cả chữ cả số có độ dài max là log(64)(M). Do đó để tạo ra một chuỗi random có length N thì chúng ta chỉ cần random một số M nằm trong khoảng 64^(N-1) đến 64^(N) và chuyển nó về base 64.</li>
<li>Sử dụng một số kĩ thuật generate 64bit (mà đã được giới thiệu ở <a href="http://ktmt.github.io/blog/2013/06/09/xay-dung-he-thong-sinh-64bit-unique-id/">bài viết về generate 64bit uid</a> trên KTMT gần đây.</li>
</ol>
<p>Ở bài viết này chúng ta sẽ sử dụng kĩ thuật số (3). Chúng ta đưa hàm generate hash vào trong helper của sinatra thông qua hàm helpers như sau: {% codeblock hash.rb %} class UrlShort &lt; Sinatra::Base .. helpers do def rand_hash(length) gap = 64<strong>(length) - 64</strong>(length-1) (rand(gap) + 64**(length-1)).to_s(64) end end … {% endcodeblock %}</p>
<p>Tiếp theo chúng ta sẽ làm nhiệm vụ gắn hash thu được với url thành một cặp key-value và ghi vào redis. Để làm nhiệm vụ này thì đầu tiên chúng ta cần khởi tạo redis, mình khởi tạo redis bằng cách overwrite constructor của app và đưa redis instance vào thành 1 instance property. Ngoài ra, chúng ta cũng không muốn 1 url mà mỗi lần request lại tạo một hash khác nhau , rất tốn tài nguyên, do đó mỗi lần gen hash mình sẽ lưu duplicate thành 2 cặp key-value. Một cặp chứa url làm key và hash làm value, và một cặp chứ hash làm key và url là value, điều này đảm bảo mối liên hệ giữa url/hash là 1/1.</p>
<p>{% codeblock implement.rb %} post ‘/’ do <span class="citation" data-cites="error">@error</span> = nil <span class="citation" data-cites="error">@error</span> = ‘please enter url’ if URI.regexp.match(params[:url]).nil? <span class="citation" data-cites="success">@success</span> = false</p>
<p>unless <span class="citation" data-cites="error">@error</span> if params[:url] and not params[:url].empty? <span class="citation" data-cites="url">@url</span> = params[:url] <span class="citation" data-cites="hash">@hash</span> = rand_hash(5) exist = <span class="citation" data-cites="redis.setnx">@redis.setnx</span> “url:#{<span class="citation" data-cites="url">@url</span>}”, <span class="citation" data-cites="hash">@hash</span> if exist #key not set <span class="citation" data-cites="redis.setnx">@redis.setnx</span> “hash:#{<span class="citation" data-cites="hash">@hash</span>}”, <span class="citation" data-cites="url">@url</span> else <span class="citation" data-cites="hash">@hash</span> = <span class="citation" data-cites="redis.get">@redis.get</span> “url:#{<span class="citation" data-cites="url">@url</span>}” end <span class="citation" data-cites="success">@success</span> = true end end</p>
<p>erb :index end {% endcodeblock %}</p>
Như vậy chúng ta đã có <span class="citation" data-cites="hash">@hash</span> để trả về cho user, chúng ta sẽ ghep hash vào trong views để hiển thị cho user (views/index.rb) {% codeblock index.erb %}
<form id="form" method="post">
<input type="text" value="" name="url" id="url"/> <input type="submit" value="shorten" id="submit" class="submit"/>
</form>
<hr/>
<div class="mes">
Result
</div>
&lt;% if <span class="citation" data-cites="error">@error</span> %&gt;
<div id="error">
<pre><code>&lt;%= @error %&gt;</code></pre>
</div>
<p>&lt;% else %&gt; &lt;% if <span class="citation" data-cites="success">@success</span> %&gt; <a id="result" href='<%= "#{escape_html(url)}#{@hash}" %>‘&gt;&lt;%= “#{escape_html(url)}#{<span class="citation" data-cites="hash">@hash</span>}” %&gt;</a> <input data-clipboard-text='<%="#{escape_html(url)}#{@hash}" %>’ type=“button” id=“yank” class=“submit” value=“yank”/&gt; &lt;% end %&gt;<br />&lt;% end %&gt; {% endcodeblock %}</p>
<p>Phần việc còn lại chúng ta phải giải quyết là khi user click vào link. Link của chúng ta có dạng là www.my-application.com/#{hash}, với sinatra để lọc phần hash hết sức đon giản vì sinatra đã tự động lọc hộ chúng ta và đưa vào biến global params, do đó chúng ta chỉ cần lấy hash từ params, tìm trong redis, và redirect user là ok:</p>
<p>{% codeblock redirect.rb %} get ‘/:hash’ do url = <span class="citation" data-cites="redis.get">@redis.get</span> “hash:#{params[:hash]}” redirect url end {% endcodeblock %}</p>
<p>Như vậy chúng ta đã có một flow hoàn chỉnh rồi, thêm tí css và sử dụng <a href="https://github.com/zeroclipboard/ZeroClipboard">ZeroClipboard</a> để có nút yank để copy url vào clipboard, chúng ta đã có một dịch vụ rút gọn url cho riêng mình!</p>
<p>{% img /images/urlshorten/background.png %}</p>
<p>Toàn bộ source code cho tutorial này mình đang để ở đây, mọi người có thể sử dụng tùy ý :). <a href="https://github.com/ktmt/link_shorttener" class="uri">https://github.com/ktmt/link_shorttener</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[blogging with github and octopress]]></title>
    <link href="http://git@github.com.github.com/blog/2013/04/30/huong-dan-su-dung-octopress-cho-blog-tren-github/"/>
    <updated>2013-04-30T23:20:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/04/30/huong-dan-su-dung-octopress-cho-blog-tren-github</id>
    <content type="html"><![CDATA[<h3 id="tạo-blog-trên-github">1. Tạo blog trên github</h3>
<p>Hẳn là một github user, hẳn bạn biết github hỗ trợ cho user tạo một static blog trên domain của github (xxx.github.io). Để tạo blog cá nhân thì bạn có thể tham khảo chi tiết ở <a href="http://pages.github.com/">đây</a>. Hiện tại thì để tạo github page thì đã có giao diện rất dễ sử dụng nên mình sẽ không nói thêm ở đây. Về mặt bản chất thì github page chỉ là một <strong>repo</strong> trên github, trong đấy có chứa các static file, và được trỏ đến domain xxx.github.io.</p>
<h3 id="jekyll-và-github-page">2. Jekyll và github page</h3>
<p>Khi bạn push bất kì thứ gì lên repo của github page, github sẽ chạy site generator sử dụng jekyll. Tại sao phải sử dụng site generator? Vì github không chỉ hỗ trợ html mà còn hộ trợ markdown, một markup language khá đơn giản và dễ sử dụng ( bạn có thể tham khảo thêm ở <a href="http://en.wikipedia.org/wiki/Markdown">đây</a>. Vậy bạn có thể đoán ra jekyll là gì: jekyll là một sản phẩm của Tom Preston-Werner, ceo của github. Jekyll sẽ nhận input là một template directory, chạy qua một cái converter engine để convert từ (Textile | Markdown | Liquid) sang html, tạo ra một static website. Như vậy bạn đã có thể hình dung ra cách để tạo ra một github page:</p>
<p>{% img /images/OctopressGuide/octopress1.png %}</p>
<h3 id="sử-dụng-octopress-để-gen-blog-trên-github-page">3. Sử dụng octopress để gen blog trên github page</h3>
<p>Octopress là một framework design cho jekyll. Gọi là framework nghe hơi lớn, nhưng nói một cách ngắn gọn, octopress là một bộ template/tools/ plugin giúp cho việc generate static site đơn giản hơn. Những tính năng chính của octopress bao gồm:</p>
<ul>
<li>Responsive design template (gồm css, js, html)</li>
<li>Build-in 3rd supports cho một số mạng xã hội (như like button của facebook, tweet button của twitter), và đặc biệt có comment của disqus khá tiện</li>
<li>Build-in web server để review sau khi generate qua jekyll</li>
<li>Hệ thống theming rất tốt với Compass và Sass</li>
</ul>
<p>Nói lý thuyết nhiều quá, giờ vào cụ thể về cách cài đặt và sử dụng:</p>
<p>Prerequisite: máy bạn phải install git và ruby, cách install các bạn có thể google :D Sau đấy bạn clone octopress về máy, install bundler rồi install các dependencies như sau:</p>
<p>{% codeblock install install.sh %} git clone git://github.com/imathis/octopress.git octopress cd octopress gem install bundler bundle install {% endcodeblock%}</p>
<p>Ok, như vậy bạn đã có một môi trường đẹp đẽ để chuẩn bị viết blog rồi. Về mặt trình tự thì để có 1 blog trên github page bạn sẽ phải: Viết blog (dùng markdown/..) =&gt; generate qua jekyll =&gt; deploy lên github page</p>
<p>{% img /images/OctopressGuide/octopress2.png %}</p>
<p>Octopress đã chuẩn bị sẵn cho bạn một Rakefile (bạn có thể tìm hiểu về rake ở <a href="http://rake.rubyforge.org/doc/rakefile_rdoc.html">đây</a> .Trong đấy có rất nhiều task octopress đã chuẩn bị sẵn cho bạn để giúp cho việc cài theme, deploy lên github page trở nên đơn giản hơn bao giờ hết.</p>
<p>Đầu tiên bạn sử dụng<br />{% codeblock theme theme.sh %} rake install {% endcodeblock%} để instal theme.</p>
<p>Sau khi đã install xong theme, chúng ta sẽ viết blog. Bước đầu tiên là setup repository để cho việc deploy lên github pages thuận tiện hơn: {% codeblock theme theme.sh %} rake setup_github_pages {% endcodeblock%}</p>
<p>Khi làm bước này thì octopress sẽ prompt ra một cái để hỏi về repo của github pages của bạn (repo của cái xxx.github.io mà mình đã nói ở trên)</p>
<p>{% img /images/OctopressGuide/octopress3.png %}</p>
<p>Như hướng dẫn đã ghi, bạn sẽ phải điền repo của bạn với format git@github:your_username/your_username.github.com Ví dụ như trong trường hợp blog ktmt thì sẽ là git@github:ktmt/ktmt.github.com.git Bạn điền vào, press OK, như vậy là đã xong bước setup. Sau bước này thì thì octopress sẽ tạo ra một cái git repo trong octopress/_deploy/.git/ link đến git@github:ktmt/ktmt.github.com.git. Như vậy bạn có thể hình dung là sau này khi deploy thì octopress sẽ gen ra file vào trong _deploy và git push lên git@github:ktmt/ktmt.github.com.git .<br />Một chú ý nữa là sau bước này octopress sẽ:</p>
<ul>
<li>Đổi tên remote branch hiện tại của bạn từ ‘origin’ sang ‘octopress’</li>
<li>Add git@github:your_username/your_username.github.com vào remote branch và đổi thành ‘origin’</li>
</ul>
<p>{% img /images/OctopressGuide/octopress4.png %}</p>
<p>Note là octopress branch của mình đang không phải là git://github.com/imathis/octopress.git như các bạn mà đang là https://github.com/ktmt/ktmtblog-octopress.git. Thực ra cái ktmtblog-octopress chỉ là một bản được fork về của octopress, và được tạo nên để giữ các bài viết trên github của bọn mình thôi.</p>
<p>Vậy là setup xong, tiếp theo là việc quan trọng nhất, viết blog. Để viết blog thì đầu tiên bạn sẽ phải generate ra file markdown thông qua {% codeblock theme theme.sh %} rake new_post[“post_title”] {% endcodeblock%}</p>
<p>Kết quả là một file markdown đã được tạo ra ở thư mục _source/_post</p>
<p>{% img /images/OctopressGuide/octopress5.png %}</p>
<p>Sau khi đã hoàn thành việc viết blog, việc tiếp theo bạn phải làm là generate cái file markdown đó + đống template thành static page thông qua jekyll. Octopress đã chuẩn bị sẵn cho bạn một rake task là generate, nên việc bạn phải làm chỉ là {% codeblock theme theme.sh %} rake generate {% endcodeblock%}</p>
<p>Kết quả là</p>
<p>{% img /images/OctopressGuide/octopress6.png %}</p>
<p>Để preview thành quả của mình, octopress cung cấp cho bạn cả httpserver để preview, bạn gõ {% codeblock theme theme.sh %} rake preview {% endcodeblock%} Và truy cập vào localhost:4000 thông qua browser là đã có thể preview thành quả của mình rồi.</p>
<p>Cuối cùng, bạn sẽ deploy lên github page thông qua {% codeblock theme theme.sh %} rake deploy {% endcodeblock%}</p>
<p>Và như thế là bạn đã deploy thành công blog của bạn lên github page (với điều kiện là bạn không viết sai syntax markdown :D). Chú ý là khi bạn rake deploy thì octopress sẽ copy đè “toàn bộ” cái repo your_username/your_username.github.com của bạn thay bằng cái thư mục _deploy của nó, <strong>kể cả commit tree</strong>. Vậy nên để lưu giữ các bài viết của cá nhân thì các bạn nên làm như mình là: fork octopress về thành một repo cá nhân, và mỗi lần viết xong thì bạn push ngược lại vào <strong>octopress repo</strong> đó. Lưu ý là octopress repo nhé: {% codeblock theme theme.sh %} git push octopress master {% endcodeblock%}</p>
<p>Cá nhân mình thì mình viết thêm 1 cái task vào Rakefile để cho đỡ bị nhầm lẫn repo: {% codeblock rake Rakefile.rb %} desc “push to octopress also” task :push_octopress do puts “pushing to octopress repo” system “git checkout master” system “git pull octopress master” system “git add .” system “git commit -m ¥”Octopress push new post¥“” system “git push octopress master” end {% endcodeblock%}</p>
<p>Và như vậy sau mỗi lần deploy bạn chỉ cần {% codeblock theme theme.sh %} rake push_octopress {% endcodeblock%} Là đã synchronize thành công.</p>
<h3 id="kết-luận">Kết luận:</h3>
<p>Như vậy sau lần đầu setting có vẻ loằng ngoằng, từ bây giờ khi muốn viet blog bạn chỉ cần:</p>
<p>{% img /images/OctopressGuide/octopress7.png %}</p>
<p>Rất đơn giản đúng không :D. Happy blogging.</p>]]></content>
  </entry>
  
</feed>
