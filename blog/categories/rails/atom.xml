<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Blog kỹ thuật máy tính]]></title>
  <link href="http://git@github.com.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://git@github.com.github.com/"/>
  <updated>2015-05-07T01:18:39+09:00</updated>
  <id>http://git@github.com.github.com/</id>
  <author>
    <name><![CDATA[kỹ thuật máy tính]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[prototype chức năng mới cho webapp trên rails với chanko]]></title>
    <link href="http://git@github.com.github.com/blog/2013/09/08/prototype-chuc-nang-moi-cho-webapp-tren-rails-voi-chanko/"/>
    <updated>2013-09-08T21:49:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/09/08/prototype-chuc-nang-moi-cho-webapp-tren-rails-voi-chanko</id>
    <content type="html"><![CDATA[<p>Là một web developer nói chung và ruby on rails developer nói riêng, bạn chắc hẳn sẽ gặp nhiều khó khăn khi muốn thêm chức năng mới vào hệ thống hiện tại. Khó khăn đáng nói đến nhất bao gồm: bạn phải add sao cho chức năng mới được add vào sẽ dễ extend, dễ tháo bỏ khi không cần thiết, và việc add chức năng mới vào sẽ có ảnh hưởng tối thiểu nhất đến các chức năng đã có. Trong bài viết này, mình sẽ giới thiệu về <strong><a href="https://github.com/cookpad/chanko">chanko</a></strong>, một <strong>(framework/engine) trên ruby on rails</strong>, mà sẽ giúp cho việc tạo chức năng mới trên một app đã có cực kì clean và dễ dàng.</p>
<h1 id="cài-đặt">1. Cài đặt</h1>
<p>Để cài đặt chanko thì chúng ta chỉ cần add chanko vào Gemfile:</p>
<pre class="sourceCode ruby"><code class="sourceCode ruby">gem <span class="st">&quot;chanko&quot;</span></code></pre>
<h1 id="sử-dụng">2. Sử dụng</h1>
<p>Đầu tiên chúng ta sẽ nói về ý tưởng của chanko. Chanko tách chức năng mới với app hiện tại thông qua việc tạo ra một folder trong /app/unit. Trong đó sẽ chứa các chức năng được tạo mới thông qua chanko. Việc này có thể được nhìn thấy dễ dàng khi chúng ta sử dụng chanko generator.</p>
<pre><code>$ rails generate chanko:unit example_unit
      create  app/units/example_unit
      create  app/units/example_unit/example_unit.rb
      create  app/units/example_unit/views/.gitkeep
      create  app/units/example_unit/images/.gitkeep
      create  app/units/example_unit/javascripts/.gitkeep
      create  app/units/example_unit/stylesheets/.gitkeep
      create  app/assets/images/units/example_unit
      create  app/assets/javascripts/units/example_unit
      create  app/assets/stylesheets/units/example_unit</code></pre>
<p>Chúng ta có thể thấy chanko generator gần tương tự như scaffold generator của rails. unit ở đây là một đơn vị chức năng.</p>
<p>Ví dụ khi bạn cần add chức năng search button thì bạn sẽ <code>generate chanko:unit add_search_button</code>, khi đó chanko sẽ tự động tạo folder add_search_button ở trong app/units, và tạo sẵn file add_search_button_unit.rb và thư mục view để chứa view của chức năng mới này. File add_search_button.rb này sẽ chứa logic của cả model/controller của chức năng add_search_button mà chúng ta cần thêm vào.</p>
<p>Các bạn có thể thấy rõ ý tưởng của chanko là tách logic và cả asset của chức năng mới cần thêm vào càng tách biệt với các chức năng cũ càng tốt. Việc này có tác dụng là chúng ta có thể thêm, bớt chức năng vào hệ thống cũ bằng một flow rất clean , và độ ảnh hưởng với hệ thống cũ cực kì thấp. Vậy nếu tách unit mới ra dưới dạng gần như một thư viện riêng như vậy, chúng ta sẽ intergrate unit này vào rails ra sao?</p>
<p>Việc intergrate unit được tạo ra bởi chanko vào rails được thể hiện qua các chức năng dưới đây:</p>
<h2 id="invoke">2.1 Invoke</h2>
<pre class="sourceCode ruby"><code class="sourceCode ruby"><span class="co"># app/controllers/users_controller.rb</span>
<span class="kw">class</span> <span class="dt">UsersController</span> &lt; <span class="dt">ApplicationController</span>
  <span class="kw">def</span> index
    invoke(<span class="st">:add_search_button_unit</span>, <span class="st">:index</span>) <span class="kw">do</span>
      <span class="ot">@users</span> = <span class="dt">User</span>.all
    <span class="kw">end</span>
  <span class="kw">end</span>
<span class="kw">end</span></code></pre>
<pre class="sourceCode ruby"><code class="sourceCode ruby"><span class="kw">module</span> <span class="dt">AddSearchButtonUnit</span>
  include <span class="dt">Chanko</span>::<span class="dt">Unit</span>
  function (<span class="st">:index</span>) <span class="kw">do</span> 
    <span class="ot">@users</span> = <span class="dt">Users</span>.unit.active
  <span class="kw">end</span>
<span class="kw">end</span></code></pre>
<p>Hàm invoke này sẽ đưa logic của hàm <code>index</code> được định nghĩa trong <code>add_search_button_unit.rb</code> vào trong logic của hàm hiện tại. Block được pass vào hàm invoke sẽ là fallback function, được execute khi có lỗi hày có vấn đề gì xảy ra với hàm invoke. Chúng ta có thể hình dung đơn giản chức năng invoke dùng để extend logic của một hàm của một unit (chức năng mới) và logic của controller (chức năng cũ)</p>
<h2 id="unit-module">2.2 Unit module</h2>
<p>Unit module chính là module của chức năng mới được thêm vào, ở đây chính là module AddSearchButton mà chúng ta đã nói đến ở trên. Trong module này sẽ định nghĩa logic cho controller, model và cả view helper cho chức năng mới. Tất cả MVC logic đều được nhét vào 1 file có thể hơi khó nhìn khi chức năng của chúng ta có nhiều logic phức tạp , tuy nhiên khi dừng lại ở mức prototyping thì việc này có thể chấp nhận được.</p>
<p><strong>Logic của controller</strong> được add vào thông qua hàm <code>scope(:controller)</code></p>
<pre class="sourceCode ruby"><code class="sourceCode ruby">scope(<span class="st">:controller</span>) <span class="kw">do</span>
  function(<span class="st">:show</span>) <span class="kw">do</span>
    <span class="ot">@user</span> = <span class="dt">User</span>.find(params[<span class="st">:id</span>])
  <span class="kw">end</span>

  function(<span class="st">:index</span>) <span class="kw">do</span>
    <span class="ot">@users</span> = <span class="dt">User</span>.active
  <span class="kw">end</span>
<span class="kw">end</span></code></pre>
<p>Gần tương tự, <strong>Logic của của model</strong> sẽ được thực hiện thông qua hàm <code>model</code>. Một điểm hơi khác là trong block pass vào thì chúng ta phải extend model mà chúng ta muốn thêm chức năng vào. Một điều đặc biệt ở đây là các hàm được extend cho một model X sẽ không được add trực tiếp vào model X thông qua monkey patch, mà sẽ add gián tiếp thông qua một proxy tên là unit. Do đó giả sử chúng ta một thêm hàm <code>method</code> vào model X thì chúng ta sẽ gọi nó thông qua <code>X.unit.method</code>. Như ở ví dụ dưới đây thì hàm active? sẽ được gọi thông qua user.unit.active?</p>
<pre class="sourceCode ruby"><code class="sourceCode ruby">models <span class="kw">do</span>
  expand(<span class="st">:User</span>) <span class="kw">do</span>
    scope <span class="st">:active</span>, lambda { where(<span class="st">:deleted_at</span> =&gt; <span class="dv">nil</span>) }

    <span class="kw">def</span> active?
      deleted_at.nil?
    <span class="kw">end</span>
  <span class="kw">end</span>
<span class="kw">end</span></code></pre>
<p>Logic của view được thực hiện thêm vào thông qua hàm <code>scope(:view)</code> và qua file view được add vào thư mục /units/unit_name/views (file view này sẽ có extension là slim)</p>
<pre class="sourceCode ruby"><code class="sourceCode ruby">scope(<span class="st">:view</span>) <span class="kw">do</span>
  function(<span class="st">:active</span>) <span class="kw">do</span>
    render <span class="st">&#39;/active&#39;</span> <span class="kw">if</span> user.unit.active?
  <span class="kw">end</span>
<span class="kw">end</span></code></pre>
<p>Hàm view này sẽ render view active.html.slim nằm trong app/units/unit_name/views</p>
<p>Ngoài việc add logic của unit vào controller/model/view thông qua các hàm scope và model như đã giới thiệu ở trên. Chanko::Unit cung cấp cho chúng ta một hàm rất hữu ích là <code>active_if</code>. Hàm này giống như một dạng functionality toggle, giúp chúng ta có thể on/off một chức năng mới cực kì dễ dàng. Block được pass vào active_if sẽ quyêt định chức unit có được enable không, nếu không được enable thì tất cả các logic của unit sẽ không được execute.</p>
<pre class="sourceCode ruby"><code class="sourceCode ruby">active_if <span class="kw">do</span> |context, options|
  <span class="dv">true</span>
<span class="kw">end</span></code></pre>
<h1 id="kết-luận">3. Kết luận</h1>
<p>Qua bài viết này chúng ta đã biết cách sử dụng gem chanko để có thể prototype chức năng mới một cách dễ dàng hơn, và ít ảnh hưởng đến hệ thống cũ nhất. Một cách đơn giản thì chanko đưa logic của cả model/view/controller vào tập trung trong 1 file, và cung cấp các helper function để giúp logic của hệ thống cũ có thể invoke các chức năng của unit mới một cách đơn giản nhất.</p>
<p>Các bạn có thể tham khảo chi tiết thông qua <a href="http://cookpad.github.io/chanko/">homepage của chanko</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sử dụng ssl trên rubyonrails]]></title>
    <link href="http://git@github.com.github.com/blog/2013/05/15/su-dung-ssl-voi-rails-va-mot-so-chu-y/"/>
    <updated>2013-05-15T23:03:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/05/15/su-dung-ssl-voi-rails-va-mot-so-chu-y</id>
    <content type="html"><![CDATA[<h1 id="https-trên-rails">HTTPS trên rails</h1>
<p>Là RoR developer, khi phải làm việc với một số thông tin quan trọng như: thông tin cá nhân user, thông tin về thanh toán trực tuyến thì thường bạn phải dùng kết nối có bảo mật (secure connection), và điển hình ở đây là sử dụng HTTPS. Để setup HTTPS trên rails, thì trước hết mình phải nhắc lại là các web server phổ biến trên rails như là webrick, unicorn hay thin đều không hỗ trợ HTTPS từ đầu. Để sử dụng SSL thì có 2 cách:</p>
<ol type="1">
<li><p>Add thêm plugin: ví dụ như với webrick thì bạn sử dụng “webrick/https”, nhưng cách này có một bất lợi là bạn phải setting từ đầu, và server đó sẽ luôn và chỉ phục vụ các request ssl: {%codeblock webrickssl.rb %} module Rails class Server &lt; ::Rack::Server def default_options super.merge({ :Port =&gt; 3000, :environment =&gt; (ENV[‘RAILS_ENV’] || “development”).dup, :daemonize =&gt; false, :debugger =&gt; false, :pid =&gt; File.expand_path(“tmp/pids/server.pid”), :config =&gt; File.expand_path(“config.ru”), :SSLEnable =&gt; true, :SSLVerifyClient =&gt; OpenSSL::SSL::VERIFY_NONE, :SSLPrivateKey =&gt; OpenSSL::PKey::RSA.new( IO.read(File.expand_path(“vendor/ssl/gs.key”))), :SSLCertificate =&gt; OpenSSL::X509::Certificate.new( IO.read(File.expand_path(“vendor/ssl/gs.crt”))), :SSLCertName =&gt; [[“CN”, WEBrick::Utils::getservername]] }) end end end {% endcodeblock %} Để switch được giữa ssl và non-ssl thì thường bạn sẽ phải chạy song song 2 bản webrick, một bản hỗ trợ ssl và một bản không</p></li>
<li><p>Bạn sử dụng <strong>Nginx</strong> như một ssl proxy, sau khi xử lý ssl request thì Nginx sẽ forward lại request cho rails-server. Ở bài viết này mình sẽ nói về thiết lập môi trường ssl ở dưới môi trường development sử dụng <strong>Pow</strong> và <strong>Nginx</strong></p></li>
</ol>
<h1 id="pow-nginx">Pow + Nginx</h1>
<p>Tại sao lại sử dụng Pow? Pow là một rails-server rất hay được sử dụng trong công đoạn <strong>development</strong>. Lý do vì: dễ cài đặt, không phải config, và pow cho mỗi webapp của chúng ta một cái domain đẹp đẽ trên local. Để cài đặt pow thì vô cùng đơn giản: {% codeblock install.sh %} $curl get.pow.cx | sh {% endcodeblock %}</p>
<p>Pow không đi kèm một bộ tool dòng lệnh tốt lắm (command line tool), tuy nhiên rất may đã có người làm hộ chúng ta 1 cái gem tên là <strong>powder</strong>, có nó thì chúng ta sẽ sử dụng pow dễ dàng hơn: {% codeblock install.sh %} $sudo gem install powder {% endcodeblock %}</p>
<p>Sau khi install xong powder, chúng ta đi đến folder chứa rails app và chỉ cần [powder link appname] là đã xong phần cài đặt {% codeblock install.sh %} cd ~/yourapp $powder link app-name {% endcodeblock %} Sau khi làm thao tác này thì một symlink với tên là app-name sẽ được tạo ra ở trong thư mục <strong>~/.pow</strong> Kết thúc thao tác này, powder đã tự động được khởi động, và chúng ta chỉ cần truy cập vào url [app-name.dev] là đã sử dụng được như bình thường :)</p>
<p>OK vậy là xong pow, giờ đến lượt nginx, để cài đặt nginx thì khá đơn giản trên mac, mình sử dụng brew: {% codeblock install.sh%} brew install nginx {% endcodeblock%} Thường thì nginx sau khi được cài đặt xong sẽ nằm ở :[/usr/local/etc/nginx]</p>
<p>Bạn đang muốn sử dụng HTTPS, nên công đoạn tiếp theo sẽ là setup để nginx nhận request HTTPS và forward lại cho pow. Đầu tiên là phải generate ra một cặp <strong>private key</strong> và <strong>certificate sign</strong>, tại sao lại cần cặp này thì các bạn có thể tự tìm hiểu về giao thức HTTPS. {% codeblock install.sh%} $openssl req -new -nodes -keyout server.key -out server.csr $openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt {% endcodeblock%}</p>
<p>Sau khi có cặp key và sign, rồi bạn copy cặp đó vào thư mục [/usr/local/etc/nginx/ssl] cho dễ config. Tiếp đến bạn mở config của nginx ra và config lại như dưới đây {% codeblock nginx %} worker_processes 1;</p>
<p>events { worker_connections 1024; }</p>
<p>http { include mime.types; default_type application/octet-stream;</p>
<pre><code>  sendfile        on;
  keepalive_timeout  65;

  server {
    ### server port and name ###
    listen          443 ssl;
    server_name     app-name.dev;

    ### SSL log files ###
    access_log      logs/ssl-access.log;
    error_log       logs/ssl-error.log;

    ### SSL cert files ###
    ssl_certificate      ssl/app-name.crt;
    ssl_certificate_key  ssl/app-name.key;
    ### Add SSL specific settings here ###
    keepalive_timeout    60;
    ### We want full access to SSL via backend ###
    location / {
      proxy_pass  http://app-name.dev/;
      ### force timeouts if one of backend is died ##
      proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;

      ### Set headers ####
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      ### Most PHP, Python, Rails, Java App can use this header ###
      proxy_set_header X-Forwarded-Proto https;
      ### By default we don&#39;t want to redirect it ####
      proxy_redirect     off;
    }
 }</code></pre>
<p>} {% endcodeblock %}</p>
<p>Công việc cuối cùng chỉ là chạy nginx, bạn khởi động nginx với option -t để test config file có đúng và không có warning nào không: {% codeblock runnginx.sh %} $ sudo nginx -t nginx: the configuration file /usr/local/etc/nginx/nginx.conf syntax is ok nginx: configuration file /usr/local/etc/nginx/nginx.conf test is successful {% endcodeblock %}</p>
<p>Như vậy là mọi thứ đã OK, giờ chỉ việc dev thôi :D</p>
<p>Để switch một cách đơn giản nhất giữa HTTPS và HTTP thì mình tạo 2 hàm sau trong application_controller: {% codeblock switch.rb %} def redirect_to_https if request.protocol == ‘http://’ redirect_to action: action_name, params: request.query_parameters, protocol: ‘https://’ end end</p>
<p>def redirect_to_http if request.protocol == ‘https://’ redirect_to action: action_name, params: request.query_parameters, protocol: ‘http://’ end end {% endcodeblock %} Và với nhứng method nào cần sử dụng https thì mình chỉ cần gọi đến hàm redirect_to_https là ok :D.</p>
<p>Các bạn có thể thấy bộ đôi pow và nginx rất dễ sử dụng đúng không. Gần đây mình có gặp phải một problem với bộ đôi này là mình sử dụng oauth2 để login với google account. Và google api <strong>không chấp nhận callback uri có domain có đuôi là .dev nhưng lại chấp nhận domain là localhost</strong>. Khi cài đặt powder thì default cái 127.0.0.1 sẽ không được trỏ đến app-name.dev của bạn, để làm việc này thì bạn chỉ cần vào ~/.pow, tạo một symlink với tên là <strong>default</strong> trỏ đến rails app của bạn là OK :D.</p>]]></content>
  </entry>
  
</feed>
