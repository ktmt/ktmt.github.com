<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: system | Blog kỹ thuật máy tính]]></title>
  <link href="http://git@github.com.github.com/blog/categories/system/atom.xml" rel="self"/>
  <link href="http://git@github.com.github.com/"/>
  <updated>2015-05-07T01:18:39+09:00</updated>
  <id>http://git@github.com.github.com/</id>
  <author>
    <name><![CDATA[kỹ thuật máy tính]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tìm hiểu redis (phần 3): đối tượng trong redis (redis objects)]]></title>
    <link href="http://git@github.com.github.com/blog/2013/08/04/tim-hieu-redis-3/"/>
    <updated>2013-08-04T21:05:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/08/04/tim-hieu-redis-3</id>
    <content type="html"><![CDATA[<h2 id="giới-thiệu">1. Giới thiệu</h2>
<p>Trong các bài viết trước mình đã trình bày về <a href="http://ktmt.github.io/blog/2013/07/02/tim-hieu-redis/">cách redis sao lưu dữ liệu</a> cũng như <a href="http://ktmt.github.io/blog/2013/07/16/tim-hieu-redis-2/">framework lập trình hướng sự kiện của redis</a>. Trong bài viết này mình trình bày về các đối tượng và kiểu dữ liệu trong redis.</p>
<h2 id="khái-quát">2. Khái quát</h2>
<p>Redis là một hệ thống cơ sở dữ liệu key-value - mỗi giá trị được quản lý bởi 1 cặp khóa và giá trị (key-value). Khi ghi dữ liệu, ta phải chỉ định rõ cặp khóa và giá trị. Khi đọc dữ liệu, ta phải chỉ ra ta muốn đọc dữ liệu của khóa nào. Trong Redis, khóa (key) có thể là một chuỗi. <strong>giá trị của dữ liệu</strong> (value) có thể là một trong một số kiểu dữ liệu thông dụng</p>
<ul>
<li>tập hợp (set)</li>
<li>tập hợp đã sắp xếp (sorted set)</li>
<li>chuỗi (string)</li>
<li>danh sách (list)</li>
</ul>
<p>Để hỗ trợ các kiểu dữ liệu ở trên, đồng thời đảm bảo tính mở rộng (phát triển thêm các kiểu dữ liệu mới) cũng để dễ dàng quản lý đối tượng trong phần core db, redis thêm 1 layer mô tả dữ liệu trung gian gọi là robj. Các thao tác của core db (đọc, ghi, hash, encoding…) sẽ được thao tác trực tiếp với robj. Các kiểu dữ liệu người dùng ở trên sẽ được chuyển đổi (convert) qua lại đến robj. Nói cách khác, phần core db chỉ biết đến sự tồn tại của robj, các kiểu dữ liệu ở trên muốn được quản lý bởi coredb cần phải được chuyển qua robj.</p>
<p>Về mặt tổ chức mã, bạn có thể tham khảo sơ đồ dưới đây:</p>
<pre><code>╒===============╕
|  t_hash.c     |
|  t_list.c     |       ╒============╕      ╒=====================╕
|  t_set.c      |   &lt;=&gt; |  object.c  |  &lt;=&gt; |  db.c (robj -&gt; sds) | 
|  t_string.c   |       ╘============╛      ╘=====================╛
|  t_zset.c     |
╘===============╛</code></pre>
<h2 id="chi-tiết-về-robj">3. Chi tiết về robj</h2>
<p>Chi tiết về cấu trúc của robj được khai báo trong file <a href="https://github.com/antirez/redis/blob/unstable/src/redis.h">redis.h</a></p>
<p>{% codeblock robj.c %} /* A redis object, that is a type able to hold a string / list / set */</p>
<p>/* The actual Redis Object <em>/ #define REDIS_LRU_CLOCK_MAX ((1&lt;&lt;21)-1) /</em> Max value of obj-&gt;lru <em>/ #define REDIS_LRU_CLOCK_RESOLUTION 10 /</em> LRU clock resolution in seconds <em>/ typedef struct redisObject { unsigned type:4; unsigned notused:2; /</em> Not used <em>/ unsigned encoding:4; unsigned lru:22; /</em> lru time (relative to server.lruclock) <em>/ int refcount; void </em>ptr; } robj;</p>
<p>/* Macro used to initialize a Redis object allocated on the stack. * Note that this macro is taken near the structure definition to make sure * we’ll update it when the structure is changed, to avoid bugs like * bug #85 introduced exactly in this way. */ #define initStaticStringObject(_var,_ptr) do {<br /> _var.refcount = 1;<br /> _var.type = REDIS_STRING;<br /> _var.encoding = REDIS_ENCODING_RAW;<br /> _var.ptr = _ptr;<br />} while(0); {% endcodeblock %}</p>
<p>Qua đó ta có thể thấy robj gồm có các trường như:</p>
<ul>
<li>kiểu dữ liệu type</li>
<li>loại encoding: kiểu dữ liệu type có thể hiểu là kiểu dữ liệu người dùng, còn encoding có thể hiểu là kiểu dữ liệu ở backend được quản lý ở core db của redis để đảm bảo hiệu năng.</li>
<li>lru (<a href="http://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used">least-recently used</a>): là trường đại diện cho thời gian tồn tại tương đối của redis object. Redis hỗ trợ 1 tính năng đối với các đối tượng được ghi vào cơ sở dữ liệu redis: <a href="http://www.redis.io/commands/expire">expire</a>. Các đối tượng quá thời gian chỉ định trước sẽ được loại bỏ khỏi cơ sở dữ liệu. Trường này dùng để quản lý <strong>thời gian hết hiệu lực</strong> này.</li>
<li>refcount: là một biến kiểu số nguyên, đại diện cho số lượng reference đến robj này. Mỗi lần có một truy cập đến robj, đại lượng reference sẽ được tăng lên 1, và sẽ bị giảm đi 1 mỗi khi đối tượng <strong>expired</strong> hoặc không được tiếp tục tham chiếu.</li>
<li>*ptr: con trỏ trỏ trực tiếp đến dữ liệu</li>
<li>notused??</li>
</ul>
<p>Ở đây, ta gặp một kiểu khai báo <strong>rất lạ</strong> đặt ra nhiều câu hỏi. Thay vì khai báo unsigned type tác giả sử dụng unsigned type:4, điều này có ý nghĩa là gì? Sử dụng cả trường notused và lru:22 có ý nghĩa là gì?</p>
<p>Thực chất khai báo :số nguyên sau kiểu dữ liệu unsigned trong C biểu thị số bit mà trường này muốn sử dụng. Như vậy kiểu type ở trên có độ dài 4 bits. Tương tự như vậy độ dài của encoding là 4 bits. Với độ dài này, redis có thể hỗ trợ tối đa 2^4 = 16 kiểu dữ liệu khác nhau! LRU có độ dài 22 bits. Thực chất trường LRU này đại diện cho thời gian tương đối tính từ <a href="https://github.com/antirez/redis/blob/unstable/src/redis.h#L725">server.lruclock</a>. Thời gian này được tính bằng số phút theo thời gian tương đối này. Để ý với 4 bits cho type, 4 bits cho encoding và 22 bits cho lru, ta mới dùng có 30 bits cho cấu trúc robj này. Do các hệ thống x86 thường căn chỉnh cấu trúc dữ liệu theo bội số của 16 (liên quan đến cơ chế làm việc của CPU cache) nên ta cần padding thêm 2 bits và việc padding 2 bits này chính là nhiệm vụ của notused!</p>
<p>Mã của robj khá gọn gàng, trong sáng, ngắn gọn và dễ hiểu. Bạn có thể tham khảo tại file <a href="https://github.com/antirez/redis/blob/unstable/src/object.c">object.c</a>. Ở đây tôi sẽ trình bày 2 điểm quan trọng về robj:</p>
<ul>
<li>Tại sao phải encode <strong>robj</strong></li>
<li>Vai trò của refcount.</li>
</ul>
<p><strong>Tại sao phải encode robj?</strong> Như trong danh sách các kiểu dữ liệu người dùng ở trên, ta thấy có chuỗi là kiểu dữ liệu cơ bản. Các kiểu dữ liệu còn lại (hast, set, list) đều là kiểu dữ liệu xoay quanh chuỗi, số nguyên hoặc các kiểu dữ liệu khác. Bản thân chuỗi thường có nhiều ký tự lặp lại, vì vậy bằng việc encoding chuỗi dữ liệu ta sẽ tiết kiệm được lượng bộ nhớ mà redis sử dụng. Encoding ở đây thực chất là làm giảm kích thước các object. Thuật toán encode chuỗi có thể tham khảo thủ tục <a href="https://github.com/antirez/redis/blob/unstable/src/object.c#L339">tryObjectEncoding</a> và và các thủ tục trong file <a href="https://github.com/antirez/redis/blob/unstable/src/util.c">util.c</a>. Thử tưởng tượng bạn có 1 key trỏ đến danh sách gồm 100 chuỗi, mỗi chuỗi chỉ cần tiết kiệm được 1 byte, thì việc encode này sẽ giúp bạn tiết kiệm được 100 bytes bộ nhớ. Lượng bộ nhớ tiết kiệm này sẽ có ý nghĩa khi bạn có hàng triệu key và value!</p>
<p><strong>Vai trò của refcount</strong> Refcount thường được dùng để chia sẻ dữ liệu giống nhau của các đối tượng khác nhau. Ví dụ bạn có 2 xâu a, b cùng giá trị “Chào Thế giới!” thì không việc gì ta phải có 2 chuỗi “Chào Thế giới!” trong bộ nhớ. Chuỗi a và b có thể cùng trỏ tới 1 chuỗi trên bộ nhớ và chỉ thật sự cần có 1 bản copy riêng khi mà 2 chuỗi khác nhau. Đây là cách sử dụng thường gặp của “<a href="http://en.wikipedia.org/wiki/Reference_counting"><strong>reference count idiom</strong></a>”. Tuy vậy ở redis hiếm khi ta thấy 2 object cùng chia sẻ giá trị như trường hợp ở trên. Vậy vai trò của reference count ở đây là gì?</p>
<p>Thực chất tác giả sử dụng refcount ở đây 1 cách khá sáng tạo (dù mình không biết là có thật sự là 1 cách dùng mới hay không). Thử tưởng tượng 1 trường hợp sau đây: 1 thread đang đọc giá trị của robj trong khi 1 thread khác đang gửi command del robj. Nếu command del được tiến hành ngay lập tức, thread đọc robj có thể bị lỗi và trả về giá trị không đúng (1 list có 10 phần tử nhưng phần tử nhưng khi đọc thì redis báo giá trị không tồn tại :-)). Nếu như command del không được thực thi, khóa trên sẽ vẫn tồn tại trong bộ nhớ, và kết quả thực hiện del sẽ thất bại. Chắc là bạn không muốn command del thất bại liên tục (khi số lượng đọc ghi cực lớn, khả năng xảy ra lỗi này là khá cao!). Để giải quyết bài toán trên, tác giả của redis sử dụng refcount. Khi một object được truy cập bởi nhiều thread, refcount của object sẽ được tăng lên 1 đơn vị và giảm 1 khi không được tham chiếu nữa. Như vậy command del sẽ chỉ giảm refcount của robj đi 1. Nếu như tại thời điểm này không có tham chiếu nào đến robj này, robj này sẽ bị thu hồi ngay lập tức. Tuy vậy nếu có 1 thread khác đang tham chiếu robj này, refcount của robj sẽ lớn hơn 1, và do đó tại thời điểm command del được thực thi, giá trị của refcount giảm xuống còn 1. Khi thread khác hoàn thành công việc, thread này sẽ giảm refcount xuống tiếp 1 đơn vị nữa, lúc này robj refcount sẽ về 0 và robj sẽ được giải phóng!</p>
<h2 id="các-cấu-trúc-dữ-liệu-người-dùng">4. Các cấu trúc dữ liệu người dùng</h2>
<p>Tôi gọi các cấu trúc dữ liệu người dùng để phân biệt chúng với cấu trúc dữ liệu redis dùng để tăng hiệu năng ở core. Các cấu trúc dữ liệu này gồm list, hash, set và string được viết ở các file có tiền tố <strong>t_</strong> tương ứng. Như trình bày ở trên phần db core không biết gì ngoài robj vì vậy các cấu trúc dữ liệu này có nhiệm vụ là convert cách biểu diễn dữ liệu về robj.</p>
<p>Nếu xem các file này, bạn sẽ thấy mỗi file đều có các hàm convert sang robj như: hashTypeConvert, listTypeConvert, … Mỗi cấu trúc dữ liệu có cách viết khác nhau, nhưng đều cùng cấu trúc và khá ngắn gọn và đơn giản. Bạn có thể tham khảo từng file trên để tìm hiểu rõ hơn về cách redis hỗ trợ các kiểu dữ liệu.</p>
<p>{% highlight bash %} src git:(unstable) wc -l t_*.c 761 t_hash.c 1149 t_list.c 913 t_set.c 459 t_string.c 2205 t_zset.c 5487 total {% endhighlight %}</p>
<h2 id="kết-luận">5. Kết luận:</h2>
<p>Bài viết trình bày về cách redis tổ chức các kiểu dữ liệu người dùng cũng như cách tổ chức phần “<strong>frontend</strong>” của redis db. Bài viết cũng trình bày chi tiết về robj, về ý nghĩa và vai trò của các trường trong robj cũng như vai trò của robj với backend db. Trong bài viết sau, mình sẽ cố gắng trình bày chi tiết về phần backend server.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tìm hiểu redis (phần 2): Framework lập trình sự kiện]]></title>
    <link href="http://git@github.com.github.com/blog/2013/07/16/tim-hieu-redis-2/"/>
    <updated>2013-07-16T00:00:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/07/16/tim-hieu-redis-2</id>
    <content type="html"><![CDATA[<h2 id="giới-thiệu">1. Giới thiệu</h2>
<p>Trong bài viết <a href="http://ktmt.github.io/blog/2013/07/02/tim-hieu-redis/">tìm hiểu redis phần 1</a>, chúng ta đã tìm hiểu cách redis quản lý dữ liệu (AOF và RDB) cũng như cách redis tận dụng các tính năng của OS (fsync) để sao lưu dữ liệu. Bài viết này tập trung trình bày cụ thể hơn về framework lập trình hướng sự kiện của redis.</p>
<h2 id="lập-trình-hướng-sự-kiện">2. Lập trình hướng sự kiện</h2>
<p><a href="http://en.wikipedia.org/wiki/Event-driven_programming">Lập trình hướng sự kiện</a> không phải là khái niệm mới, mà là một paradigm dược sử dụng từ rất lâu. Trong lập trình GUI (Giao diện đồ họa), khi người dùng click hay di chuyển chuột, các framework đồ họa thường hỗ trợ các phương pháp như onClick, onMouseMove … cho phép người dùng định nghĩa hành vi của hệ thống cho những sự kiện đấy.</p>
<p>Các hệ thống Unix(BSD, MacOS)/Linux/Solaris từ lâu đã hỗ trợ lập trình hướng sự kiện. Mỗi hệ điều hành cung cấp API cho phép lập trình viên chỉ định 1 tập các file descriptor hoặc mốc thời gian (time-event) cần theo dõi và sẽ trigger mỗi sự kiện khi các file descriptor thay đổi trạng thái (có đọc hoặc ghi) hoặc khi một mốc thời gian quan trọng đã đến. Lập trình viên hệ thống chỉ cần cung cấp 1 hàm callback và các API này sẽ thực hiện chạy các callback này. Cụ thể:</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Select_%28Unix%29">select</a> Chuẩn POSIX đình nghĩa hàm này.</li>
<li>Unix (BSD, MacOS): <a href="people.freebsd.org/~jlemon/papers/kqueue.pdf">kqueue</a></li>
<li>Linux: poll, <a href="http://man7.org/linux/man-pages/man7/epoll.7.html">epoll</a> (edge-trigger)</li>
<li>Solaris: <a href="http://docs.oracle.com/cd/E19082-01/819-2243/port-associate-3c/index.html">event ports</a> (port_associate)</li>
</ul>
<p>Việc các hệ thống đều hỗ trơ cơ chế event multiplexing là điều tốt (hệ thống của bạn sẽ không phải thay đổi design nếu muốn hỗ trợ 1 hệ thống đặc biệt) tuy vậy có một khó khăn đó là: các API này có interface khác nhau. Do vậy đoạn code dùng epoll sẽ không thể nào chạy trên các Unix based và ngược lại một đoạn code dùng kqueue sẽ không chạy được trên linux. Để giải quyết vấn đề này, redis cung cấp 1 layer hướng sự kiện và thay đổi backend API (kqueue, event ports, epoll) theo hệ thống mà redis được biên dịch trên đó.</p>
<h2 id="framework">3. Framework</h2>
<h3 id="a.-kiến-trúc">a. Kiến trúc</h3>
<pre><code>                    ╒========================╕
                    |  Redis layer cao hơn   | (aof, rdb, cron...)
                    ╘========================╛

                    ╒========================╕
                    |     API layer hướng    | frontend: aeCreateEventLoop, aeStop, aeCreateFileEvent... 
                    |       sự kiện          | backend: aeAddEvent, aeDelEvent, aeApiPoll...
                    ╘========================╛

    ╒=============╕     ╒=============╕     ╒=============╕     ╒=============╕
    |   select    |     |   kqueue    |     |   epoll     |     | event ports |
    ╘=============╛     ╘=============╛     ╘=============╛     ╘=============╛
    ae_select.c     ae_kqueue.c             ae_epoll.c               ae_evport.c</code></pre>
<p>Để hỗ trợ các event multiplexing api khác nhau của các hệ điều hành, redis xây dựng 1 api layer đứng giữa các layer cao hơn và các api của OS (như trong hình vẽ). Layer này có 2 loại api khác nhau: frontend và backend.</p>
<ul>
<li>frontend api: là các api cho phép các layer ở trên thao tác với các sự kiện và <strong>vòng lặp sự kiện</strong> (event loop). Các api này gồm có: aeCreateEventLLoop, aeStop, aeMain, aeCreateFileEvent, aeCreateTimeEvent…</li>
<li>backend api: thực chất là interface api. Các api hệ thống khác nhau sẽ được viết để phù hợp với interface này. Interface này gồm các api như: aeAddEvent, aeDelEvent, aeApiPoll, aeApiName.</li>
</ul>
<p>frontend api sẽ gọi backend api để taoji các sự kiện, poll các file descriptor… Các backend api sẽ đối chiếu sử dụng tương ứng với api của hệ thống. Việc sử dụng api nào sẽ được quyết định lúc biên dịch.</p>
<p>Để thống nhất các polling api khác nhau về cùng 1 interface, redis định nghĩa các cấu trúc dữ liệu giống nhau với mỗi api, cụ thể là các sự kiện và <strong>vòng lặp sự kiện</strong>. Các cấu trúc này được viết trong file ae.h</p>
<p>{% codeblock ae.c %} #ifndef <strong>AE_H</strong> #define <strong>AE_H</strong></p>
<h1 id="define-ae_ok-0">define AE_OK 0</h1>
<h1 id="define-ae_err--1">define AE_ERR -1</h1>
<h1 id="define-ae_none-0">define AE_NONE 0</h1>
<h1 id="define-ae_readable-1">define AE_READABLE 1</h1>
<h1 id="define-ae_writable-2">define AE_WRITABLE 2</h1>
<h1 id="define-ae_file_events-1">define AE_FILE_EVENTS 1</h1>
<h1 id="define-ae_time_events-2">define AE_TIME_EVENTS 2</h1>
<h1 id="define-ae_all_events-ae_file_eventsae_time_events">define AE_ALL_EVENTS (AE_FILE_EVENTS|AE_TIME_EVENTS)</h1>
<h1 id="define-ae_dont_wait-4">define AE_DONT_WAIT 4</h1>
<h1 id="define-ae_nomore--1">define AE_NOMORE -1</h1>
<p>/* Macros */ #define AE_NOTUSED(V) ((void) V)</p>
<p>struct aeEventLoop;</p>
<p>/* Types and data structures <em>/ typedef void aeFileProc(struct aeEventLoop </em>eventLoop, int fd, void <em>clientData, int mask); typedef int aeTimeProc(struct aeEventLoop </em>eventLoop, long long id, void <em>clientData); typedef void aeEventFinalizerProc(struct aeEventLoop </em>eventLoop, void <em>clientData); typedef void aeBeforeSleepProc(struct aeEventLoop </em>eventLoop);</p>
<p>/* File event structure <em>/ typedef struct aeFileEvent { int mask; /</em> one of AE_(READABLE|WRITABLE) <em>/ aeFileProc </em>rfileProc; aeFileProc <em>wfileProc; void </em>clientData; } aeFileEvent;</p>
<p>/* Time event structure <em>/ typedef struct aeTimeEvent { long long id; /</em> time event identifier. <em>/ long when_sec; /</em> seconds <em>/ long when_ms; /</em> milliseconds <em>/ aeTimeProc </em>timeProc; aeEventFinalizerProc <em>finalizerProc; void </em>clientData; struct aeTimeEvent *next; } aeTimeEvent;</p>
<p>/* A fired event */ typedef struct aeFiredEvent { int fd; int mask; } aeFiredEvent;</p>
<p>/* State of an event based program <em>/ typedef struct aeEventLoop { int maxfd; /</em> highest file descriptor currently registered <em>/ int setsize; /</em> max number of file descriptors tracked <em>/ long long timeEventNextId; time_t lastTime; /</em> Used to detect system clock skew <em>/ aeFileEvent </em>events; /* Registered events <em>/ aeFiredEvent </em>fired; /* Fired events <em>/ aeTimeEvent </em>timeEventHead; int stop; void <em>apidata; /</em> This is used for polling API specific data <em>/ aeBeforeSleepProc </em>beforesleep; } aeEventLoop;</p>
<p>/* Prototypes <em>/ aeEventLoop </em>aeCreateEventLoop(int setsize); void aeDeleteEventLoop(aeEventLoop <em>eventLoop); void aeStop(aeEventLoop </em>eventLoop); int aeCreateFileEvent(aeEventLoop <em>eventLoop, int fd, int mask, aeFileProc </em>proc, void <em>clientData); void aeDeleteFileEvent(aeEventLoop </em>eventLoop, int fd, int mask); int aeGetFileEvents(aeEventLoop <em>eventLoop, int fd); long long aeCreateTimeEvent(aeEventLoop </em>eventLoop, long long milliseconds, aeTimeProc <em>proc, void </em>clientData, aeEventFinalizerProc <em>finalizerProc); int aeDeleteTimeEvent(aeEventLoop </em>eventLoop, long long id); int aeProcessEvents(aeEventLoop <em>eventLoop, int flags); int aeWait(int fd, int mask, long long milliseconds); void aeMain(aeEventLoop </em>eventLoop); char <em>aeGetApiName(void); void aeSetBeforeSleepProc(aeEventLoop </em>eventLoop, aeBeforeSleepProc *beforesleep);</p>
<h1 id="endif">endif</h1>
<p>{% endcodeblock %}</p>
<p>Theo như ae.h, redis có 3 kiểu sự kiện khác nhau:</p>
<ul>
<li>Sự kiện trên File (đọc, ghi) (aeFileEvent)</li>
<li>Sự kiện thời gian (aeTimeEvent)</li>
<li>Sự kiện đã được triggered (aeFiredEvent)</li>
</ul>
<p>Các callback prototype đều nhận đối số đầu tiên là 1 con trỏ chỉ đến cấu trúc aeEventLoop. Cấu trúc này quản lý rất nhiều thông tin khác nhau như: số sự kiện được đăng ký, sự kiện được gọi, file descriptor lớn nhất đang quản lý, danh sách các <strong>sự kiện thời gian</strong> v.v</p>
<h3 id="b.-chi-tiết-thực-hiện">b. Chi tiết thực hiện</h3>
<p>Toàn bộ quá trình xử lý sự kiện được bắt đầu bằng cách gọi aeMain. Xử lý trong aeMain thực chất là một vòng lặp gọi hàm xử lý sự kiện: aeProcessEvents. Tất cả các sự kiện sẽ được thực thi ở hàm aeProcessEvents này. Ta hãy cùng tìm hiểu công việc mà aeProcessEvent phải làm.</p>
<p>{% codeblock ae.c %}</p>
<p>void aeMain(aeEventLoop *eventLoop) { eventLoop-&gt;stop = 0; while (!eventLoop-&gt;stop) { if (eventLoop-&gt;beforesleep != NULL) eventLoop-&gt;beforesleep(eventLoop); aeProcessEvents(eventLoop, AE_ALL_EVENTS); } }</p>
<p>/* Process every pending time event, then every pending file event * (that may be registered by time event callbacks just processed). * Without special flags the function sleeps until some file event * fires, or when the next time event occurs (if any). <em> </em> If flags is 0, the function does nothing and returns. * if flags has AE_ALL_EVENTS set, all the kind of events are processed. * if flags has AE_FILE_EVENTS set, file events are processed. * if flags has AE_TIME_EVENTS set, time events are processed. * if flags has AE_DONT_WAIT set the function returns ASAP until all * the events that’s possible to process without to wait are processed. <em> </em> The function returns the number of events processed. <em>/ int aeProcessEvents(aeEventLoop </em>eventLoop, int flags) { int processed = 0, numevents;</p>
<pre><code>/* Nothing to do? return ASAP */
if (!(flags &amp; AE_TIME_EVENTS) &amp;&amp; !(flags &amp; AE_FILE_EVENTS)) return 0;

/* Note that we want call select() even if there are no
 * file events to process as long as we want to process time
 * events, in order to sleep until the next time event is ready
 * to fire. */
if (eventLoop-&gt;maxfd != -1 ||
    ((flags &amp; AE_TIME_EVENTS) &amp;&amp; !(flags &amp; AE_DONT_WAIT))) {
    int j;
    aeTimeEvent *shortest = NULL;
    struct timeval tv, *tvp;

    if (flags &amp; AE_TIME_EVENTS &amp;&amp; !(flags &amp; AE_DONT_WAIT))
        shortest = aeSearchNearestTimer(eventLoop);
    if (shortest) {
        long now_sec, now_ms;

        /* Calculate the time missing for the nearest
         * timer to fire. */
        aeGetTime(&amp;now_sec, &amp;now_ms);
        tvp = &amp;tv;
        tvp-&gt;tv_sec = shortest-&gt;when_sec - now_sec;
        if (shortest-&gt;when_ms &lt; now_ms) {
            tvp-&gt;tv_usec = ((shortest-&gt;when_ms+1000) - now_ms)*1000;
            tvp-&gt;tv_sec --;
        } else {
            tvp-&gt;tv_usec = (shortest-&gt;when_ms - now_ms)*1000;
        }
        if (tvp-&gt;tv_sec &lt; 0) tvp-&gt;tv_sec = 0;
        if (tvp-&gt;tv_usec &lt; 0) tvp-&gt;tv_usec = 0;
    } else {
        /* If we have to check for events but need to return
         * ASAP because of AE_DONT_WAIT we need to set the timeout
         * to zero */
        if (flags &amp; AE_DONT_WAIT) {
            tv.tv_sec = tv.tv_usec = 0;
            tvp = &amp;tv;
        } else {
            /* Otherwise we can block */
            tvp = NULL; /* wait forever */
        }
    }

    numevents = aeApiPoll(eventLoop, tvp);
    for (j = 0; j &lt; numevents; j++) {
        aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];
        int mask = eventLoop-&gt;fired[j].mask;
        int fd = eventLoop-&gt;fired[j].fd;
        int rfired = 0;

    /* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed
         * event removed an element that fired and we still didn&#39;t
         * processed, so we check if the event is still valid. */
        if (fe-&gt;mask &amp; mask &amp; AE_READABLE) {
            rfired = 1;
            fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);
        }
        if (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) {
            if (!rfired || fe-&gt;wfileProc != fe-&gt;rfileProc)
                fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);
        }
        processed++;
    }
}
/* Check time events */
if (flags &amp; AE_TIME_EVENTS)
    processed += processTimeEvents(eventLoop);

return processed; /* return the number of processed file/time events */</code></pre>
<p>} {% endcodeblock %}</p>
<p>Hàm aeProcessEvents làm 3 nhiệm vụ chính:</p>
<ul>
<li>Tìm sự kiện có thời gian timeout gần nhất</li>
<li>Lắng nghe sự kiện File, với thời gian poll không quá thời gian sự kiện gần nhất ở trên.</li>
<li>Với các sự kiện được triggered (file có thể đọc, ghi; thời gian timeout đã đến), chạy các callback được đăng ký với các sự kiện.</li>
</ul>
<p>Việc tìm thời gian timeout gần nhất ở đầu vòng lặp nhằm hạn chế thấp nhất khả năng delay của các sự kiện thời gian (Nên nhớ serverCron chạy với thời gian timeout 1ms trên 1 lần).</p>
<p>Sau khi xử lý lần lượt các xử lý các sự kiện file, redis sẽ xử lý các sự kiện thời gian. Xử lý sự kiện thời gian cũng khá đơn giản. Redis lần lượt xét từng sự kiện thời gian trong danh sách các sự kiện thời gian và gọi callback với các sự kiện đã quá thời hạn. Tuy nhiên, ta sẽ thấy 1 đoạn code khá <strong>mập mờ</strong> ở đầu xử lý sự kiện thời gian, với comment như dưới đây:</p>
<p>{% codeblock ae.c %} /* If the system clock is moved to the future, and then set back to the * right value, time events may be delayed in a random way. Often this * means that scheduled operations will not be performed soon enough. <em> </em> Here we try to detect system clock skews, and force all the time * events to be processed ASAP when this happens: the idea is that * processing events earlier is less dangerous than delaying them * indefinitely, and practice suggests it is. */ if (now &lt; eventLoop-&gt;lastTime) { te = eventLoop-&gt;timeEventHead; while(te) { te-&gt;when_sec = 0; te = te-&gt;next; } } eventLoop-&gt;lastTime = now; … {% endcodeblock %}</p>
<p>Làm sao thời gian hệ thống trả về bởi time(NULL) có thể nhỏ hơn thời gian xử lý được ghi nhận lần trước đấy được? Thực chất ở đây, antirez đã cân nhắc rất kỹ 1 tính huống có thể xảy ra với hệ thống thời gian của Linux. Trong điều kiện hoạt động bình thường, thời gian hệ thống sẽ luôn tăng. Tuy vậy, với 1 số trường hợp rủi ro:</p>
<ul>
<li>Nguồn cung cấp điện không đủ.</li>
<li>Pin CMOS có vấn đề.</li>
</ul>
<p>1s trong máy tính có thể bằng 2, 3s trong thời gian thực, nói cách khác đồng hồ máy tính sẽ bị chạy chậm đi. Với tình huống này các sự kiện thời gian sẽ bị sai lệch và redis sẽ hoạt động không bình thường. Đấy chính là lý do antirez thêm đoạn code trên.</p>
<h2 id="redis-dùng-framework-này-như-thế-nào">4. Redis dùng framework này như thế nào?</h2>
<ul>
<li>Sự kiện file được sử dụng ở redis client và cluster. Thực chất các redis instance cần phải liên lạc với nhau để trao đổi dữ liệu. Việc trao đổi này tiến hành qua mạng và vì vậy hệ thống không thể nào biết khi nào dữ liệu mới sẽ đến. Thay vì phải chờ dữ liệu, bằng cách dùng framework sự kiện, hệ thống có thể tiến hành các xử lý có ưu tiên cao hơn môt cách <strong>bất đồng bộ</strong>, nâng cao hiệu năng của hệ thống.</li>
<li>Sự kiện thời gian được sử dụng để định kỳ gọi cronServer (Nhiệm vụ của cronServer: <a href="http://ktmt.github.io/blog/2013/07/02/tim-hieu-redis/">tìm hiểu redis phần 1</a>).</li>
</ul>
<h2 id="kết-luận">5. Kết luận</h2>
<p>Redis sử dụng phương pháp lập trình hướng sự kiện để định kỳ gọi các thủ tục backup dữ liệu cũng như quản lý các kết nối từ client. Redis hỗ trợ kqueue, epoll và event port nên hiệu năng đạt được khá cao.</p>
<h2 id="tham-khảo">6. Tham khảo</h2>
<ol type="1">
<li><a href="http://www.kegel.com/c10k.html">C10K</a></li>
<li><a href="people.freebsd.org/~jlemon/papers/kqueue.pdf">kqueue</a></li>
<li><a href="http://man7.org/linux/man-pages/man7/epoll.7.html">epoll</a></li>
<li><a href="http://docs.oracle.com/cd/E19082-01/819-2243/port-associate-3c/index.html">event ports</a></li>
<li><a href="https://groups.google.com/forum/#!forum/redis-db">redis mailing list</a></li>
<li>IOCP <a href="http://en.wikipedia.org/wiki/Input/output_completion_port">Input/output completion port</a></li>
</ol>]]></content>
  </entry>
  
</feed>
