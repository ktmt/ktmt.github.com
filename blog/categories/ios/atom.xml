<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Blog kỹ thuật máy tính]]></title>
  <link href="http://git@github.com.github.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://git@github.com.github.com/"/>
  <updated>2015-05-07T01:18:39+09:00</updated>
  <id>http://git@github.com.github.com/</id>
  <author>
    <name><![CDATA[kỹ thuật máy tính]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[#include, #import, @import (clang modules)]]></title>
    <link href="http://git@github.com.github.com/blog/2014/01/06/clang-modules/"/>
    <updated>2014-01-06T04:14:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2014/01/06/clang-modules</id>
    <content type="html"><![CDATA[<h1 id="mở-đầu">Mở đầu</h1>
<p>Happy New Year! Chúc mọi người năm mới vui vẻ, hạnh phúc.</p>
<p>Như các bạn cũng biết gần đây XCode5 cùng iOS7 đã được giới thiệu. Đi cùng XCode5 là feature mới “modules” của Clang, một giải pháp nhằm giải quyết một số vấn đề như tăng tốc độ compile source code của ứng dụng. Hôm nay mình sẽ giới thiệu qua về tính năng modules này. Hiện tại thì modules đã có thể sử dụng trong C và Objective-C trên môi trường iOS7 hoặc MacOSX 10.9. Các đoạn code dưới đây tuy mình viết bằng Objective-C nhưng cũng gần như tương tự với C. Để hiểu về modules thì trước tiên mình sẽ giải thích lần lượt về <code>#include</code>, <code>#import</code>, và pre-compiled headers (PCH), sau đó là về modules.</p>
<h2 id="include">#include</h2>
<p>Khi chúng ta include 1 file header thì tại giai đoạn preprocessing của quá trình compile, compiler sẽ copy nội dung của file header này và paste vào dòng #include. Và tất nhiên quá trình copy/paste này là đệ quy cho đến khi copy xong tất cả file header mà nó include và các file header khác được include tại các file nó include. (hơi xoắn)</p>
<p>Ví dụ với chương trình helloworld quen thuộc như dưới đây:</p>
<p>{% codeblock lang:objc helloworld.m %} #include <Foundation/Foundation.h></p>
<p>int main(int argc, const char *argv[]) { NSLog(@“Hello world”);</p>
<pre><code> return 0;</code></pre>
<p>} {% endcodeblock %}</p>
<p>Chúng ta có thể chạy preprocessor để xem file sinh ra sau giai đoạn này bằng lệnh <code>clang -E helloworld.m | less</code>.</p>
<p>Nhìn vào kết quả output chúng ta có thể thấy tới hơn 92000 dòng là của Foundation.h (và của các file header mà Foundation.h include), chỉ 8 dòng cuối là code của chúng ta.</p>
<p>Với việc sử dụng <code>#include</code> tồn tại vấn đề gọi là recursive include. Ví dụ :</p>
<p>{% codeblock lang:objc FirstFile.h %} #include “SecondFile.h”</p>
<p>/* Some code */ {% endcodeblock %}</p>
<p>{% codeblock lang:objc SecondFile.h %} #include “FirstFile.h”</p>
<p>/* Some other code */ {% endcodeblock %}</p>
<p>Khi đấy preprocessor sẽ duyệt file FirstFile.h và copy nội dung của SecondFile.h vào FirstFile.h. Khi duyệt file SecondFile.h lại copy/paste nội dung của file FirstFile.h. Vấn đề này được gọi là recursive include.</p>
<h2 id="import">#import</h2>
<p>Trong Objective-C để tránh vấn đề recursive include như trên thì chúng ta thường dùng <code>#import</code>. Khi dùng <code>#import</code> thì trước khi include 1 file header, preprocessor sẽ kiểm tra xem file đấy đã được include chưa, nếu đã include rồi thì sẽ không include nữa. Tương tự trong C chúng ta cũng tránh recursive include bằng việc kiểm tra file header đã được include chưa như sau:</p>
<p>{% codeblock %} #ifndef MYFILE_H #define MYFILE_H</p>
<p>// Some code</p>
<h1 id="endif">endif</h1>
<p>{% endcodeblock %}</p>
<h2 id="import-1"><span class="citation" data-cites="import">@import</span></h2>
<p>Tuy nhiên việc sử dụng <code>#import</code> cũng như <code>#include</code> khiến cho preprocessor đối mặt với 1 số vấn đề khác như Fragility và Performance. Để hiểu về vấn đề Header Fragility chúng ta xem qua một ví dụ đơn giản sau:</p>
<p>{% codeblock lang:objc MyFile.h %} #define NSURL @“my url”</p>
<h1 id="import-2">import <Foundation/Foundation.h></h1>
<p><span class="citation" data-cites="interface">@interface</span> MyClass :NSObject</p>
<p><span class="citation" data-cites="end">@end</span> {% endcodeblock %}</p>
<p>Khi đó sau quá trình preprocessing thì file header của chúng ta sẽ như sau:</p>
<p>{% codeblock lang:objc %} #define NSURL @“my url”</p>
<p>// đoạn code được copy từ Foundation.h // và tất cả những đoạn có chứa NSURL của Foundation.h đều bị thay bằng “my url”</p>
<p><span class="citation" data-cites="interface">@interface</span> MyClass :NSObject</p>
<p><span class="citation" data-cites="end">@end</span> {% endcodeblock %}</p>
<p>Tất cả những đoạn NSURL của Foundation.h đều bị preprocessor thay thế bằng “my url” do có <code>#define NSURL @“my url”</code> bên trên. Từ đó ta thấy với việc dùng <code>#include</code> hay <code>#import</code> thông thường thì các header của các file khác, hay của thư viện mà chúng ta dùng đều có thể bị ảnh hưởng như việc dùng <code>#define</code> ở trên.</p>
<p>Về vấn đề performance thì như ở trên ta đã thấy <code>#include</code> và <code>#import</code> sẽ copy/paste toàn bộ file header mà nó include (đệ quy). Như ở ví dụ đầu tiên chúng ta chỉ include mình Foundation.h nhưng sau khi preprocessing thì có tới hơn 92000 dòng là của Foundation.h (và các file header mà Foundation.h include), chỉ 8 dòng cuối là code của chúng ta. Thế nên thời gian compile sẽ trở nên nhiều hơn rất nhiều.</p>
<h2 id="pre-compiled-headers">Pre-compiled headers</h2>
<p>Để giải quyết 1 phần vấn đề performance chúng ta có thể dùng precompiled headers (.pch). Nếu các bạn chú ý thì tất cả iOS project khi được XCode tạo ra đều có file PROJECTNAME-Prefix.pch như sau:</p>
<p>{% codeblock lang:objc PROJECTNAME-Prefix.pch %} #import <Availability.h></p>
<h1 id="ifndef-__iphone_3_0-warning-this-project-uses-features-only-available-in-ios-sdk-3.0-and-later.-endif">ifndef __IPHONE_3_0 #warning “This project uses features only available in iOS SDK 3.0 and later.” #endif</h1>
<h1 id="ifdef-objc">ifdef <strong>OBJC</strong></h1>
<pre><code>#import &lt;UIKit/UIKit.h&gt;
#import &lt;Foundation/Foundation.h&gt;Foundation;</code></pre>
<h1 id="endif-1">endif</h1>
<p>{% endcodeblock %}</p>
<p>Trong file .pch này chúng ta sẽ include những header mà có khả năng được include tại nhiều nơi trong source code của ứng dụng như Foundation.h, UIKit.h… Khi source code của ứng dụng được compile thì file .pch này sẽ được compile đầu tiên, đồng nghĩa với việc tất cả file header được include trong file .pch này sẽ được compile trước và được include vào tất cả source code.</p>
<p>Bằng viêc caching những file header đã được biên dịch này thì những file này chỉ cần compile 1 lần, những lần sau chỉ cần sử dụng lại nên thời gian compile sẽ được rút gọn.</p>
<p>Thế nhưng các developer thường không hay quản lý file .pch này, và không phải file header nào cũng được dùng tại nhiều nơi trong source code nên hiệu quả của .pch chưa được cao.</p>
<h2 id="modules">Modules</h2>
<p>Vào tháng 11 năm 2012, Doug Gregor (một kỹ sư của Apple) đã giới thiệu tính năng modules nhằm giải quyết vấn đề trên của proprocessor thay cho .pch. Vậy module là gì? Module chính là một package mô tả một library, framework.</p>
<p>Ví dụ chạy 2 lệnh dưới đây ta sẽ có thể xem được các module trong SDK của iOS7.</p>
<p>{% codeblock %} % cd <code>xcrun --sdk iphoneos --show-sdk-path</code> % find . -name module.map</p>
<p>./Developer/Library/Frameworks/XCTest.framework/module.map<br /> ./System/Library/Frameworks/AudioToolbox.framework/module.map<br /> ./System/Library/Frameworks/AudioUnit.framework/module.map<br /> ./System/Library/Frameworks/CoreAudio.framework/module.map<br /> :<br /> :<br /> ./usr/include/dispatch/module.map<br /> ./usr/include/mach-o/module.map<br /> ./usr/include/module.map<br /> ./usr/include/objc/module.map {% endcodeblock %}</p>
<p>Với mỗi framework ta thấy có 1 file module.map để mô tả framework đấy.</p>
<p>Và để sử dụng framework chúng ta có thể thay <code>#import &lt;Frameworkname.h&gt;</code> bằng <code>@import Frameworkname;</code> Ví dụ khi sử dụng framework Foundation ta sẽ dùng <code>@import Foundation;</code> Vậy khi trong một file header gặp đoạn import module thì compiler đã xử lý gì và tại sao lại giải quyết được vấn đề Fragility và Performance của preprocessor?</p>
<p>Ví dụ khi trong một file header, preprocessor gặp <code>@import Foundation</code> thì sẽ xử lý các bước như sau:</p>
<ul>
<li>Tìm file module.map của framework có tên là Foundation</li>
<li>Dựa vào mô tả về framework trong file module.map này compiler sẽ parse các file headers và sinh ra file module (lưu dưới dạng AST - biểu diễn dưới dạng tree trước khi chuyển sang mã máy)</li>
<li>Load file module này tại đoạn khai báo import</li>
<li>Cache file module này để sử dụng lại cho những lần sau</li>
</ul>
<p>Thứ nhất thay vì copy nội dung các file header được include rồi mới compile, mà import trưc tiếp file module đã được lưu dưới dạng AST nên các header của framework ko bị ảnh hưởng bởi các đoạn code trước khi import (như #define) -&gt; tránh được vấn đề Fragility.</p>
<p>Thứ hai là nhờ việc cache những file module này mà compiler không phải biên dịch lần 2 nên sẽ rút gọn thời gian biên dịch.</p>
<p>Ngoài ra một điều thú vị nữa mà tính năng module mang lại cho lập trình viên đó là chúng ta không phải tự tay link các framework mà chúng ta import. Ví dụ như trước đây nếu trong file tmp.m có <code>#include &lt;Foundation/Foundation.h&gt;</code> thì khi biên dịch chúng ta phải tự link tới Foundation bằng lệnh : <code>clang tmp.m -o tmp -framework Foundation</code></p>
<p>Thế nhưng khi sử dụng <code>@import</code> thì chúng ta không cần phải tự link tới framework nữa mà chỉ cần:</p>
<p><code>clang tmp.m -o tmp -fmodules</code></p>
<p>Với XCode chúng ta sẽ không phải add thêm các framework mà mình muốn dùng trong <code>Link Binary With Libraries</code> như hình dưới đây.</p>
<p>{% img /images/clang_modules/link_framework.png %}</p>
<p>Đối với những project được tạo từ XCode5 thì tính năng module tự động được enable. Nhưng những project được tạo trước đây các bạn phải tự enable trong phần <code>Build Settings</code> (tức là set flag -fmodules).</p>
<p>{% img /images/clang_modules/enable_module.png %}</p>
<h1 id="kết-luận">Kết luận</h1>
<p>Bài viết này mình đã giới thiệu qua tính năng module của Clang trong được giới thiệu từ XCode5. Và đồng thời cũng giải thích qua về <code>#include</code>, <code>#import</code>, pch. Mặc dù tính năng module vẫn đang trong quá trình hoàn thiện nhưng hiện tại chúng ta đã có thể sử dụng với XCode5.</p>
<p>Các bạn có thể tìm hiểu thêm tại:</p>
<ul>
<li><a href="http://clang.llvm.org/docs/Modules.html">clang_modules</a></li>
<li><a href="http://llvm.org/devmtg/2012-11/Gregor-Modules.pdf">Bài phát biểu của Gregor</a></li>
</ul>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Những mẹo lập trình với Objective-C phần 2]]></title>
    <link href="http://git@github.com.github.com/blog/2013/09/17/nhung-meo-lap-trinh-voi-objective-c-phan-2/"/>
    <updated>2013-09-17T10:29:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/09/17/nhung-meo-lap-trinh-voi-objective-c-phan-2</id>
    <content type="html"><![CDATA[<p>Tiếp theo phần trước, trong bài viết này sẽ giới thiệu 1 kỹ thuật khác trong Objective C: Swizzling method.</p>
<h1 id="swizzling">Swizzling</h1>
<p>Thông thường, khi muốn thêm vào 1 class có sẵn 1 vài hàm mới, chúng ta có thể dùng <code>Categories</code>, đặc biệt là các class của thư viện (ko có source code) như NSArray, NSDictionary… Tuy nhiên, cách dùng <code>Categories</code> có 1 hạn chế là bạn không thể override các hàm có sẵn. Vậy đây chính là lý do chúng ta cần sử dụng đến Swizzling method.</p>
<p>Trong Objective C, khi bạn viết 1 đoạn code {% codeblock lang:objc %} [self presentViewController:mailController animated:YES completion:nil]; {% endcodeblock %}</p>
<p>bạn không thực sự gọi đến hàm <code>presentViewController:animated:completion:</code> mà thay vào đó là gửi đi 1 message <code>presentViewController:animated:completion:</code>. Trong quá trình chạy, object sẽ tìm kiếm method tương ứng dựa vào id của message này. Chúng ta có thể dựa vào swizzling để thay đổi cách object tìm kiếm method tương ứng này:</p>
<p>{% codeblock lang:objc %} SEL firstMethodSelector = <span class="citation" data-cites="selector">@selector</span>(firstMethod); SEL secondMethodSelector = <span class="citation" data-cites="selector">@selector</span>(secondMethod); Method firstMethod = class_getInstanceMethod(self, firstMethodSelector); Method secondMethod = class_getInstanceMethod(self, secondMethodSelector);</p>
<p>BOOL methodAdded = class_addMethod([self class], firstMethodSelector, method_getImplementation(secondMethod), method_getTypeEncoding(secondMethod));</p>
<p>if (methodAdded) { class_replaceMethod([self class], secondMethodSelector, method_getImplementation(firstMethod), method_getTypeEncoding(firstMethod)); } else { method_exchangeImplementations(firstMethod, secondMethod); } {% endcodeblock %}</p>
<p>Đi từng bước cho đoạn code ở trên:</p>
<ol type="1">
<li><p>Trước hết chúng ta tạo ra các selectors (SEL): <code>firstMethodSelector</code> và <code>secondMethodSelector</code></p></li>
<li><p>Lấy ra các hàm tương ứng với selectors gán vào <code>firstMethod</code> và <code>secondMethod</code> Method</p></li>
<li><p>Thêm vào class định nghĩa của method thứ 2 dưới cách gọi của method thứ nhất. Trường hợp này xảy ra khi method thứ nhất không thực sự tồn tại (trong 1 khả năng nào đó)</p></li>
<li><p>Nếu điều này xảy ra, chúng ta cần 1 định nghĩa cho selector của method thứ 2, vì vậy thay thế nó bằng implementation của method thứ nhất (rỗng)</p></li>
<li><p>Nếu không xảy ra, nghĩa là method thứ nhất có tồn tại, chúng ta thay đổi implementation của 2 method.</p></li>
</ol>
<h1 id="ví-dụ-1">Ví dụ 1</h1>
<p>Khi sử dụng Google Analystics, chúng ta muốn track page view cho tất cả các UIViewController trong project, tuy nhiên, nếu ở class nào cũng gọi hàm <code>trackView:&lt;class_name&gt;</code> thì tương đối nhiều, mà có thể còn bỏ sót. Vậy cách đơn giản nhất là override lại hàm <code>viewDidLoad</code> của <code>UIViewController</code>, trong đó chúng ta thực hiện <code>trackView</code> hoặc gọi 1 hàm khác bất kỳ, tuỳ theo mục đích của mình.</p>
<p>Chúng ta viết phần code trên trong <code>Categories</code> của <code>NSObject</code>, từ đó có thể gọi nó từ bất kỳ class nào:</p>
<p>{% codeblock lang:objc %} #import “NSObject+Swizzle.h” #import <objc/runtime.h></p>
<p><span class="citation" data-cites="implementation">@implementation</span> NSObject (Swizzle)</p>
<ul>
<li>(void) swizzleInstanceSelector:(SEL)originalSelector withNewSelector:(SEL)newSelector { Method originalMethod = class_getInstanceMethod(self, originalSelector); Method newMethod = class_getInstanceMethod(self, newSelector);</li>
</ul>
<p>BOOL methodAdded = class_addMethod([self class], originalSelector, method_getImplementation(newMethod), method_getTypeEncoding(newMethod));</p>
<p>if (methodAdded) { class_replaceMethod([self class], newSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod)); } else { method_exchangeImplementations(originalMethod, newMethod); } }</p>
<p><span class="citation" data-cites="end">@end</span> {% endcodeblock %}</p>
<p>Bây giờ tạo tiếp <code>Categories</code> cho UIViewController: {% codeblock lang:objc %}</p>
<h1 id="import-uiviewcontroller-swizzling.h">import “UIViewController+ Swizzling.h”</h1>
<h1 id="import-nsobjectswizzle.h">import “NSObject+Swizzle.h”</h1>
<p><span class="citation" data-cites="implementation">@implementation</span> UIViewController (Swizzling)</p>
<ul>
<li><p>(void)load { static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^{ <span class="citation" data-cites="selector">[self swizzleInstanceSelector:@selector(viewDidLoad) withNewSelector:@selector(myViewDidLoad)]</span>; }); }</p></li>
<li><p>(void) myViewDidLoad { NSLog(@“This is my view did load”);</p>
<p>// Track Google Analystic here</p>
<p>[self myViewDidLoad];</p></li>
</ul>
<p>} {% endcodeblock %}</p>
<p>Khi Objective-C run-time load 1 category, nó sẽ gọi đến hàm <code>load</code>. Chúng ta sử dụng dispatch_once để chắc chắn rằng hàm swizzle chỉ được gọi 1 lần. Sau khi import category này, (tốt nhất là trong file prefix - pch) tất cả các hàm <code>viewDidLoad</code> của <code>UIViewController</code> sẽ được thay thế bằng hàm <code>myViewDidLoad</code>.</p>
<h1 id="ví-dụ-2">Ví dụ 2</h1>
<p>1 ứng dụng khác của swizzling method là khi debug lỗi <code>index out of range</code> của NSArray. Nhiều khi gặp phải lỗi này nhưng chương trình không dừng lại ở đúng đoạn code bị lỗi (nhảy ra hàm main). 1 cách đơn giản để xử lý trường hợp này là override hàm <code>objectAtIndex:</code> của NSArray và bắt exception trong đó. Tuy nhiên, cách sử dụng swizzling method ở đây có hơi khác 1 chút.</p>
<p>Trước hết là tạo <code>Category</code> cho <code>NSArray</code>:</p>
<p>{% codeblock lang:objc %} <span class="citation" data-cites="implementation">@implementation</span> NSArray (OutOfRange)</p>
<p>-(void)safeObjectAtIndex:(NSUInteger)index { if (index &gt;= self.count) { NSLog(@“%s self = %@, pointer = %p, index = %lu”, <strong>FUNCTION</strong>, self, self, (unsigned long)index); } [self safeObjectAtIndex:index]; }</p>
<p><span class="citation" data-cites="end">@end</span> {% endcodeblock %}</p>
<p>Đặt 1 breakpoint vào trong điều kiện <code>if (index &gt;= self.count)</code> để có thể biết được lỗi đến từ đâu. Sau đó, trong hàm <code>main</code> của <code>main.m</code>, thực hiện exchange method: {% codeblock lang:objc %} #import <objc/runtime.h> #import “NSArray+OutOfRange.h”</p>
<p>int main(int argc, char *argv[]) { Class arrayClass = NSClassFromString(@“__NSArrayM“); Method originalMethod = class_getInstanceMethod(arrayClass, <span class="citation" data-cites="selector">@selector</span>(objectAtIndex:)); Method categoryMethod = class_getInstanceMethod([NSArray class], <span class="citation" data-cites="selector">@selector</span>(safeObjectAtIndex:)); method_exchangeImplementations(originalMethod, categoryMethod);</p>
<pre><code>NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];
int retVal = UIApplicationMain(argc, argv, nil, nil);
[pool release];
return retVal;</code></pre>
<p>} {% endcodeblock %}</p>
<p>Lưu ý ở đây chúng ta gọi Class <code>arrayClass = NSClassFromString(@&quot;__NSArrayM&quot;);</code> là bởi vì hàm <code>objectAtIndex:</code> không đến từ <code>NSArray</code> class mà đến từ <code>__NSArrayM</code> (xem trên console debug). Chính vì thế chúng ta không thể sử dụng cách swizzle thông thường như trong ví dụ 1.</p>
<p>Để test đoạn code này, trong 1 đoạn chương trình bất kỳ, tạo ra 1 bug: {% codeblock lang:objc %} NSMutableArray *list = [NSMutableArray arrayWithObjects:@“1”, @“2”, nil]; NSLog(@“Test: %@”, [list objectAtIndex:3]); {% endcodeblock %}</p>
<p>Bây giờ, chạy chương trình và tận hưởng thành quả :)</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[iOS property:attributes]]]></title>
    <link href="http://git@github.com.github.com/blog/2013/09/10/ios-property-attributes/"/>
    <updated>2013-09-10T00:56:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/09/10/ios-property-attributes</id>
    <content type="html"><![CDATA[<h1 id="mở-đầu">Mở đầu</h1>
<p>Nếu bạn đã từng sử dụng Objective C thì thấy rằng khi khai báo các property cho 1 class nào đấy chúng ta có 2 cách như sau: {% codeblock %} <span class="citation" data-cites="interface">@interface</span> MyClass : NSObject { NSString <em>myString; } {% endcodeblock %} hoặc có thể dùng <code>@property (attributes) type name</code> để khai báo như sau: {% codeblock %} <span class="citation" data-cites="interface">@interface</span> MyClass : NSObject { } <span class="citation" data-cites="property">@property</span> (strong, nonatomic) NSString </em>myString; {% endcodeblock %} Với cách thứ 2 thì compiler sẽ tự động sinh ra các setter/getter cho property ấy. Thế nhưng việc sinh ra setter/getter như thế nào là phụ thuộc vào tập <code>attributes</code> mà bạn đã set ở trên. Khi mới bắt đầu code iOS mình thấy việc set thuộc tính này hơi bị loạn với khá nhiều thuộc tính (retain, strong, weak, unsafe_unretained, nonatomic…). Rồi khi phiên bản thay đổi, kiểu project có dùng ARC hay không cũng dẫn đến việc sử dụng các thuộc tính này cũng khác nhau. Ngoài ra trong một số trường hợp nếu bạn không sử dụng đúng thuộc tính có thể làm app của bạn chạy bị lỗi. Trong bài viết này mình sẽ tóm tắt lại các thuộc tính của property, cũng như nói về khi nào sẽ dùng thuộc tính nào, tại sao, và thuộc tính nào là mặc định.</p>
<h1 id="các-thuộc-tính-của-property">Các thuộc tính của property</h1>
<p>Nếu chia nhóm thì có lẽ bao gồm 3 nhóm thuộc tính như sau:</p>
<h2 id="writability">Writability</h2>
<p>Nhóm này có 2 thuộc tính là <code>readwrite</code> và <code>readonly</code>. Nhóm thuộc tính này thì khá là dễ hiểu. Với thuộc tính <code>readwrite</code> thì compiler sẽ generate ra cả setter và getter, còn <code>readonly</code> thì compiler chỉ generate ra getter. Mặc định là <code>readwrite</code> (không liên quan đến project dùng ARC hay không).</p>
<h2 id="setter-semantics">Setter Semantics</h2>
<p>Nhóm này gồm các thuộc tính để chỉ ra cách thức quản lý bộ nhớ, bao gồm các thuộc tính như sau: <code>assign</code>, <code>strong</code>, <code>weak</code>, <code>unsafe_unretained</code>, <code>retain</code>, <code>copy</code>. Khi chúng ta set một trong các thuộc tính này cho property thì setter (getter không liên quan) được tạo ra thay đổi tương ứng với thuộc tính đó. Trước hết chúng ta sẽ nói qua về cách quản lý bộ nhớ trước iOS5 khi mà ARC chưa xuất hiện. {% codeblock %} Car <em>car1 = [[Car alloc] init]; //… [car1 release] {% endcodeblock %} Trước khi ARC xuất hiện thì các lập trình viên iOS đều phải tự quản lý bộ nhớ. Khi chúng ta tạo object với vùng nhớ của nó, đồng nghĩa với việc chúng ta nắm giữ ownership của object đó. Khi không cần dùng nữa thì phải huỷ bỏ ownership đấy đi bằng cách gửi message <code>release</code>. Một object có thể có nhiều ownership và mỗi object sẽ có 1 property tên là <code>retainCount</code> để lưu số lượng owner của nó. Mỗi khi chúng ta tạo object, hay <code>retain</code> thì <code>retainCount</code> lại được tăng lên 1. Khi chúng ta gửi message <code>release</code> tới object đấy thì <code>retainCount</code> lại bị giảm đi 1. Một khi <code>retainCount</code> bằng 0 thì vùng nhớ của nó sẽ bị giải phóng. Chúng ta có thể gửi message <code>retain</code> để tạo thêm ownership như ví dụ dưới đây. Khi đó <code>car1</code> và <code>car2</code> cùng trỏ đến 1 vùng nhớ và <code>retainCount</code> bây giờ bằng 2. {% codeblock %} // retain Car </em>car2 = [car1 retain]; // retainCount = 2 {% endcodeblock %} Ngoài ra để copy sang vùng nhớ mới chúng ta có thể gửi message <code>copy</code> như ví dụ dưới đây. Khi đó <code>retainCount</code> ở vùng nhớ mới có giá trị khởi tạo là 1. {% codeblock %} // copy Car *car3 = [car1 copy]; // retainCount = 1 {% endcodeblock %}</p>
<p>Quay trở lại với thuộc tính của property. Thuộc tính đầu tiên là <code>retain</code>. Như ví dụ dưới đây khi ta set thuộc tính <code>retain</code> cho property <code>name</code> thì compiler sẽ sinh ra setter <code>setName</code> như bên dưới. {% codeblock %} <span class="citation" data-cites="interface">@interface</span> Car: NSObject</p>
<p><span class="citation" data-cites="property">@property</span> (nonatomic, retain) NSString *name;</p>
<p><span class="citation" data-cites="end">@end</span>; {% endcodeblock %}</p>
<p>{% codeblock %} - (void)setName:(NSString *)newName { [newName retain]; [_name release]; _name = newName; } {% endcodeblock %} Nhìn vào setter ta thấy đầu tiên là tạo ownership (hay tăng <code>retainCount</code> thêm 1) của <code>newName</code> bằng cách gọi <code>[newNmane retain]</code>. Tiếp theo là việc gửi message <code>release</code> tới <code>_name</code> ban đầu để xoá ownership ban đầu đi. Sau đó mới gán contrỏ trỏ đến object mới. Vậy nên thuộc tính <code>retain</code> giúp tạo ra setter trong đó tạo ownership mới và trỏ đến vùng nhớ mới. Chú ý rằng thuộc tính <code>retain</code> chỉ dùng cho những project không dùng ARC.</p>
<p>Và từ iOS5 trở đi Apple giới thiệu ARC giúp cho việc quản lý bộ nhớ đơn giản hơn. ARC không hoạt động như các <code>Garbage Collection</code> khác mà thực ra chỉ là phần front-end của compiler nhằm mục đich tự động chèn thêm các đoạn code gọi message như <code>retain</code> hay <code>release</code>. Từ đấy lập trình viên không phải gọi các message này nữa. Ví dụ như 1 object được tạo trong 1 method thì sẽ chèn thêm đoạn gửi message <code>release</code> tới object đó ở gần cuối method. Hay trong trường hợp là property của 1 class <code>Car</code> ở trên thì tự động chèn <code>[_name release]</code> trong method <code>dealloc</code> của class <code>Car</code> chẳng hạn. {% codeblock %}</p>
<ul>
<li>(void)dealloc { //… [_name release]; //… } {% endcodeblock %} Khi project của bạn dùng ARC thì chúng ta sẽ dùng thuộc tính <code>strong</code> thay cho thuộc tính <code>retain</code>. <code>strong</code> cũng tương tự như <code>retain</code> sẽ giúp tạo ra setter, mà trong setter đó tạo ra ownership mới (tăng retainCount thêm 1). Và ngoài ra ARC sẽ thêm các đoạn gửi message <code>release</code> tới các property này trong method <code>dealloc</code> của class.</li>
</ul>
<p>Thế nhưng xuất hiện vấn đề có tên là <code>Strong Reference Cycles</code>. Mình sẽ lấy 1 ví dụ để thấy rõ hơn về vấn đề này. Một object A nào đấy có ownership của 1 object B. Object B lại có ownership của 1 object C. Object C lại có ownership của object B.</p>
<p>{% img /images/ios_property_attributes/strong_reference_cycles.png %}</p>
<p>Một khi object A ko cần thiết nữa thì trong method <code>dealloc</code> của A sẽ gửi message <code>release</code> tới object B. retainCount của object B giảm đi 1 nhưng vẫn còn 1 ( do object C retain ) thế nên method <code>dealloc</code> của object B không bao giờ được gọi, kéo theo message <code>release</code> cũng không bao giờ được gửi tới object C. Từ đó dẫn đến vùng nhớ của object B và object C không được giải phóng =&gt; xuất hiện hiện tượng Leak Memory. Vì vậy để tránh hiện tượng này ta sẽ dùng thuộc tính <code>weak</code> thay vì dùng thuộc tính <code>strong</code> trong class của object C. Với thuộc tính <code>weak</code> thì trong setter được sinh ra sẽ không <code>retain</code> (không tăng retainCount thêm 1) mà chỉ đơn thuần gán con trỏ trỏ đến vùng nhớ mới. Thuộc tính <code>weak</code> cũng chỉ dùng trong trường hợp bạn đang dùng ARC. Và một cái hay của <code>weak</code> nữa là khi vùng nhớ bị giải phóng thì con trỏ được set bằng <code>nil</code>. Mà trong Objective C thì gửi message đến <code>nil</code> sẽ không vấn đề gì, app của bạn không bị crash. Điển hình nhất của việc dùng thuộc tính <code>weak</code> đó là cho các <code>delegate</code>, <code>datasource</code>.</p>
<p>Tuy nhiên vẫn còn một vài class như NSTextView, NSFont, NSColorSpace chưa hỗ trợ khai báo thuộc tính <code>weak</code> nên với những class này bạn có thể dùng thuộc tính <code>unsafe_unretained</code> thay cho <code>weak</code>. Thế nhưng chú ý 1 điều rằng sau khi vùng nhớ nó trỏ tới bị xoá thì con trỏ không được set la nil.</p>
<p>Tiếp theo là thuộc tính <code>copy</code>. Với việc thiết lập thuộc tính này compiller sẽ tạo ra setter như sau: {% codeblock %} <span class="citation" data-cites="interface">@interface</span> Car: NSObject</p>
<p><span class="citation" data-cites="property">@property</span> (nonatomic, copy) NSString *name;</p>
<p><span class="citation" data-cites="end">@end</span>; {% endcodeblock %}</p>
<p>{% codeblock %} - (void)setName:(NSString *)newName { [_name release]; _name = [newName copy]; // retainCount = 1 } {% endcodeblock %}</p>
<p>Như ở trên ta thấy 1 vùng nhớ mới được copy ra và <code>_name</code> giờ chiếm giữ 1 ownership của vùng nhớ đó. Tại sao chúng ta không dùng <code>strong</code> ở đây mà lại dùng <code>copy</code>. Giả sử ở trên chúng ta dùng thuộc tính <code>strong</code> và xem qua 2 ví dụ dưới đây. {% codeblock %} NSString <em>name1 = @“Toyota”; car1.name = name1; name1 = @“Honda”; {% endcodeblock %} Trong trường hợp này <code>car1.name</code> vẫn có giá trị là “Toyota” và <code>name1</code> giờ chuyển thành “Honda”. Hoàn toàn không có vấn đề gì. Thế nhưng trong ví dụ thứ 2 dưới đây thay vì dùng NSString mà dùng subclass của nó là NSMutableString. {% codeblock %} NSMutableString </em>name1 = @“Toyota”; car1.name = name1; [name1 appendString:“2”]; {% endcodeblock %} Trong trường hợp này giá trị của <code>car1.name</code> là “Toyota2” mặc dù ban đầu chúng ta set là “Toyota”. Vì vậy mặc dù property <code>name</code> trong class <code>Car</code> với kiểu NSString nhưng nếu dùng <code>strong</code> giá trị của <code>name</code> vẫn có thể bị append như trên. Để tránh những trường hợp như thế ta dùng <code>copy</code> để mỗi lần gán sẽ copy 1 vùng nhớ mới tránh được những trường hợp như trên. Đối với những class có subclass là <code>Mutable...</code> thì chúng ta nên chú ý dùng thuộc tính <code>copy</code>. Ngoài ra <code>block</code> cũng phải dùng <code>copy</code>.</p>
<p>Thuộc tính cuối cùng trong nhóm này là <code>assign</code> thì dùng cho các property kiểu không phải là object. Tức là các kiểu dữ liệu như <code>int</code>, <code>NSInteger</code>, <code>float</code>,…</p>
<p>Với nhóm thuộc tính này thì <code>strong</code> là thuộc tính mặc định trong trường hợp dùng ARC, còn <code>retain</code> là thuộc tính mặc định trong trường hợp không dùng ARC.</p>
<h2 id="atomicity">Atomicity</h2>
<p>Nhóm thuộc tính này bao gồm 2 thuộc tính là <code>atomic</code> và <code>nonatomic</code>. Thuộc tính mặc định là <code>atomic</code>. Nhóm thuộc tính này liên quan đến vấn đề multithread. Chưa bàn đến atomic hay nonatomic, mà chúng ta cùng xem ví dụ sau: {% codeblock %} <span class="citation" data-cites="interface">@interface</span> MyView { }</p>
<p><span class="citation" data-cites="property">@property</span> CGPoint center;</p>
<p><span class="citation" data-cites="end">@end</span> {% endcodeblock %}</p>
<p>khi đấy chúng ta có setter/getter như sau:</p>
<p>{% codeblock %} - (CGPoint) center { return _center; }</p>
<ul>
<li>(void)setCenter:(CGPoint)newCenter { _center = newCenter; } {% endcodeblock %} và bởi vì struct CGPoint có 2 thành phần <code>CGFloat x, CGFloat y</code> nên thực ra setter sẽ thực hiện các bước như sau: {% codeblock %}</li>
<li>(void)setCenter:(CGPoint)newCenter { _center.x = newCenter.x; _center.y = newCenter.y; } {% endcodeblock %}</li>
</ul>
<p>Trong trường hợp chúng ta chạy multithread thì có thể xảy ra khả năng như sau: {% codeblock %} // giả sủ ban đầu center của myView là (-5.f, -8.f)</p>
<p>// thread 1 gọi setter [myView setCenter:CGPointMake(1.f, 2.f)];</p>
<p>// tiep theo bên trong setCenter sẽ chạy _center.x = newCenter.x; // _center.x giờ có giá trị là 1.f và _center.y vẫn giữ giá trị là -8.f</p>
<p>// chưa kịp chạy lệnh tiếp theo để set _center.y thì ở thread 2 gọi getter CGPoint point = [myView center]; // và getter chạy trả về (1.f, -8.f)</p>
<p>// thread 1 tiếp tục giá trị cho y _center.y = newCenter.y // _center.y giờ là 2.f {% endcodeblock %}</p>
<p>Như trường hợp ở trên ta thấy giá trị center là (1.f, 2.f) nhưng tại thread 2 giá trị lấy được lại là (1.f, -8.f) dẫn đến kết quả không được như mong muốn. Vì vậy trong trường hợp multithread để tránh những tình huống như trên ta set thuộc tính <code>atomic</code> cho property. Khi đấy compiler sẽ sinh ra các setter/getter như sau: {% codeblock %} - (CGPoint) center { CGPoint curCenter; <span class="citation" data-cites="synchronized">@synchronized</span>(self) { curCenter = _center; } return curCenter; }</p>
<ul>
<li>(void)setCenter:(CGPoint)newCenter { <span class="citation" data-cites="synchronized">@synchronized</span>(self) { _center = newCenter; } } {% endcodeblock %} Bên trong setter/getter sử dụng lock để tránh việc nhiều thread truy cập đồng thời. Thế nhưng việc dùng lock sẽ mất chi phí cũng như cản trở tốc độ của chương trình. Vì vậy nên trong trường hợp bạn không dùng multithread hoặc không thể xảy ra những vấn đề như trên thì bạn nên dùng thuộc tính <code>nonatomic</code> để tăng tốc độ cho chương trình.</li>
</ul>
<h1 id="tổng-kết">Tổng kết</h1>
<p>Bài viết này mình đã trình bày về các thuộc tính cho property, giải thích qua về các thuộc tính cũng như khi nào nên dùng thuộc tính nào. Mặc dù mình vẫn thấy còn những lập trình viên không dùng ARC nhưng có lẽ đa số mọi người đã chuyển qua dùng ARC. Thế nên thuộc tính <code>retain</code> có thể không cần dùng nữa. Để tìm hiểu kĩ hơn các bạn có thể đọc tại <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/ProgrammingWithObjectiveC.pdf">Programming With Objective C</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Những mẹo lập trình với Objective-C]]></title>
    <link href="http://git@github.com.github.com/blog/2013/08/26/nhung-meo-lap-trinh-voi-objective-c/"/>
    <updated>2013-08-26T09:30:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/08/26/nhung-meo-lap-trinh-voi-objective-c</id>
    <content type="html"><![CDATA[<h1 id="mở-đầu">Mở đầu</h1>
<p>Đối với những lập trình viên khi mới tiếp xúc với Objective-C, chắc hẳn sẽ gặp phải 1 số bỡ ngỡ với các cú pháp của nó. Tuy được kế thừa từ C nhưng Objective-C lại có cách gọi hàm, sử dụng biến khác hẳn. Vì thế, bài viết này sẽ giới thiệu cho mọi người 1 số mẹo để lập trình hiệu quả với Objective-C, đặc biệt là đối với những ai chưa có thời gian dài tiếp xúc với nó.</p>
<h1 id="objective-c-literals">Objective-C Literals</h1>
<ul>
<li>Thứ nhất là đối với NSNumber, thay vì phải khởi tạo dài dòng như <code>[NSNumber numberWithInt:x]</code>… chúng ta có thể thay thế bằng các cách dưới đây: {% codeblock lang:objc %}</li>
</ul>
<p>// character literals. NSNumber *theLetterZ = @‘Z’; // tương đương với [NSNumber numberWithChar:‘Z’]</p>
<p>// integral literals. NSNumber <em>fortyTwo = @42; // tương đương với [NSNumber numberWithInt:42] NSNumber </em>fortyTwoUnsigned = @42U; // tương đương với [NSNumber numberWithUnsignedInt:42U] NSNumber <em>fortyTwoLong = @42L; // tương đương với [NSNumber numberWithLong:42L] NSNumber </em>fortyTwoLongLong = @42LL; // tương đương với [NSNumber numberWithLongLong:42LL]</p>
<p>// floating point literals. NSNumber <em>piFloat = @3.141592654F; // tương đương với [NSNumber numberWithFloat:3.141592654F] NSNumber </em>piDouble = @3.1415926535; // tương đương với [NSNumber numberWithDouble:3.1415926535]</p>
<p>// BOOL literals. NSNumber <em>yesNumber = <span class="citation" data-cites="YES">@YES</span>; // tương đương với [NSNumber numberWithBool:YES] NSNumber </em>noNumber = <span class="citation" data-cites="NO">@NO</span>; // tương đương với [NSNumber numberWithBool:NO]</p>
<h1 id="ifdef-__cplusplus-nsnumber-truenumber-true-tương-đương-với-nsnumber-numberwithboolbooltrue-nsnumber-falsenumber-false-tương-đương-với-nsnumber-numberwithboolboolfalse-endif">ifdef __cplusplus NSNumber <em>trueNumber = <span class="citation" data-cites="true">@true</span>; // tương đương với [NSNumber numberWithBool:(BOOL)true] NSNumber </em>falseNumber = <span class="citation" data-cites="false">@false</span>; // tương đương với [NSNumber numberWithBool:(BOOL)false] #endif</h1>
<p>{% endcodeblock %}</p>
<ul>
<li>Tạo mảng nhanh: Thay vì dùng khởi tạo <code>[NSArray arrayWithObjects:…]</code> chúng ta có thể dùng:</li>
</ul>
<p>{% codeblock lang:objc %} NSArray *array = @[ @“Hello”, NSApp, [NSNumber numberWithInt:42] ]; {% endcodeblock %}</p>
<p>Và tạo NSDictionary: {% codeblock lang:objc %} NSDictionary *dictionary = @{ @“name” : name1, @“date” : [NSDate date], @“processInfo” : [ProcessInfo processInfo] }; {% endcodeblock %}</p>
<p>Cách gọi trên kia sẽ tạo ra 1 NSDictionary với 3 key: name, date, processInfo và các value tương ứng. Các value phải là đối tượng của ObjectiveC và phải khác nil (nếu không sẽ crash). Tiện thể với dictionary, khi khởi tạo 1 NSDictionary: {% codeblock lang:objc %} [NSDictionary dictionaryWithObjectsAndKeys: value_1, @“key1”, value_2, @“key2”, value_3, @“key3”, … value_n, @“keyn”, nil] {% endcodeblock %}</p>
<p>Nếu có 1 trong các value từ <code>value_1</code> đến <code>value_n</code> bằng nil, vd là <code>value_i</code>, thì NSDictionary được tạo ra sẽ chỉ nhận được các key và value trong khoảng từ <code>value_1</code> đến <code>value_(i-1)</code> chứ không làm crash chương trình. Vì vậy, trong lúc lập trình, nên chú ý điều này để tránh việc tìm không ra lỗi.</p>
<ul>
<li>Sử dụng toán tử chỉ số cho array và dictionary giống C: {% codeblock lang:objc %} NSMutableArray *array = …; NSUInteger idx = …; id newObject = …; id oldObject = array[idx]; // tương đương với oldObject = [array objectAtIndex:idx] array[idx] = newObject; // tương đương với [array replaceObjectAtIndex:idx withObject:newObject]</li>
</ul>
<p>NSMutableDictionary <em>dictionary = …; NSString </em>key = …; oldObject = dictionary[key]; // tương đương với oldObject = [dictionary objectForKey:key] dictionary[key] = newObject; // tương đương với [dictionary setObject:newObject forKey:key] {% endcodeblock %}</p>
<p>Chú ý là replace object chỉ dùng được cho NSMutableArray và NSMutableDictionary, không dùng được cho NSArray và NSDictionary.</p>
<h1 id="mẹo-debug-với-xcode">Mẹo debug với XCode</h1>
<p>Khi debug code Objective C, chương trình sẽ nhảy ra hàm main <code>int retVal = UIApplicationMain(argc, argv, nil, @&quot;AppDelegate&quot;);</code> mỗi khi có crash. Màn hình log thì có quá ít thông tin để giúp cho việc debug lỗi crash này. Vậy thì làm thế nào để khắc phục điều này, giúp cho XCode stop lại ở đúng nơi nó bị crash? Đầu tiên là mở panel Breakpoint Navigator và click vào button + ở góc trái dưới màn hình, chọn Add Exception Breakpoint:</p>
<p>{% img /images/meo_objective_c/addex.png %}</p>
<p>Sau đó ấn Done button để tạo 1 exception breakpoint mới:</p>
<p>{% img /images/meo_objective_c/doneex.png %}</p>
<p>Chuột phải vào breakpoint mới tạo ra, chọn Move breakpoint to &gt; User để áp dụng cho tất cả các workspaces khác:</p>
<p>{% img /images/meo_objective_c/senduser.png %}</p>
<p>Vậy là xong, kể từ bây giờ bạn sẽ được nhìn thấy nơi chôn rau cắt rốn của đống crash :)</p>
<h1 id="tổng-kết">Tổng kết</h1>
<p>Những tips trong bài viết này tuy nhỏ nhưng có thể sẽ rất hữu ích trong quá trình code của bạn, giúp code ngắn gọn và sáng sủa hơn. Tất nhiên vẫn còn rất nhiều kỹ thuật đặc biệt khác trong Objective-C mà trong khuôn khổ bài viết này chưa thể đề cập hết được. Vì thế, hãy đợi bài viết sau nhé :)</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Những lưu ý khi dùng UITableView - Phần 2]]></title>
    <link href="http://git@github.com.github.com/blog/2013/08/05/nhung-luu-y-khi-dung-uitableview-phan-2/"/>
    <updated>2013-08-05T10:28:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/08/05/nhung-luu-y-khi-dung-uitableview-phan-2</id>
    <content type="html"><![CDATA[<p>Như đã giới thiệu ở phần trước, chúng ta có thể làm giảm load của chương trình bằng cách tính toán trước chiều cao của các table cell. Ở phần này, chúng ta sẽ cùng xem chi tiết vấn đề này thông qua 1 ví dụ nhỏ.</p>
<p>Hãy xét 1 tình huống chúng ta có 1 table view để hiện thị 1 danh sách tin tức (có thể lấy từ sv về). Các bản tin này bao gồm ảnh, tiêu đề và nội dung. Phần tiêu đề chỉ hiện thị trên 1 dòng, vì thế chiều cao của bản tin sẽ phụ thuộc vào phần nội dung. Để cho đơn giản, trong ví dụ này, nội dung của tin sẽ được set cứng, lưu vào và lấy ra trong NSUserDefault.</p>
<p>Trước hết, hãy tạo ra 1 custom TableView Cell tương tự như trong bài viết 1. Cell này có 3 thành phần: avatar, nameLabel, contentLabel tương ứng với 3 thành phần của bài viết.</p>
<p>{% img /images/luuYTableView/custom_cell.png %}</p>
<p>Chúng ta khởi tạo cell dựa vào 1 dictionary chứa thông tin của bài viết, thông qua hàm: -(void)setupCellWithDictionary:(NSDictionary *)dictionary</p>
<p>{% codeblock lang:objc %} nameLabel.text = dictionary[@“name”]; contentLabel.text = dictionary[@“content”]; avatarImg.image = [UIImage imageNamed:dictionary[@“avatar”]];</p>
<pre><code>float contentLabelWidth = 228;
CGSize constraint = CGSizeMake(contentLabelWidth, 20000.0f);
CGSize size = [contentLabel.text sizeWithFont:contentLabel.font constrainedToSize:constraint lineBreakMode:NSLineBreakByWordWrapping];
contentLabel.frame = CGRectMake(contentLabel.frame.origin.x, contentLabel.frame.origin.y, contentLabel.frame.size.width, size.height);</code></pre>
<p>{% endcodeblock %}</p>
<p>và tính toán chiều cao của cell bằng cách tính chiều cao của contentLabel qua hàm: +(float)heightForCellWithDictionary:(NSDictionary *)dictionary</p>
<p>{% codeblock lang:objc %} NSString *content = dictionary[@“content”]; float contentLabelWidth = 228; CGSize constraint = CGSizeMake(contentLabelWidth, 20000.0f); CGSize size = [content sizeWithFont:[UIFont systemFontOfSize:17] constrainedToSize:constraint lineBreakMode:NSLineBreakByWordWrapping]; return size.height + 34 + 10; {% endcodeblock %}</p>
<p>Vậy là xong cho table cell, tiếp đến sẽ là sử dụng các cell này cho hiệu quả. Trước hết là lấy danh sách các bản tin:</p>
<p>{% codeblock lang:objc %} listNews = [[NSUserDefaults standardUserDefaults] objectForKey:@“list_news”]; [self calculateCellHeights];</p>
<pre><code>[myTableView reloadData];</code></pre>
<p>{% endcodeblock %}</p>
<p>Sau khi lấy được listNews, chúng ta sẽ tính toán luôn height cho từng cell và lưu vào database (ở đây là NSUserDefault) qua hàm calculateCellHeights, và khi lấy ra các height này qua hàm -(float)tableView:(UITableView <em>)tableView heightForRowAtIndexPath:(NSIndexPath </em>)indexPath chúng ta sẽ lấy ra từ database dựa vào Id của cell chứ không phải tính toán lại như thông thường:</p>
<p>{% codeblock lang:objc %} NSString *key = [NSString stringWithFormat:@“cell_%@”, cellId];<br /> float height = [[NSUserDefaults standardUserDefaults] floatForKey:key]; return height; {% endcodeblock %}</p>
<p>Điểm đặc biệt của phương pháp này là các cell height sẽ chỉ phải tính 1 lần cho từng cell_ID, vì thế nếu lần load sau, nếu có cùng dữ liệu thì các height này sẽ không phải tính lại. Nếu bộ dữ liệu lớn, hoặc là các cell này được sử dụng lại nhiều lần, thì phương pháp này sẽ vô cùng hữu hiệu.</p>
<p>Hàm -(void)calculateCellHeights</p>
<p>{% codeblock lang:objc %} for (int i=0; i&lt;listNews.count; i++) { NSDictionary <em>cellDict = listNews[i]; NSString </em>cellId = cellDict[@“cellId”]; // Chỉ tính toán cho các cell chưa tồn tại if ([self isCellIdExisted:cellId]) { NSLog(@“calculate cell height”); float height = [CustomTableCell heightForCellWithDictionary:cellDict]; [self saveCellHeight:height forCellId:cellId]; } } {% endcodeblock %}</p>
<p>Lưu ý là trong ví dụ này, các cell height được lưu trong NSUserDefault, bạn hoàn toàn có thể lưu trong database như sqlite hoặc core data với nhiều tính năng hơn. Toàn bộ code của bài viết có thể được download tại đây https://github.com/toandk/NewsFeedExample</p>]]></content>
  </entry>
  
</feed>
