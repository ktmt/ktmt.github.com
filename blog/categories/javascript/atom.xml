<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Blog kỹ thuật máy tính]]></title>
  <link href="http://git@github.com.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://git@github.com.github.com/"/>
  <updated>2015-05-07T01:18:39+09:00</updated>
  <id>http://git@github.com.github.com/</id>
  <author>
    <name><![CDATA[kỹ thuật máy tính]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[traditional snake game with javascript]]></title>
    <link href="http://git@github.com.github.com/blog/2013/07/22/traditional-snake-game-with-javascript/"/>
    <updated>2013-07-22T14:18:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/07/22/traditional-snake-game-with-javascript</id>
    <content type="html"><![CDATA[<h2 id="i.-mở-đầu">I. Mở đầu</h2>
<p>Năm nay năm âm là năm rắn, hồi tết mình ngồi rỗi không biết làm gì nên quyết định làm một game liên quan đến con rắn. Mà đã liên quan đến rắn thì chắc hẳn mọi người đều nhớ đến game cổ điển snake trên chiếc điện thoại nokia 1010. Để code xong cái đưa được cho bạn bè xem ngay, mình nghĩ làm trên javascript có lẽ là sự lựa chọn tốt nhất. Trong bài này mình sẽ giới thiệu về cách làm game snake trên javascript.</p>
<h2 id="ii.-thiết-kế-chương-trình">II. Thiết kế chương trình</h2>
<p>Chỉ cần google với từ khóa “snake game trên javascript” cácbạn sẽ có khá nhiều kết quả với khác nhiều cách implement khác nhau cho đò họa. Có cách sử dụng canvas, có cách sử dụng đơn thuần css bình thường. Để làm cho nhanh thì mình sẽ sử dụng css.</p>
<ul>
<li><strong>Idea của game</strong>:</li>
</ul>
<p>Game snake có dạng như sau:</p>
<p>{% img /images/snake/snake_normal.jpg ‘image’ ‘images’ %}</p>
<p>Do đó chúng ta sẽ cần một bảng dạng “grid” để con rắn của chúng ta chạy. Bảng này có thể được implement một cách dễ dàng bằng table của html. Chúng ta sẽ tạo một table dynamically bằng code như dưới đây:</p>
{% codeblock snake.js %} var boardsize = 10; //create table tbl = “”; for(var i = 1; i &lt;= boardsize; i++) { tbl += “
<tr>
“; for (var j = 1; j &lt;= boardsize; j++) { tbl +=”
<td type row="&quot;+i+&quot;" col="&quot;+j+&quot;">
</td>
“; } tbl +=”
</tr>
<p>“; } $(”#gameboard“).html(tbl); {% endcodeblock %}</p>
<p>Như vậy chúng ta sẽ có cái grid view để con rắn của chúng ta chạy vòng quanh. Tiếp theo chúng ta sẽ design logic cho game. Về mặt idea, do chúng ta dùng css cho GUI, nên body con rắn của chúng ta sẽ được quản lý dưới dạng một <strong>array</strong>, mà mỗi element của array đó sẽ chứa 2 phần tử là <strong>row</strong> và <strong>col</strong> chính là vị trí của mỗi một khúc của thân con rắn. Với mỗi một step của Game loop, chúng ta sẽ vẽ những điểm có tọa độ nằm trong body con rắn với một màu nhất định.</p>
<ul>
<li><strong>Coding</strong>:</li>
</ul>
<p>Để implement idea đó, chúng ta cần có một object Game. Trong object đó sẽ có các properties: snake_head (đầu con rắn), snake_body(array thân con rắn), snake_direction (hướng đi hiện tại, gồm có 4 hướng là left, right, up, down), fps (tốc độ di chuyển con rắn), và food (vị trí của thức ăn)</p>
<p>{% codeblock snake.js %} var Game = function(){ this.snake_head = {row:5, col:5}; this.snake_body = [this.snake_head];<br /> this.snake_direction = 0; this.food = {row:-1, col:-1} this.timer = 0; this.fps = 10; this.keys = { LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40<br /> };<br /> this.key_list = [37, 38, 39, 40];</p>
<p>this.colorset = { SNAKE: “black”, FOOD: “blue”, BACKGROUND: “white” } }; {% endcodeblock %}</p>
<p>Ok như vậy là đã xong phần khung. Giờ đến đoạn di chuyển và ăn thức ăn của con rắn. Đầu tiên là về mặt di chuyển. Để di chuyển con rắn thì đầu tiên chúng ta phải catch event key và set direction cho nó. Việc này được thực hiện thông qua đoạn code dưới đây:</p>
<p>{% codeblock snake.js %} Game.prototype.key_handler = function(evt) { var self = this; var diff = self.snake_direction - evt.keyCode; if(self.key_list.contains(evt.keyCode)) { if (Math.abs(diff) != 2) { /<em>logic này dùng để check việc khi snake đang di chuyển left thì người dùng bấm right (hoặc tương tự với đang di chuyển up bấm down…), khi đó thì con rắn của chúng ta sẽ không chuyển hướng</em>/ self.snake_direction = evt.keyCode; } } }</p>
<p>//binding key $(‘body’).keydown(function(evt){ snakeGame.key_handler(evt);<br />}) {% endcodeblock %}</p>
<p>Như vậy chúng ta đã có logic để khi người dùng bấm phím di chuyển con rắn chúng ta sẽ có direction thích hợp. Vấn đề là với direction đó con rắn của chúng ta sẽ di chuyển thế nào. Vấn đề đó được implement ở đoạn code dưới đây:</p>
<p>{% codeblock snake.js%} Game.prototype.set_body = function() { var self = this; var direction = self.snake_direction;</p>
<p>//set snake body len = this.snake_body.length; var head_row = self.snake_body[len-1].row, head_col = self.snake_body[len-1].col;</p>
<p>switch(direction) { //set head pos with direction case self.keys.LEFT: head_col = head_col-1; break; case self.keys.RIGHT: head_col = head_col+1; break; case self.keys.UP: head_row = head_row-1; break; case self.keys.DOWN: head_row = head_row+1; break; default: return; }</p>
<p>var head_pos = getat(head_row, head_col);</p>
<p>//check game over if(head_pos.attr(“type”) === “snake” || head_row &lt; 1 || head_col &lt; 1 || head_row &gt; boardsize || head_col &gt; boardsize) { self.end_game(); return; }</p>
<p>self.snake_body.push({row: head_row, col: head_col}); //push head len = self.snake_body.length; //if not get food if (head_pos.attr(“type”) !== “food”) self.snake_body = self.snake_body.slice(1,len); //cut tail else { <span class="math">\((&quot;#score&quot;).html(parseInt(\)</span>(“#score”).html()) + 1); self.set_food(); } return true; } {% endcodeblock %}</p>
<p>Chúng ta có thể thấy gì từ đoạn code trên. Đầu tiên các bạn sẽ thấy chúng ta di chuyển con rắn bằng cách nào. Việc di chuyển con rắn được thưc hiện rất đơn giản. Với mỗi step di chuyển, chúng ta set vị trí mới cho đầu con rắn dựa vào direction tính được ở trên, và cắt cái đuôi của cái array đi. Rất đơn giản phải không :D. Ngoài ra ở đoạn code trên chúng ta cũng thấy, khi vị trí mới của đầu con rắn trùng với vị trí của thức ăn, thì chúng ta sẽ không cắt đuôi của array đi, và việc này đồng nghĩa với việc con rắn dài ra.</p>
<p>Đoạn code trên đồng thời cũng implement hệ thống tính điểm (mỗi lần ăn thức ăn là score increment thêm 1), và logic về khi con rắn đâm vào tường hoặc là đâm vào chính nó thì sẽ chết (ở đoạn //check game over)</p>
<p>Thêm thắt một chút css, chúng ta đã có một game con rắn hoàn chỉnh</p>
<p>{% img /images/snake/screenshot.png ‘image’ ‘images’ %}</p>
<p>Toàn bộ source code cho ví dụ này mình để ở trên <a href="https://github.com/ktmt/snake-js" class="uri">https://github.com/ktmt/snake-js</a> , các bạn có thể sử dụng tùy thích.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[closure và scope trong javascript]]></title>
    <link href="http://git@github.com.github.com/blog/2013/05/12/closure-va-scope-cua-javascript/"/>
    <updated>2013-05-12T00:15:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/05/12/closure-va-scope-cua-javascript</id>
    <content type="html"><![CDATA[<h1 id="scope-và-closure-là-gì">Scope và closure là gì?</h1>
<p>Scope và closure là 2 khái niệm cơ bản mà một programmer nên biết, vì hiểu rõ 2 khái niệm này vừa giúp cho programmer tránh được một số lỗi hay gặp, vừa giúp thiết kế chương trình tốt hơn. Đầu tiên chúng ta sẽ remind lại 2 khái niệm này một cách ngắn gọn. Đầu tiên là khái niệm về scope, khái niệm này quá cơ bản chắc hẳn mọi người đều biết, nhưng thôi mình cứ quote lại từ wikipedia đề phòng có người quên: &gt; [Scope refers to where variables and functions are accessible, and in what context it is being executed]</p>
<p>=&gt; Dịch ra đại thể là scope là nơi mà <em>biến</em> hoặc <em>hàm</em> có thể truy cập vào và sử dụng/ tham chiếu được qua tên trực tiếp. Và ở ngoài scope đó thì <em>biến</em> hoặc <em>hàm</em> đó sẽ không thể <strong>nhìn</strong> được một cách trực tiếp nữa. (hơi khó hình dung nhỉ). Để phân loại scope thì có rất nhiều cách tùy thuộc vào từng góc nhìn , nhưng mình sẽ không đi sâu vào vấn đề này. Mỗi ngôn ngữ lại có đặc trưng về scope khác nhau. Trong bài viết này chúng ta sẽ chỉ tập trung vào javascript.</p>
<p>Khái niệm tiếp theo là về closure, khái niệm này thì không phải ai cũng biết, vì không phải ai cũng cần đến và từng động đến. Một số ngôn ngữ mainstream như C++ , java cũng không hỗ trợ closure, càng làm ít người để ý đến nó (java 8 expected sẽ cho closure vào). Hãy xem wiki nói về closure thế nào:</p>
<blockquote>
<p>[a closure (also lexical closure or function closure) is a function or reference to a function together with a <strong>referencing environment</strong>]</p>
</blockquote>
<p>=&gt; Dịch ra đại thể là closure là một hàm hoặc một tham chiếu (hay còn gọi là một cái <strong>bao đóng</strong>) đi kèm với cái môi trường mà nó tham chiếu đến (khá là xoắn). Cái cần nhấn mạnh ở đây là cái <strong>referencing environment</strong> (môi trường tham chiếu) mà các bạn sẽ hiểu hơn ở các ví dụ dưới đây.</p>
<h1 id="scope-và-closure-trong-javascript">Scope và closure trong javascript</h1>
<p>Javascript là một ngôn ngữ phổ biến hiện nay. Người biết về js thì nhiều, nhưng người hiểu rõ một số corner của js thì chắc không nhiều đến thế :D. Một trong các corner đấy chính là <strong>scope và closure</strong>. Js là một ngôn ngữ khá đặc biệt, đặc biệt ở chỗ js mang hơi hướng của lập trình hàm (functional programming), khi mà <strong>function ở js cũng là một first-class object</strong>, tức là function có thể được tạo mới (construct new) tại run-time, được lưu dưới dạng một cấu trúc dữ liệu (data structure), được truyền qua parameter, được dùng như một giá trị trả về (return value). Chính vì đặc điểm đấy khiến cho scope và closure của js không giống như các ngôn ngữ phổ biến khác.</p>
<p>Đầu tiên chúng ta sẽ nói về scope</p>
<h2 id="scope">1. <strong><em><u>Scope</u></em></strong></h2>
<p>Như chúng ta vừa nói ở trên, scope là khái niệm qui định “visibility” và “lifetime” của variable. Thông thường, ví dụ như C thì scope sẽ là <strong>block scope</strong>, tức là những biến <strong>tạo ra</strong> trong block sẽ chỉ được nhìn thấy trong block đấy thôi, và khi ra ngoài block đấy thì những variable nằm trong block sẽ được giải phóng ( như trong C là các biến tạo ra trong stack sẽ được free khi ra khỏi block), và không nhìn thấy được nữa.</p>
<p>Tuy nhiên rất buồn là javascript của chúng ta lại không có cái scope dễ hiểu đến thế, mà nó lại là <strong>function block</strong>.Function block ở đây là gì: tức là những gì bạn tạo ra trong một function sẽ available ở trong function đó. Vì javascript cũng là block syntax, nên sẽ hơi dễ confusing, chúng ta sẽ dùng ví dụ dễ hiểu này: {% codeblock function.js %} function scope() { if (true) { var test = 1; } alert(test); #=&gt; 1 } scope(); {% endcodeblock %}</p>
<p>Nói đến đây chắc chắn có bạn sẽ nghĩ đến điều gì xảy ra khi chúng ta có <strong>nested function</strong>. Let’s try {% codeblock function.js %} function outer() { var outer_var = 2; function inner() { alert(outer_var); } inner(); } outer(); #=&gt; 2 {% endcodeblock %} Từ ví dụ trên ta có thể dễ dàng thấy là inner function có thể access được outer function variable. Từ ví dụ này chúng ta có thể thấy là <strong>inner function có thể inherit biến của outer function</strong>, hay nói cách khác, inner function <strong>chứa(contain)</strong> scope của outer function. Chính nhờ điều đặc biệt này mà chúng ta có cái gọi là <strong>Closure</strong> mà mình sắp sửa nói đến ngay dưới đây. Một điều chú ý là đối với nhiều ngôn ngữ thì các bạn hay được khuyên là declare biến muộn nhất có thể để tránh overhead, tuy nhiên với javascript là ngôn ngữ với <strong>function scope</strong> thì best practice lại là <strong>declare biến sớm nhất có thể </strong> để tránh nguy cơ xảy ra một số lỗi không mong muốn.</p>
<h2 id="closure">2. <strong><em><u>Closure</u></em></strong></h2>
<p>Quote lại cái định nghĩa cho đỡ quên:</p>
<blockquote>
<p>A closure is an expression (typically a function) that can have free variables <strong>together with an environment that binds those variables (that “closes” the expression).</strong></p>
</blockquote>
<p>Chắc có bạn sẽ thắc mắc, <strong>environment</strong> ở đây là gì. Để hình dung một cách dễ hiểu, thì environment ở đây trong phần lớn các trường hợp chính là cái outer function mà chung ta vừa thử ở ví dụ về scope ở trên. Một đặc điểm rất hay của closure là <strong>closure sẽ giữ tham chiếu đến các biến nằm bên trong nó, hoặc được gọi đến bên trong nó</strong>. Điều này dẫn đến việc gì? Chắc sẽ có bạn nghĩ đến một trường hợp rất đặc biệt là khi bạn muốn context của một function được giữ lại sau khi hàm đó đã được execute xong :D. Hãy bắt đầu bằng một ví dụ:</p>
<p>{% codeblock closure.js %} function outside(x) { function inside(y) { return x + y; } return inside; } fn_inside = outside(3); result = fn_inside(5); // #=&gt; 8</p>
<p>result1 = outside(3)(5); // #=&gt; 8 {% endcodeblock %}</p>
<p>Bạn có nhận thấy điều gì đặc biệt ở trên? Điều đặc biệt nằm ở hàm <strong>fn_inside</strong> : hàm fn_inside được tạo ra bởi kết quả trả về của hàm outside() với parameter là 3, và bạn có thể nhận thấy hàm fn_inside vẫn giữ tham chiếu đến cái parameter 3 đó <strong>ngay cả khi hàm outside() đã được execute xong</strong>. Chắc các bạn sẽ thấy mâu thuẫn với cái lý thuyết về function scope chúng ta đã nói đến ở trên, khi mà <em>mọi thứ được tạo ra trong function của js chỉ nhìn thấy và sử dụng được ở trong đó, và sẽ được giải phóng hoặc không nhìn thấy khi ra ngoài function đó</em>. Thực tế là không hề mâu thuẫn chút nào cả, chính vì cái gọi là closure của js :D. Nói một cách cụ thể hơn: <strong>fn_inside khi được tạo ra đã đồng thời cũng tạo ra một cái closure (bao đóng), trong cái bao đó, giá trị 3 được truyền vào, và cái bao của fn_inside sẽ vẫn giữ cái giá trị 3 đó cho dù outside() function có execute xong</strong>. Các bạn cứ hình dung trực quan closure như một cái bao chứa rất nhiều thứ trong nó là sẽ thấy dễ hiểu hơn:</p>
<p>{% img /images/closurejs/closure.png %}</p>
<p>Như vậy chúng ta có thể tóm gọn lại đoạn code ở trên như sau:</p>
<ol type="1">
<li>Khi outside() được gọi, outside trả về một function</li>
<li>function được outside trả lại (fn_inside) đó đóng lại cái context hiện tại và cái context đó <strong>chứa biến x tại thời điểm outside() được gọi</strong></li>
<li>Khi fn_inside được gọi, nó vẫn nhớ x có giá trị là 3</li>
<li>Khi invoke fn_inside(5) thì nó sẽ lấy giá trị biến y=5 + giá trị biến x=3 và kết quả sẽ là 8</li>
</ol>
<p>Như vậy chúng ta có thể rút ra một đặc điểm của closure là: &gt; <strong><em>A closure must preserve the arguments and variables in all scopes it references</em></strong></p>
<ul>
<li><p>Một câu hỏi được đặt ra là: Khi nào cái biến x được giải phóng?? Câu trả lời là khi mà cái context mà biến x được reference đến ( ở đây là fn_inside ) không còn accessible được nữa ( refer đến scope của js, chúng ta có thể hiểu là khi mà function chứa fn_inside được execute xong và không còn bất kì tham chiếu nào đến fn_inside nữa ).</p></li>
<li><p>Một câu hỏi khác được đặt ra là với multi-nested function thì điều gì sẽ xảy ra?? Let’s give a try: {% codeblock multinested.js %} function A(x) { function B(y) { function C(z) { alert(x + y + z); } C(3); } B(2); } A(1); #=&gt; 6 {% endcodeblock %}</p></li>
</ul>
<p>Ở đoạn code trên thì điều gì đã xảy ra?</p>
<ol type="1">
<li>B tạo ra một cái closure chữa context của A, do đó B có thể access vào A’s variable, ở đây là x</li>
<li>C tạo ra một cái closure chứa context của B</li>
<li>Vì B chứa context của A nên C cũng sẽ chứa context của A, tức là C cũng access được vào biến x của A, và cả biến y của B.</li>
</ol>
<p>Do đó kết quả sẽ là 1+2+3=6, khá là obvious nhỉ. Đoạn code ở trên giúp chúng ta có thêm một khái niệm mới gọi là <strong><em>scope chaining</em></strong>. Tại sao gọi là chaining, vì khi context được include từ outer function vào inner function, thì chúng ta sẽ hiểu một cách đơn giản là context của inner function và context của outer function được nối với nhau, một cách có chiều (<strong>directed</strong>). Và độ ưu tiên khi access biến là từ trong ra ngoài.</p>
<p>{% img /images/closurejs/closure2.png %}</p>
<p>Do cái scope chaining là directed nên ở phía ngược lại, A lại không thể access được C, vì C nằm trong context của B, và chỉ visible <strong>inside B</strong>, hay nói cách khác là C sẽ là private của B, và không nhìn được từ A.</p>
<ul>
<li>Lại có một bạn nghĩ là khi outer function có biến tên là x, mà ta cũng truyền 1 biến tên là x vào inner function, tức là khi có name-conflict thì chuyện gì sẽ xảy ra. Let’s take an example {% codeblock nameconflict.js %} function outside() { var x = 10; function inside(x) { return x; } return inside; } result = outside()(20); #=&gt; 20 {% endcodeblock %}</li>
</ul>
<p>Bạn có thể thấy kết quả trả về biến x được trực tiếp truyền vào inner function thay vì biến x của outer function. Sử dụng khái niệm scope chaining ở trên thì chúng ta có thể thấy độ ưu tiên của context inside là cao hon context outside khi intepreter tìm giá trị của x, nên giá trị của x ở inside (ở đây là 20) sẽ được sử dụng.</p>
<p>Hy vọng là với 3 ví dụ trên các bạn đã có cái nhìn rõ ràng hơn về closure.</p>
<h2 id="closure-pitfalls">3. <strong><em><u>Closure pitfalls</u></em></strong></h2>
<p>Closure là một khái niệm khá dễ nhầm lẫn và khó nắm rõ với những người người ít quan tâm đến javascript. Một trong những ví dụ hay được dùng để minh họa cái sự dễ nhầm này được gọi là <strong>The Infamous Loop Problem</strong>. Ví dụ này được minh họa bằng đoạn code dưới đây:</p>
<p>{% codeblock closurepitfall.js %} var add_the_handlers = function (nodes) { var i; for (i = 0; i &lt; nodes.length; i += 1) { nodes[i].onclick = function (e) { alert(i); }; } }; nodes = document.getElementById(“click”); add_the_handlers(nodes); {% endcodeblock %}</p>
<p>Đoan code ở trên làm một việc là tìm tất cả các node có id là “click”, add vào node đó một cái sự kiện là khi click vào node đó sẽ alert lên thứ tự của node đó. Giả sử bạn có một file html như sau:</p>
{% codeblock closurepitfall.html %}
<li id="click">
link 1
</li>
<li id="click">
link 2
</li>
<li id="click">
link 3
</li>
<li id="click">
link 4
</li>
<li id="click">
link 5
</li>
<p>{% endcodeblock %}</p>
<p>Bạn hy vọng là khi click vào link 1 sẽ alert 1, click vào link 2 sẽ alert ra 2…. đúng không. Tuy nhiên thực tế là <strong>bạn click vào link nào nó cũng alert ra 5 cả</strong>. Kì lạ nhỉ? Để giải thích cho hiện tượng này thì chúng ta hãy xem lại khái niệm về closure nào. Biến i được sử dụng trong anonymous function được gán cho onclick, được <strong>kế thừa từ context của add_the_handlers function</strong>. Tại thời điểm mà bạn gọi onclick, for loop đã được execute xong, và biến i <strong>của context của add_the_handlers</strong> lúc này có giá trị là 5. Do đó bạn có click vào link nào thì giá trị được alert ra cũng là 5 cả. Điểm chú ý của việc này chính là do bạn đang nhầm lẫn, hay chính xác là có sự khác biệt giữa <strong>scope/context của for-loop</strong> với <strong>scope/context của outer function là add_the_handlers </strong>.</p>
<p>Để giải quyết vấn đề này thì bạn có thể làm như dưới đây:</p>
<p>{% codeblock pitfall.js %} var add_the_handlers = function (nodes) { var helper = function (i) { return function (e) { alert(i); }; }; var i; for (i = 0; i &lt; nodes.length; i += 1) { modes[i].onclick = helper(i); } }; {% endcodeblock %}</p>
<p>Point của cách làm này chính là việc truyền được giá trị của (i) tại thời điểm hiện tại vào closure của function được bind (gán) vào onclick. Giúp cho hàm helper() luôn tham chiếu đến giá trị i đúng. Một best practice để tránh những sai lầm như thế này là &gt; Avoid creating functions within a loop. It can be wasteful computationally,and it can cause confusion (tránh tạo mới function trong vòng loop, vì nó vừa làm tốn tài nguyên cpu, vừa dễ gây nhầm lẫn)</p>
<h1 id="kết-luận">Kết luận</h1>
<p>Như vậy qua bài viết này chúng ta đã nắm được khái niệm về function scope và closure trong javascript, và một số best practices trong việc sử dụng closure và scope. Closure trong javascript hay sử dụng để tạo ra một cái bao mà các thứ trong đấy không được nhìn thấy bởi bên ngoài nhưng vẫn truy cập được từ bên trong, và thường được áp dụng cho một số design pattern trong js (tiêu biểu nhất là module pattern).Chi tiết hơn các bạn có thể tham khảo ở các tài liệu sau:</p>
<ul>
<li><a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/ref=sr_1_1?ie=UTF8&amp;qid=1368334060&amp;sr=8-1&amp;keywords=javascript+the+good+part">Javascript the good part (by Douglas Crockford)</a></li>
<li><a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">Ecma-262 standard</a></li>
<li><a href="http://robertnyman.com/2008/10/09/explaining-javascript-scope-and-closures/" class="uri">http://robertnyman.com/2008/10/09/explaining-javascript-scope-and-closures/</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope" class="uri">https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope</a></li>
</ul>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[giới thiệu về script loader trong js]]></title>
    <link href="http://git@github.com.github.com/blog/2013/04/14/gioi-thieu-ve-script-loader-trong-js/"/>
    <updated>2013-04-14T00:23:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/04/14/gioi-thieu-ve-script-loader-trong-js</id>
    <content type="html"><![CDATA[<h2 id="i.script-loader-là-gì-và-tại-sao-lại-cần-nó">I.Script loader là gì và tại sao lại cần nó</h2>
Trong javascript, khi cần include một thư viện, hay một module từ ngoài vào, chắc hản mọi web developer đều nghĩ ngay đến việc include vào html: {% codeblock include direct - include.html %}
<script src="http://yourhost/script.js" ></script>
<p>{% endcodeblock %}</p>
<p>Vậy include trực tiếp script tag vào html có gì không tốt?</p>
<ul>
<li><p>Block việc render GUI của web browser: Cơ chế render của web browser là render tuần tự, đi từ trên xuống dưới.Chính vì thế mà khi gặp script tag thì đầu tiên là web browser phải download về, sau đó parse và execute script đó , sau đó mới render những thứ tiếp theo. Việc này làm cho việc render nội dung web sẽ bị block lại . Thử hình dung bạn sử dụng thư viện ember.js, thư viện này sau khi minified lại có dung lượng khoảng 200kb, bạn download từ cdn về mất 1.5s, bạn render mất 0.5s nữa, tổng cộng đã mất 2s, là một con số không nhỏ.</p></li>
<li><p>Khi qui mô của web lớn lên, đặc biệt tại thời điểm mà các framework mvc cho js nở rộ như hiện nay với ember, backbone hay angular và việc phát triển bùng phát của single-page web app(những application viết chủ yếu bằng javascript) thì việc quản lý chặt chẽ thư viện, module nào có dependency ra sao, nên được load vào thời điểm nào là hết sức quan trọng</p></li>
</ul>
<p>Để giải quyết vấn đề đó, thì chúng ta sẽ sử dụng một khái niệm gọi là script loader. Script loader chỉ đơn giản là chuyển việc load script từ html vào một cái script js chỉ chuyên làm nhiệm vụ “load” các dependent scripts. “load” bằng cách nào thì rất đơn giản, chỉ là tạo ra một script tag, gán source và insert vào dom. Việc này khác việc include script bằng html là nó không block UI, nó chỉ đơn thuần là request đến server chứa script cần load thông qua XHR, lấy kết quả về, và eval đoạn script đó.</p>
<p>Ví dụ về script loader: {% codeblock script loader demo - loader.js %} (function(){ var scList = new Array(); scList[0] = ‘http://cdnjs.cloudflare.com/ajax/libs/ace/0.2.0/ace.js’; scList[1] = ‘http://cdnjs.cloudflare.com/ajax/libs/alloy-ui/1.0.1/aui-min.js’; scList[2] = ‘http://cdnjs.cloudflare.com/ajax/libs/barman/0.2.2/barman.min.js’; var len = scList.length; for (var i=0; i&lt;len; i++) { var script = document.createElement(‘script’); var firstScript = document.getElementsByTagName(‘script’)[0]; script.src = scList[i]; firstScript.parentNode.insertBefore(script, firstScript); } })() {% endcodeblock %} Và kết quả đạt được là:</p>
<ol type="1">
<li><p>Load script trực tiếp vào html tag {% img /images/script-loader-images/withoutloader.png ‘image’ ‘images’ %}</p></li>
<li><p>Load script thông qua loader {% img /images/script-loader-images/withloader.png ‘image’ ‘images’ %}</p></li>
</ol>
<p>Có được kết quả trên là vì đưa việc loading js vào trong script giúp cho ta có thể load các module đó asynchronousi thông qua XHR(ajax), và nhờ đó rút ngắn được thời gian load + render Như vậy là ta đã giải quyết được bài toán thứ nhất, tuy nhiên có một vấn đề là để load được một module thông qua script loader thì module đó bắt buộc phải tuân theo một qui chuẩn nào đó để giúp qui định về thứ tự load, và dependency. Để giải quyết vấn đề đó, đồng thời cũng để giải quyết vấn đề thứ hai đã nêu ở trên chúng ta sẽ đưa ra khái niệm AMD</p>
<h2 id="ii-amd">II AMD</h2>
<p>AMD là viết tắt của Asynchronous Module Definition, là một qui chuẩn của javascript dành cho việc load các script/module và các dependency của chúng từ ngoài vào một cách không đồng bộ (asynchronously).</p>
<p>Thực tế gọi là một qui chuẩn, nhưng AMD chỉ đơn thuần qui định 2 rule cơ bản:</p>
<ul>
<li>Interface cho hàm define() {% codeblock define define.js %} define(id?, dependencies?, factory); {% endcodeblock %}</li>
<li>param id: qui định id của module được load vào, [?] là do param này là optional, có thể bỏ qua</li>
<li>param dependencies: là 1 <strong>array</strong> các module dependency của module được load vào, param này cũng là optional</li>
<li>param factory: là đoạn script dùng để initialze cho module sẽ được load vào. factory() sẽ chỉ được execute một lần , và nếu factory() có return value thì return value này nên được export ra ngoài để có thể sử dụng lại ở trong các script khác</li>
</ul>
<p>Một ví dụ đơn giản cho AMD interface: {% codeblock amd if - amd.js %} define([“alpha”], function (alpha) { return { verb: function(){ return alpha.verb() + 2; } }; }); {% endcodeblock %}</p>
<ul>
<li>Property amd cho hàm define: Function define <strong>nên</strong> có property tên là amd. Việc này giúp tránh conflict khi module của bạn đã có một function tên là define, và trong property này sẽ định nghĩa là module của bạn có cho phép nhiều version trên cùng một document không ( khi module của bạn đã conform theo AMD, thì chắc chắn trong hàm require phải có đoạn check là đã có property này hay chưa và check giá trị của nó). {% codeblock amd - amd.js %} define.amd = { multiversion: true }; {% endcodeblock %} Nói đến đây thì chấc sẽ có bạn thắc mắc, hoặc chưa hiểu rõ use case của cái AMD này như thế nào, nó được dùng ở đâu, ở script loader, ở module, hay ở dom. Câu trả lời là AMD sẽ được dùng ở script loader và ở module. Cụ thể hơn là trong module của bạn, nếu bạn muốn module đó được load async thông qua script loader, mà script loader đó lại load theo chuẩn AMD, thì đương nhiên module của bạn cũng sẽ phải conform theo AMD, bằng cách là có hàm define() trong module, và có property amd của hàm define. Còn script loader bản thân cũng là một module, thì tất nhiên cũng phải tuân theo AMD.</li>
</ul>
<p>Một cách ngắn gọn, giả sử bạn có một module X {% codeblock module - module.js %} X = (function() { var prop = {}; return prop;<br />})() {% endcodeblock %} Bạn muốn module đó nói với bên ngoài là: tao lã X, tao có các dependency là Y, Z, khi init tao thì mày làm thế này, thế này nhé thì bạn sẽ làm theo AMD api theo cách như sau: {% codeblock module with amd module.js %} X = (function() { var prop = {}; prop.define = function(name, deps, callback) {<br /> }</p>
<p>callback = function() {//do something to init here} prop.define.amd = {multiversion: true}</p>
<p>return prop;<br />})() {% endcodeblock %}</p>
<p>Và khi script loader nhìn vào cái define của bạn, nó sẽ biêt nên làm thê nào. Rất đơn giản phải không.</p>
<h2 id="iii-các-scriptloader-nổi-tiếng-và-việc-áp-dụng-amd-đang-ở-đâu">III Các scriptloader nổi tiếng và việc áp dụng AMD đang ở đâu</h2>
<p>Hiện nay, có một số script loader nổi tiếng như:</p>
<ul>
<li>YepNope: http://yepnopejs.com/</li>
<li>RequireJs: http://requirejs.org/docs/</li>
<li>Headjs: https://github.com/headjs/headjs</li>
<li>CurlJs: https://github.com/cujojs/curl Ngoài ra trong bộ toolkit nổi tiếng Dojo cũng có sử dụng script loader</li>
</ul>
<p>Trong những script ở trên thì có requirejs và curljs là sử dụng AMD, còn lại 2 script còn lại là yepnope và headjs thì không. Về số lượng được sử dụng nhiều nhất thì có lẽ là requirejs.</p>
<p>Hiện tại các module nổi tiếng thì không phải module nào cũng conform theo AMD. Theo mình biết thì hiện tại có jQuery là support AMD internally, còn lại thì phần nhiều các module nổi tiếng khác như backbone, ember, angular đểu không support AMD internally. Để sử dụng các module này với một script loader theo chuẩn AMD như require.js thì bạn đơn giản chỉ cần viết lại hàm define tại app của bạn, ví dụ như trong trường hợp của backbone: {% codeblock backbone with amd - bbamd.js %} require.config({ paths: { jquery: ‘libs/jquery/jquery’, underscore: ‘libs/underscore/underscore’, backbone: ‘libs/backbone/backbone’ });</p>
<p>require([ // Load our app module and pass it to our definition function ‘app’, ], function(App){ // The “app” dependency is passed in as “App” App.initialize(); } ); {% endcodeblock %}</p>
<p>Vậy tại sao AMD có rất nhiều merit như thê mà một số module nổi tiêng lại bỏ qua việc conform theo AMD, ví dụ tiêu biểu nhất là emberjs. Theo như Tom Dale, một trong những creator của emberjs thì AMD yêu cầu quá nhiều HTTP request, bởi vì để conform theo AMD thì script phải chia ra thành nhiều module, nhiều file. Ngoài ra thì AMD cũng yêu cầu toàn bộ module phải wrap trong một function (factory()), việc này có thể ok với một số người nhưng cũng sẽ gây khó chịu với một số người khác. Và cuối cùng là một số build tool hiện tại (ví dụ như Grunt https://github.com/cowboy/grunt) hỗ trợ rất tốt cho việc quản lý dependency và version rồi, thế nên việc conform cấu trúc code của mình theo một cái có sẵn như AMD là không cần thiết.</p>
<h2 id="iv-kết-luận">IV Kết luận</h2>
<p>Script loader đã và đang trở thành một kĩ thuật không thể thiếu trong việc tạo ra một responsive web app, giúp rút ngắn thời gian load và render js. Cộng với việc AMD ra đời chúng ta đang thấy ecmascript, cụ thể hơn là javascript đang có những nỗ lực trở nên mature hơn, để có thể trở thành ngôn ngữ mà developer có thể cảm thấy thoải mái khi phát triển và khi scope của application bị phình to ra. Tại version ecma hiện tại (ECMA-262) thì vẫn chưa có một qui chuẩn nào cho việc load script theo module và dependency, tuy nhiên chúng ta có thể hy vọng về điều này trong một thời gian gần.</p>]]></content>
  </entry>
  
</feed>
