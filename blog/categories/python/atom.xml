<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python, | Blog kỹ thuật máy tính]]></title>
  <link href="http://git@github.com.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://git@github.com.github.com/"/>
  <updated>2015-05-07T01:18:39+09:00</updated>
  <id>http://git@github.com.github.com/</id>
  <author>
    <name><![CDATA[kỹ thuật máy tính]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xử lý ảnh bằng Python và OpenCV: Mở đầu]]></title>
    <link href="http://git@github.com.github.com/blog/2014/09/23/xu-ly-anh-bang-python-va-opencv-mo-dau/"/>
    <updated>2014-09-23T19:04:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2014/09/23/xu-ly-anh-bang-python-va-opencv-mo-dau</id>
    <content type="html"><![CDATA[<p>Do công việc, tôi đã có một thời gian tìm hiểu về OpenCV để xử lý ảnh và video. Phần lớn các tác vụ tôi thực hiện là code OpenCV trên C++ và giao tiếp với Android qua JNI. Và rồi tôi nhận ra mình chỉ làm theo những tutorial có sẵn trên mạng và mất nhiều thời gian hơn mức cần thiết để fix bug của compiler hoặc IDE. Bản thân tôi rất có hứng thú với Computer Vision và Image Processing nói chung, nhưng cách tiếp cận như trên có vẻ như quá chậm. Sẽ tốt hơn nếu có thể tập trung nắm được những khái niệm cơ bản cùa Computer Vision trước, không bị sa đà vào việc fix bug. Bản thân việc nhanh chóng tạo ra những ứng dụng hữu ích là một động lực không nhỏ đối với việc tiếp tục học Computer Vision and Image Processing.</p>
<p>Đó là lý do tôi chuyển sang lập trình OpenCV với Python. Việc cài đặt, viết code, thử nghiệm đều trở nên đơn giản hơn rất nhiều.</p>
<p>Thêm một lý do nữa, phải nói là Computer Vision và Image Processing là những lĩnh vực khó nếu xét về khía cạnh nghiên cứu, với rất nhiều công thức toán. Tôi không nói những công thức toán đó là không cần thiết, mà là đối với người bắt đầu học, sẽ tốt hơn nếu nhanh chóng nắm được tất cả những kĩ thuật cơ bản và bắt đầu áp dụng xây dựng ứng dụng hữu ích cho mình. Sau đó, tuỳ theo nhu cầu và sở thích, có thể tiếp tục đào sâu nghiên cứu, tối ưu, chạy thời gian thực… Kể cả lúc đó, khi đã có kiến thức cơ bản rồi, việc tiếp cận sẽ càng nhanh hơn.</p>
<p>Xin lỗi vì phần giới thiệu hơi dài dòng :P Tôi xin bắt đầu luôn. Trong bài đầu tiên này, tôi sẽ trình bày cách cài đặt môi trường và một số tác vụ cơ bản khi làm việc với OpenCV trên Python. Bài viết này có thể sẽ khá cơ bản với một số độc giả, nhưng vì là bài đầu tiên trong loạt bài này, tôi vấn muốn trình bày để đảm bảo sự đầy đủ. Trong các bài sau, chúng ta sẽ cùng xây dựng những ứng dụng thú vị hơn.</p>
<h1 id="cài-đặt-môi-trường">Cài đặt môi trường</h1>
<p>Có những thành phần sau cần phải cài đặt để làm việc với OpenCV trên : * Python 2.7 * NumPy và SciPy: Bằng cách sử dụng NumPy, chúng ta có thể biểu thị hình ảnh bằng mảng đa chiều. Ngoài ra, có rất nhiều thư viện xử lý ảnh và cả machine learning sử dụng cách biểu thị mảng của NumPy. NumPy cũng hỗ trợ rất nhiều hàm toán học chúng ta có thể thực hiện nhiều phân tích có ý nghĩa hơn trên ảnh. Bên cạnh NumPy còn có SciPy đi kèm, hỗ trợ thêm về các tính toán khoa học.</p>
<p>Trên Windows, cách dễ nhất để có cả Python, NumPy và SciPy là cài đặt Enthought Canopy tại <a href="https://www.enthought.com/products/canopy/" class="uri">https://www.enthought.com/products/canopy/</a></p>
<p>Trên Mac từ 10.7 trở lên, NumPy và SciPy đã được cài đặt sẵn. * Matplotlib: là thư viện để plot. Khi xử lý ảnh, chúng ta sẽ sử dụng thư viện này để xem histogram của ảnh hoặc xem chính ảnh đó. * OpenCV: Về hướng dẫn cài đặt chi tiết, bạn có thể xem tại <a href="http://docs.opencv.org/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html">đây</a></p>
<h1 id="mở-và-lưu-file-ảnh">Mở và lưu file ảnh</h1>
<p>Hãy bắt đầu bằng tác vụ đơn giản nhất: mở một file ảnh thành một mảng NumPy, đọc các thông tin về kích cỡ, sau đó lưu mảng NumPy thành một file ảnh mới.</p>
<p>{% codeblock getinfo.py %} import argparse import cv2</p>
<p>ap = argparse.ArgumentParser() ap.add_argument(“-i”, “–image”, required = True, help = “Path to the image”) args = vars(ap.parse_args())</p>
<p>image = cv2.imread(args[“image”]) print “width: %d pixels” % (image.shape[1]) print “height: %d pixels” % (image.shape[0]) print “channels: %d channels” % (image.shape[2])</p>
<p>cv2.imshow(“Image”, image) cv2.imwrite(“new.jpg”, image) cv2.waitKey(0) {% endcodeblock %}</p>
<p>Đầu tiên, chúng ta import hai package cần thiết là <code>argparse</code> và <code>cv2</code>. <code>argparse</code> dùng để khai báo những parameter cần thiết cho chương trình của chúng ta, ở đây, chúng ta khai báo parameter là đường dẫn đến file ảnh ban đầu. Để đọc file ảnh thành một mảng NumPy, chúng ta sử dụng hàm <code>cv2.imread()</code> với parameter là tên file ảnh (đã được nhập vào từ command line). Sau bước này, ta nhận được một mảng NumPy là <code>image</code>. Tiếp theo ta in ra các thông số về file ảnh, gồm có chiều dài, chiều rộng và số channel. Ở đây, chúng ta có những điểm lưu ý về cách NumPy lưu các thông số về bức ảnh: * Một bưc ảnh có 2 chiều X và Y, gốc toạ độ tại pixel trên cùng bên trái của bức ảnh. Chiều X từ trái sang phải và chiều Y từ trên xuống dưới. NumPy lưu số pixel hơi ngược: <code>image.shape[0]</code> là số pixel theo chiều Y và <code>image.shape[1]</code> là số pixel theo chiều X. * Mỗi pixel trên bức ảnh được biểu thị dưới một trong 2 dạng: grayscale hoặc color. <code>image.shape[2]</code> lưu số channel biểu thị mỗi pixel. Với ảnh màu hiển thị trên RGB, số channel là 3, còn với ảnh đen trắng (grayscale), chúng ta chỉ có 1 channel duy nhất</p>
<p>Để hiển thị bức ảnh trên một window mới, ta sử dụng hàm <code>cv2.imshow()</code>, với 2 đối số là tên của window và tên của mảng NumPy muốn hiển thị.</p>
<p>Để lưu mảng NumPy thành một file ảnh mới, ta sử dụng hàm <code>cv2.imwrite()</code>, với 2 đối số là tên của file muốn lưu và tên của mảng NumPy. Trong ví dụ này, chúng ta lưu file mới giống hệt file cũ mà không có chỉnh sửa gì.</p>
<p>Chạy đoạn code trên như sau:</p>
<pre><code>% python getinfo.py -i obama_fun.jpg</code></pre>
<p>Ảnh gốc:</p>
<p>{% img /images/pythonopencv/original.gif %} Kết quả trả về</p>
<pre><code>width: 475 pixels
height: 356 pixels
channels: 3 channels</code></pre>
<h2 id="tạo-ảnh-avatar-bằng-kĩ-thuật-mask">Tạo ảnh avatar bằng kĩ thuật mask</h2>
<p>Trong phần này, chúng ta sẽ tạo ra ảnh avatar từ một bức hình chân dung ban đầu, theo dạng như avatar picture của Google+: hình tròn bao quanh khuôn mặt. Đoạn code như sau:</p>
<p>{% codeblock create_avatar_circle.py %} import numpy as np import argparse import cv2</p>
<p>ap = argparse.ArgumentParser() ap.add_argument(“-i”, “–image”, required = True, help = “Path to the image”) args = vars(ap.parse_args())</p>
<p>image = cv2.imread(args[“image”]) cv2.imshow(“Original”, image)</p>
<p>(cX, cY) = (image.shape[1] / 2 , image.shape[0]/2) radius = 120 mask = np.zeros(image.shape[:2], dtype = “uint8”) cv2.circle(mask, (cX, cY), radius, 255, -1) masked = cv2.bitwise_and(image, image, mask = mask) avatar = masked[ cY - radius : cY + radius, cX - radius : cX + radius] cv2.imshow(“Mask”, mask) cv2.imshow(“Avatar”, avatar) cv2.imwrite(“avatar.jpg”, avatar) cv2.waitKey(0)</p>
<p>{% endcodeblock %} Đoạn code bắt đầu với các thủ tục như import packages cần thiết, khai báo các parameters đầu vào cho script, đọc file ảnh vào mảng NumPy như phần trên.</p>
<p>Để crop một phần bức ảnh, chúng ta cần tạo ra một mặt nạ <code>mask</code>, là một mảng có kích thước như bức ảnh với tất cả giá trị pixel được khởi tạo bằng 0. Tiếp đó, ta vẽ một hình tròn trắng trên mảng ‘mask’ . Sau đó, sử dụng <code>bitwise_and()</code> hai mảng <code>image</code> với nhau, có thêm tham số mặt nạ <code>mask</code>, ta được một bức ảnh <code>masked</code> chỉ có phần khuôn mặt. Tiếp tục crop bằng cách slice mảng NumPy, chúng ta được kết quả cuối cùng là bức ảnh <code>avatar</code>.</p>
<p>Chạy đoạn code trên như sau:</p>
<pre><code>% python create_avatar_circle.py -i obama_fun.jpg</code></pre>
<p>Kết quả:</p>
<ul>
<li>Bức ảnh ban đầu</li>
</ul>
<p>{% img /images/pythonopencv/original.gif %}</p>
<ul>
<li><code>mask</code></li>
</ul>
<p>{% img /images/pythonopencv/mask.gif %}</p>
<ul>
<li><code>avatar</code></li>
</ul>
<p>{% img /images/pythonopencv/avatar.gif %}</p>
<p>Tất nhiên, tôi đã sử dụng file ảnh có mặt tổng thống Obama ở ngay giữa tấm ảnh và mask được đặt ở chính giữa tâm bức ảnh. Không phải mọi tấm ảnh đều như vậy; trong trường hợp đó chúng ta sẽ sử dụng kĩ thuật face detection. Nhưng đó là chủ đề của một bài viết sau.</p>
<h2 id="kết-luận">Kết luận</h2>
<p>Qua bài viết này, tôi đã giới thiệu những bước bắt đầu để làm việc với OpenCV qua Python. Bài viết khá cơ bản, nhưng đã trình bày một số khái niệm cơ bản để chuẩn bị cho những ứng dụng lần sau. Hẹn gặp lại các bạn trong các phần tiếp theo.</p>
<h1 id="tài-liệu-tham-khảo">Tài liệu tham khảo</h1>
<ol type="1">
<li><a href="http://opencv-python-tutroals.readthedocs.org/en/latest/index.html">OpenCV-Python Tutorials</a></li>
</ol>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Giới thiệu một số phương pháp sinh 64 bit unique ID]]></title>
    <link href="http://git@github.com.github.com/blog/2013/06/09/xay-dung-he-thong-sinh-64bit-unique-id/"/>
    <updated>2013-06-09T21:15:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/06/09/xay-dung-he-thong-sinh-64bit-unique-id</id>
    <content type="html"><![CDATA[<h1 id="bài-toán-sinh-unique-id">Bài toán sinh unique ID</h1>
<p>Unique ID được sử dụng để phân biệt các đối tượng khác nhau. Ví dụ primary key là một unique key đặc biệt dùng để phân biệt các row trong table.</p>
<p>Bài viết giới thiệu một số phương pháp sinh 64 bit unique ID.</p>
<h1 id="một-số-giải-pháp-sinh-unique-id">Một số giải pháp sinh unique ID</h1>
<ul>
<li>Nếu số lượng dữ liệu nhỏ, ta có thể sử dụng ID kiểu Integer và set cho nó thuộc tính auto increment.</li>
</ul>
<p>Ưu điểm: đơn giản, dễ làm.</p>
<p>Nhược điểm: số lượng ID bị giới hạn (2 ^ 32 = 4294967296) và đặc biệt cách làm này không scale. Để đảm bảo tính duy nhất, tại một thời điểm, chỉ có thể sinh ra đúng một ID mà thôi.</p>
<ul>
<li>Sử dụng <a href="http://en.wikipedia.org/wiki/Uuid">UUID</a> - UUID là một giá trị 128bit, tuỳ vào thuật toán xây dựng UUID, có thể dựa trên Mac Address của máy.</li>
</ul>
<p>Ưu điểm: scalable, distributed. Tại một thời điểm có thể sinh ra nhiều ID khác nhau, thậm chí client cũng có thể sinh ID mà vẫn đảm bảo không bị trùng lặp với server</p>
<p>Nhược điểm: sử dụng 128 bit, một số hệ thống phải lưu trữ dưới dạng char, tốn tài nguyên và index</p>
<p>64 bit unique ID trùng hoà giữa 2 cách trên, đảm bảo số lượng ID sinh ra là đủ lớn, đồng thời có thể lưu trữ dưới dạng dạng Big Int</p>
<h1 id="một-số-phương-pháp-sinh-64-bit-unique-id">Một số phương pháp sinh 64 bit unique ID</h1>
<ol type="1">
<li>Twitter <a href="https://github.com/twitter/snowflake/">snowflake</a> Snowflake là thrift service sử dụng Apache ZooKeeper để liên kết các node và sinh ra 64bit unique ID. Mỗi node là một worker, các worker được đánh số khác nhau</li>
</ol>
<p>ID được sinh ra theo công thức</p>
<ul>
<li>time - 42bit (được tính bằng epoch)</li>
<li>worker id - 10 bit (số worker có thể lên đến 1024)</li>
<li>sequence number - 12 bit (number được tăng liên tiếp, đảm bảo tại một thời điểm, mỗi worker có thể sinh được 4096 ID)</li>
</ul>
<p>Ở phần tiếp theo, chúng ta sẽ implement thuật một service sử dụng thuật toán trên để sinh ID</p>
<ol start="2" type="1">
<li><a href="http://instagram-engineering.tumblr.com/post/10853187575/sharding-ids-at-instagram">Instagram 64bt ID</a></li>
</ol>
<p>Instagram sinh ID dựa vào posgresql schema. Thuật toán sinh ID tương tự như snowflake, mỗi ID 64 bit bao gồm</p>
<ul>
<li>time - 41 bit (time epoch)</li>
<li>shard_id - 13 bit (so shard id lên tới 8192)</li>
<li>sequence number - 10 bit</li>
</ul>
<h1 id="implement-thuật-toán-sinh-64-bit-uniqueid-của-snowflake-bằng-python">Implement thuật toán sinh 64 bit uniqueID của snowflake bằng python</h1>
<p>{% codeblock flake.py %}</p>
<p>import simplejson import sys import tornado.httpserver import tornado.ioloop import tornado.options import tornado.web</p>
<p>from time import time from tornado.options import define, options</p>
<p>define(“port”, default=8888, help=“run on the given port”, type=int) define(“worker_id”, help=“globally unique worker_id between 0 and 1023”, type=int)</p>
<p>class IDHandler(tornado.web.RequestHandler): max_time = int(time() * 1000) sequence = 0 worker_id = False epoch = 137079712900000 # 2013-06-09</p>
<pre><code>def get(self):
    curr_time = int(time() * 1000)

    if curr_time &lt; IDHandler.max_time:
        # stop handling requests til we&#39;ve caught back up
        raise tornado.web.HTTPError(500, &#39;Clock went backwards! %d &lt; %d&#39; % (curr_time, IDHandler.max_time))

    if curr_time &gt; IDHandler.max_time:
        IDHandler.sequence = 0
        IDHandler.max_time = curr_time

    IDHandler.sequence += 1
    if IDHandler.sequence &gt; 4095:
        # Sequence overflow, bail out
        raise tornado.web.HTTPError(500, &#39;Sequence Overflow: %d&#39; % IDHandler.sequence)

    generated_id = ((curr_time - IDHandler.epoch) &lt;&lt; 22) + (IDHandler.worker_id &lt;&lt; 12) + IDHandler.sequence

    self.set_header(&quot;Content-Type&quot;, &quot;text/plain&quot;)
    self.write(str(generated_id))
    self.flush() # avoid ETag, etc generation</code></pre>
<p>def main(): tornado.options.parse_command_line()</p>
<pre><code>if &#39;worker_id&#39; not in options:
    print &#39;missing --worker_id argument, see %s --help&#39; % sys.argv[0]
    sys.exit()

if not 0 &lt;= options.worker_id &lt; 1024:
    print &#39;invalid worker id, must be between 0 and 1023&#39;
    sys.exit()

IDHandler.worker_id = options.worker_id

application = tornado.web.Application([
    (r&quot;/&quot;, IDHandler),
], static_path=&quot;./static&quot;)
http_server = tornado.httpserver.HTTPServer(application)
http_server.listen(options.port)
tornado.ioloop.IOLoop.instance().start()</code></pre>
<p>if <strong>name</strong> == “<strong>main</strong>”: main()</p>
<p>{% endcodeblock %}</p>
<p>Đoạn code trên được trích từ repository <a href="https://github.com/formspring/flake/blob/master/flake.py">flake</a> Sử dụng <a href="http://www.tornadoweb.org/en/stable/">tornado</a> - Python web framework and asynchronous networking library, ở một thời điểm (độ chính xác tới millisecond), một node có thể handle được nhiều request, mỗi một request sẽ được trả về một số là ID được sinh ra. Số lượng ID được sinh ra bởi một node, tại một thời điểm bị giới hạn bởi 4096, nếu lớn hơn, request sẽ bị báo lỗi</p>
<h1 id="kết-luận">Kết luận</h1>
<p>Bài viết trình bày một số phương pháp sinh ID 64 bit, kèm code minh hoạ. Tuỳ vào hệ thống của bạn, bạn có thể sử dụng ID 64 bit cho những mục đích khác nhau. Ví dụ như đánh số tất cả các đối tượng trong database (giống như FB làm với graph API), hoặc sử dụng 64 bit ID như một bước đệm và áp dụng thêm một bước mã hoá để sinh ID cho một loại đối tượng (giống như youtube đánh số các video).</p>]]></content>
  </entry>
  
</feed>
