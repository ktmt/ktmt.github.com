<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | Blog kỹ thuật máy tính]]></title>
  <link href="http://git@github.com.github.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://git@github.com.github.com/"/>
  <updated>2015-05-07T01:18:39+09:00</updated>
  <id>http://git@github.com.github.com/</id>
  <author>
    <name><![CDATA[kỹ thuật máy tính]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reflection and reverse engineer in PHP]]></title>
    <link href="http://git@github.com.github.com/blog/2013/07/28/reflection-and-reverse-engineer-in-php/"/>
    <updated>2013-07-28T23:45:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/07/28/reflection-and-reverse-engineer-in-php</id>
    <content type="html"><![CDATA[<h2 id="giới-thiệu-reflection-class-trong-php">Giới thiệu Reflection class trong PHP</h2>
<p>Kể từ PHP 5 trở đi, Programmer PHP đã có bộ API Reflection rất hữu dụng để reverse-engineer các class, interfaces, function hay các extension. Bài viết này sẽ giới thiệu tính năng, ý nghĩa và ứng dụng của Reflection trong PHP.</p>
<h2 id="thế-nào-là-dynamically-typed-language">Thế nào là dynamically-typed language ?</h2>
<p>Cũng giống như Python hay Ruby, PHP là 1 dynamically-typed language.</p>
<p>Chúng ta hãy cùng xem xét 2 class sau:</p>
<p>{% codeblock Author.php %} <?php
class Author 
{
    private $name;
    private $birth;

    public function __construct($name, $birth)
    {
        $this->name = $name; $this-&gt;birth = $birth; }</p>
<pre><code>public function getName()
{
    return $this-&gt;name;
}

public function getBirth()
{
    return $this-&gt;birth;
}</code></pre>
<p>} ?&gt; {% endcodeblock %}</p>
<p>{% codeblock Book.php %} <?php
class Book 
{
    private $author;
    public function setAuthor($author)
    {
        $this->author = $author; } public function getAuthor() { return $this-&gt;author; } }</p>
<p>?&gt; {% endcodeblock %}</p>
<p>2 class rất đơn giản phải không :) Book hoàn toàn có thể được setAuthor() là 1 string hay là 1 instance của class Author.</p>
<p>Không khó để hình dung ra kết quả của đoạn code dưới đây.</p>
<p>{% codeblock sample.php %} <?php
$book1 = new Book;
$book1->setAuthor(“Nam Cao”); var_dump($book1-&gt;getAuthor());</p>
<p>$book2 = new Book; <span class="math">\(book2-&gt;setAuthor(new Author(&quot;Nam Cao&quot;,&quot;29-10-1915&quot;)); var_dump(\)</span>book1-&gt;getAuthor()); ?&gt; {% endcodeblock %}</p>
<p>Nếu chỉ dừng ở đây thì tôi với bạn chẳng có gì để nói với nhau :D Nhưng bạn hãy thử để ý, 1 instance của 1 class Book khi gọi đến hàm <code>setAuthor</code> hoàn toàn không có 1 khái niệm nào về <code>$author</code> cả. Nói cách khác, $author có thể là bất cứ 1 object nào. Điều gì sẽ xảy ra khi tôi modify class Book 1 chút như sau:</p>
<p>{% codeblock Book.php %} <?php
class Book 
{
    private $author;
    public function setAuthor($author)
    {
        $this->author = <span class="math">\(author;  var_dump(\)</span>author-&gt;getName()); // Attention here! Now we try to call getName() of variable $author } public function getAuthor() { return $this-&gt;author; } }</p>
<p>?&gt; {% endcodeblock %}</p>
<p>Bạn thử chạy lại đoạn code sample.php bên trên, bạn sẽ thấy $book1 trả về Fatal Error nhưng $book2 sẽ chạy qua bình thường!</p>
<p>Vào thời điểm runtime $book2, PHP sẽ “inspect” object $author truyền vào cho <code>setAuthor()</code> và tự hiểu $author là 1 instance của class Author và có 1 method là <code>getName()</code>.</p>
<h2 id="reverse-engineer-example">Reverse engineer example</h2>
<p>Vậy PHP nói riêng và các dynamically-typed language nói chung làm thế nào để nhận biết được type của object truyền vào function hay class ?</p>
<p>Câu trả lời là reflection class! Bạn đã nhận ra PHP dùng reflection như thế nào qua ví dụ bên trên, bạn thậm chí có thể tự sử dụng reflection class.</p>
<p>{% codeblock Book.php %} <?php
class Book 
{
    private $author;
    public function setAuthor($author)
    {
        $this->author = <span class="math">\(author;  var_dump(\)</span>author-&gt;getName()); // original name <span class="math">\(reflector = new ReflectionClass(\)</span>author); // Here we start to inspect $author $authorName = $reflector-&gt;getProperty(‘name’); // Get local variable ‘name’ $authorName-&gt;setAccessible(true); // since ‘name’ is a private local variable of class Author, we need access here to modify <span class="math">\(authorName-&gt;setValue(\)</span>author,‘Ngo Tat To’); // now hack the ‘name’ of <span class="math">\(author :))  var_dump(\)</span>author-&gt;getName()); // Guess what will be output here :D } public function getAuthor() { return $this-&gt;author; } }</p>
<p>?&gt; {% endcodeblock %}</p>
<p>Bạn thử đoán xem đoạn var_dump sau sẽ ra kết quả gì :D</p>
<p>{% codeblock Book.php %} <?php
$book2 = new Book;
$book2->setAuthor(new Author(“Nam Cao”,“29-10-1915”)); var_dump($book1-&gt;getAuthor()); // Suprisingly, ‘Ngo Tat To’, not ‘Nam Cao’ here ?&gt; {% endcodeblock %}</p>
<h2 id="reflection-class-dùng-để-làm-gì">Reflection class dùng để làm gì ?</h2>
<p>Đến đây có lẽ bạn đọc đã hình dung ra phần nào cách thức hoạt động của reflection class, các ngôn ngữ dynamically-typed “hiểu” các object như thế nào. Reflection thực tế tồn tại trong PHPUnit hay các mocking framework, các code analysis framwworks hay metaprogramming.</p>
<p>Reflection class trong PHP là 1 tool mạnh mẽ cung cấp cho programmer chính những sức mạnh mà ngôn ngữ sở hữu. Tuy nhiên reflection class không hề được khuyến khích dùng rộng rãi, vì với bản chất là tool của quá trình reverse engineering, nó hoàn toàn có thể làm design của hệ thống trở nên mess up và khó kiểm soát.</p>
<p>Reflection chỉ nên dùng khi nào thực sự cần thiết, ứng dụng nhìn thấy rõ nhất là khi bạn phải “đối đầu” với 1 project mà document ko đầy đủ hay không được upadte thường xuyên. <a href="https://github.com/cakephp/api_generator">Cake Api Generator</a> là ví dụ điển hình nhất.</p>
<h2 id="summary">Summary</h2>
<ul>
<li><strong>Dynamically-typed language</strong>: Là ngôn ngữ có thể tự hiểu được object tại thời điểm runtime, không cần tại compile time. PHP, Ruby, Python là dynamically-typed language. Ngược lại C hay Java là statically typed language.</li>
<li><strong>Reflection Class</strong> Là 1 bộ API được PHP cung cấp để sử dụng kỹ thuật reverse engineer, hữu dụng khi tạo document tự động.</li>
</ul>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inversion of Control and Dependency Injection]]></title>
    <link href="http://git@github.com.github.com/blog/2013/07/15/inversion-of-control-and-dependency-injection/"/>
    <updated>2013-07-15T02:02:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/07/15/inversion-of-control-and-dependency-injection</id>
    <content type="html"><![CDATA[<h2 id="preface">Preface</h2>
<p>Trước khi đọc bài này, tôi có 1 vài recommend cho độc giả :)</p>
<ol type="1">
<li><p>Bạn nên đọc trước bài viết về <a href="http://ktmt.github.io/blog/2013/06/14/design-pattern-ap-dung-builder-pattern-trong-test-java/">Builder Pattern trong Java</a> cũng trong blog ktmt, sẽ có 1 cái nhìn tổng quát và hình dung dễ dàng hơn về ứng dụng của các pattern trong programming.</p></li>
<li><p>Có hàng tá bài viết về Inversion Of Control và Dependency Injection. Try to google it first.</p></li>
<li><p>Nếu không, nhớ google thêm sau khi đọc bài viết :D</p></li>
</ol>
<h2 id="dependency-injection">Dependency Injection</h2>
<p>Chúng ta sẽ bắt đầu với 1 ví dụ gần giống ví dụ trong bài viết về Builder Pattern ở trên. Xem đoạn code sau. Ngôn ngữ ở đây là PHP.</p>
<p>{% codeblock Book.php %} <?php
class Book ()
{
    public function __construct()
    {
        $this->title = new Title; $this-&gt;author = new Author; $this-&gt;genre = new Genre; $this-&gt;publishDate = new PublishDate; $this-&gt;ISBN = new ISBN; } } …</p>
<p>$book = new Book; ?&gt; {% endcodeblock %}</p>
<p>Ở đây giả sử Title, Author, Genre, PublishDate hay ISBN đều là các class đã được định nghĩa trước. Như vậy class Book có 5 <strong>dependency</strong> là 5 class kể trên.</p>
<p>Về mặt technical, chẳng có gì là không ổn với 1 class như trên cả. Tuy nhiên programmer có kinh nghiệm sẽ dễ dàng nhận thấy chúng ta đã hardcoded 5 dependency trên vào trong Book. Nói cách khác nếu muốn Book chứa những dependency khác, chẳng có cách nào khác là sửa lại định nghĩa class.</p>
<p>Như vậy, để tránh những phiền phức nói trên và tạo độ linh hoạt khi sử dụng, class Book nên được viết lại như sau:</p>
<p>{% codeblock Book.php %} <?php
class Book ()
{
    public function __construct($title, $author, $genre, $publishdate, $isbn)
    {
        $this->title = $title; $this-&gt;author = $author; $this-&gt;genre = $genre; $this-&gt;publishDate = $publishdate; $this-&gt;ISBN = $isbn; } } …</p>
<p>$book = new Book (new Title, new Author, new Genre, new PublishDate, new ISBN)</p>
<p>?&gt; {% endcodeblock %}</p>
<p>Bạn có thể thấy, ý tưởng của Dependency Injection(DI) thực ra rất đơn giản, chỉ là bạn vẫn thường sử dụng và không để ý. Dependency có thể được inject theo nhiều kiểu, ví dụ bên trên là constructor injection. Chúng ta còn có setter injection như sau:</p>
<p>{% codeblock Book.php %} <?php
class Book ()
{
    public function __construct()
    {
    }

    public function setTitle($title)
    {
        $this->title = $title; }</p>
<p>…<br />// Here we have 4 more methods : setAuthor ,setGenre, setPublishDate, setISBN } …</p>
<p>$book = new Book; $book-&gt;setTitle(new Title); $book-&gt;setAuthor(new Author); $book-&gt;setGenre(new Genre); $book-&gt;setPublishDate(new PublishDate); $book-&gt;setISBN(new ISBN);</p>
<p>?&gt; {% endcodeblock %}</p>
<p>Và vấn đề mới lại nảy sinh! Có quá nhiều setter và điều đó biến Book thành 1 class phức tạp khi sử dụng. Việc viết lại tất cả các setter khi khởi tạo 1 Book thật là painful !</p>
<p>Để giải quyết vấn đề kể trên, chúng ta sẽ đến với design pattern tiếp theo: Inversion of Control (IoC)</p>
<h2 id="inversion-of-control">Inversion of Control</h2>
<blockquote>
<p>In software engineering, inversion of control (IoC) is a programming technique, expressed here in terms of object-oriented programming, in which object coupling is bound at run time by an assembler object and is typically not known at compile time using static analysis.</p>
</blockquote>
<p>Giải thích lý thuyết về IoC có lẽ sẽ tốn nhiều công sức, như recommend trên đầu bài, bạn có thể google 1 chút về IoC. Ở đây tôi sẽ đưa ra luôn 1 implement để sử dụng với class Book kể trên.</p>
<p>{% codeblock IoC.php %} <?php
class IoC {
   protected static $registry = array();

   // Register
   public static function register($name, Closure $resolve)
   {
      static::$registry[$name] = $resolve;
   }

   // Resolve
   public static function resolve($name)
   {
      if ( static::registered($name) )
      {
         $name = static::$registry[$name];
         return $name();
      }
 
      throw new Exception('Nothing registered with that name, fool.');
   }

   // Check resigtered or not
   public static function registered($name)
   {
      return array_key_exists($name, static::$registry);
   }

}
?> {% endcodeblock %}</p>
<p>WTH! Cái khỉ gì trông lằng nhằng quá phải không :D</p>
<p>Đừng lo lắng, để hiểu đoạn code trên trước hết hãy để ý rằng ở đây chúng ta có rất nhiều các static function. Static function có thể gọi trục tiếp trên class chứ không phải trên instance thông qua cách gọi “Class::StaticMethod()”. Ngoài ra Closure là 1 anonymous function. Bạn sẽ hiểu ngay khi xem cách dùng dưới đây</p>
<p>{% codeblock Book.php %} <?php
IoC::register('book', function(){
    $book = new Book;
    $book->setTitle(new Title); $book-&gt;setAuthor(new Author); $book-&gt;setGenre(new Genre); $book-&gt;setPublishDate(new PublishDate); $book-&gt;setISBN(new ISBN);</p>
<pre><code>return $book;</code></pre>
<p>}); …</p>
<p>$book = IoC::resolve(‘book’);</p>
<p>?&gt; {% endcodeblock %}</p>
<p>Woo! Bây giở mỗi khi muốn tạo 1 instance của Book với đầy đủ các dependency, chỉ cần <code>IoC::resolve('book')</code>. Cùng với đó, các dependency có thể inject thông qua <code>IoC::register('book',function(){...})</code>. Đến khi unit test, bạn có thể dùng <code>IoC::register</code> để mocking các dependency và test Book mà không khởi tạo Title,Author…</p>
<h2 id="singleton-pattern-with-ioc">Singleton pattern with IoC</h2>
<p>Bạn thử tưởng tượng, nếu như phần register ‘book’ bên trên chiếm nhiều tài nguyên, có thể bạn sẽ không muốn mỗi lần resolve lại khởi tạo 1 instance mới. Nói cách khác, bạn chỉ muốn chỉ có 1 Book với đầy đủ Title, Author, … được khởi tạo 1 lần, và lần sau muốn sử dụng thì gọi lại chính instance đã được tạo.</p>
<p>Đây là đất diễn của Singleton design pattern :) Tôi sẽ thêm static function <code>singleton</code> cho IoC như sau:</p>
<p>{% codeblock IoC.php %} <?php
class IoC {
  protected static $registry = array();
  protected static $shared = array();

  // Register, here save the Closure to static::$registry
  public static function register($name, Closure $resolve)
  {
     static::$registry[$name] = $resolve;
  }

  // Singleton, Note that here we save the result of Closure, not the Closure
  public static function singleton($name, Closure $resolve)
  {
    static::$shared[$name] = $resolve();
  }

  // Resolve, consider register or singleton here
  public static function resolve($name)
  {
    if ( static::registered($name) )
    {
      $name = static::$registry[$name];
      return $name();
    }

    if ( static::singletoned($name) )
    {
      $instance = static::$shared[$name];
      return $instance;
    } 
 
    throw new Exception('Nothing registered with that name, fool.');
  }

  // Check resigtered or not
  public static function registered($name)
  {
     return array_key_exists($name, static::$registry);
  }


  // Check singleton object or not
  public static function singletoned($name)
  {
    return array_key_exists($name, static::$shared);
  }

}
?> {% endcodeblock %}</p>
<p>Và bây giờ {% codeblock Book.php %} <?php
IoC::singleton('book', function(){
    $book = new Book;
    $book->setTitle(new Title); $book-&gt;setAuthor(new Author); $book-&gt;setGenre(new Genre); $book-&gt;setPublishDate(new PublishDate); $book-&gt;setISBN(new ISBN);</p>
<pre><code>return $book;</code></pre>
<p>}); …</p>
<p>$book1 = IoC::resolve(‘book’); $book2 = IoC::resolve(‘book’); // exactly same instance with $book1</p>
<p>?&gt; {% endcodeblock %}</p>
<p>Bạn có thể lấy <a href="https://gist.github.com/DTVD/5997723">đoạn code sample trên Gist</a> về chạy thử. Have fun with IoC :)</p>
<h2 id="real-world-use-case">Real-World Use Case</h2>
<p>Đọc đến đây có thể bạn sẽ hỏi tôi, việc quái gì phải xoắn cái IoC này thế, nó có thực sự hữu dụng hay chỉ là 1 cái pattern mang tính demo biếu diễn ?</p>
<p>Chúng ta hãy cùng ghé qua <a href="http://laravel.com/docs/ioc">Laravel</a>, 1 framework hiện đại của PHP.</p>
<p>Ở Laravel, <a href="http://laravel.com/docs/ioc">IoC</a> đã được chuẩn bị sẵn và không chỉ dùng 1 mình, còn kết hợp với <a href="http://laravel.com/docs/ioc#service-providers">ServiceProviders</a> và <a href="http://laravel.com/docs/facades">Facades</a> để tăng tối đa độ linh hoạt của code base. Một Facades (lại là 1 design pattern khác - hãy google sau khi đọc bài này :) ) có thể được kết nối với IoC và UnitTest như sau :</p>
<p>{% codeblock Facades.php %} <?php

// binding IoC
App::bind('book', function()
{
    return new Book;
});

// binding facades to IoC
use Illuminate\Support\Facades\Facade;

class FacadesBook extends Facade {

    protected static function getFacadeAccessor() { return 'book'; }
}

{% endcodeblock %} 


Tại sao đã bind class Book vào IoC `book` rồi, lại còn tiếp tục bind IoC `book` và Facades `FacadesBook` lần nữa?

Facades trong Laravel có thể "biến thành" Mock object sau khi gọi method `shouldReceive` (a magic method :D)  

{% codeblock  Facades.php %}
<?php
//Use Book as usual:
$book = FacadesBook::AnInstanceMethodOfBookClass($AParams);
//Mocking for UnitTest:
FacadesBook::shouldReceive('AnInstanceMethodOfBookClass')->once()-&gt;with(<span class="math">\(AParams)-&gt;andReturn(\)</span>FakeValue); <span class="math">\(mockBook = FacadesBook::AnInstanceMethodOfBookClass(\)</span>AParams);</p>
<p>{% endcodeblock %}</p>
<p><code>$book</code> sẽ trả về giá trị thực khi thực hiện method <code>AnInstanceMethodOfBookClass</code> của class Book, trong khi đó <code>$mockBook</code> sẽ trả về <code>$FakeValue</code>.</p>
<h2 id="summary">Summary</h2>
<ul>
<li><strong>Dependency Injection</strong>: Đưa các dependency vào class thông qua constructor hoặc setter, không khỏi tạo trực tiếp bên trong class.</li>
<li><strong>Inversion of Control</strong>: bind object vào thời điểm run time, không phải vào thời điểm compile time.</li>
<li><strong>Singleton</strong>: Design pattern, cho phép trong 1 hệ thống chỉ có 1 instance duy nhất của class được tồn tại.</li>
</ul>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[99-bottles-of-beer]]></title>
    <link href="http://git@github.com.github.com/blog/2013/06/02/99-bottles-of-beer/"/>
    <updated>2013-06-02T19:47:00+09:00</updated>
    <id>http://git@github.com.github.com/blog/2013/06/02/99-bottles-of-beer</id>
    <content type="html"><![CDATA[<h2 id="the-song-and-the-home-page">The song, and the home page</h2>
<p>Đầu tiên có thể độc giả sẽ tự hỏi ý nghĩa của tiêu đề bài viết là gì ? Vậy trước hết mời bạn ghé qua <a href="http://99-bottles-of-beer.net">home page</a> và enjoy the <a href="http://www.youtube.com/watch?v=qVjCag8XoHQ">song</a></p>
<p>99-bottles-of-beer cũng từng là đề bài của code golf và phpgolf. Mission của chúng ta là code 1 đoạn PHP snippet print <a href="http://99-bottles-of-beer.net/lyrics.html">lyric</a> của bài hát mà dung lượng đoạn code là nhỏ nhất. Logic thật đơn giản phải không :D</p>
<p>{% codeblock lyric%} 99 bottles of beer on the wall, 99 bottles of beer. Take one down and pass it around, 98 bottles of beer on the wall.</p>
<p>98 bottles of beer on the wall, 98 bottles of beer. Take one down and pass it around, 97 bottles of beer on the wall.</p>
<p>97 bottles of beer on the wall, 97 bottles of beer. Take one down and pass it around, 96 bottles of beer on the wall.</p>
<p>…</p>
<p>1 bottle of beer on the wall, 1 bottle of beer. Go to the store and buy some more, 99 bottles of beer on the wall. {% endcodeblock %}</p>
<p>Với mục tiêu dùng ít code nhất có thể, tôi sẽ không dùng cấu trúc rẽ nhánh if-else, thay vào đó là ternary operator của PHP ( có nghĩa là bạn có thể viết “(condition)?true-action:false-action” thay vì “if (condition) {true-action} else {false-action}” )</p>
<p>Đoạn code đầu tiên tôi nghĩ ra trong đầu như sau:</p>
{% codeblock sol1.php %} <?php
  $a="beer on the wall";
  for($i=99;$i>=1;$i–){ <span class="math">\(x=(\)</span>i==1)?“bottle”:“bottles”; <span class="math">\(b=&quot;&lt;p&gt;\)</span>i $x of $a, $i $x of beer.<br>“; <span class="math">\(b.=(\)</span>i==1)?”Go to the store and buy some more, 99 bottles of <span class="math">\(a.&quot;:&quot;Take one down and pass it around, &quot;.(\)</span>i-1).&quot; $x of $a.
</p>
<p>“; print $b; } ?&gt; {% endcodeblock %}</p>
<h2 id="optimize">Optimize</h2>
<p>Bạn thử ls -l sẽ thấy đoạn code trên có dung lượng 288 bytes!</p>
<p>Để rút ngắn đoạn code trên, đầu tiên tôi nhớ lại những kiến thức cơ bản về PHP: dấu space hoàn toàn không cần thiết, và ký tự “?&gt;” ở cuối cũng có thể bỏ đi PHP long tag ở đầu có thể thay = PHP short tag</p>
{% codeblock sol2.php %} &lt;? <span class="math">\(a=&quot;beer on the wall&quot;; for(\)</span>i=99;<span class="math">\(i&gt;=1;\)</span>i–){ <span class="math">\(x=(\)</span>i==1)?“bottle”:“bottles”; <span class="math">\(b=&quot;&lt;p&gt;\)</span>i $x of $a, $i $x of beer.<br>“; <span class="math">\(b.=(\)</span>i==1)?”Go to the store and buy some more, 99 bottles of <span class="math">\(a.&quot;:&quot;Take one down and pass it around, &quot;.(\)</span>i-1).&quot; $x of $a.
</p>
<p>“; print $b; } {% endcodeblock %}</p>
<p>263 bytes!</p>
<p>Làm thế nào để rút ngắn hơn nữa ? Nếu để ý vào những chi tiết nhỏ hơn, bạn sẽ thấy:</p>
<ul>
<li>trong điều kiện vòng lặp, thay “<span class="math">\(i&gt;=1&quot; bằng &quot;\)</span>i&gt;0”</li>
<li>“(<span class="math">\(i==1)?&quot; là quá dài. Ta có thể bỏ đi 2 dấu ngoặc &quot;\)</span>i==1?”</li>
<li>print có thể thay bằng echo. ( Thực tế trong PHP bạn còn có thể thay rtrim -&gt; chop, explode -&gt; split, implode -&gt; join, preg_split -&gt; split (trong 1 vài trường hợp) và preg_replace -&gt; preg_filter trong hầu hết các TH )</li>
<li>“<span class="math">\(x=(\)</span>i==1)?”bottle“:”bottles“;” có thể được viết lại : “<span class="math">\(x=&#39;bottle&#39;;\)</span>i==1?:$x.=‘s’;”</li>
<li>Mỗi lần sử dụng biến $a ta đều có “of” ở đăng trước. Vậy có thể đơn giản cho word “of” vào trong biến a</li>
<li>“99 bottles of <span class="math">\(a&quot; có thể rewrite tiếp lại thành &quot;99{\)</span>x}s of $a”</li>
<li>Chúng ta có thể xoá “<span class="math">\(i--&quot; trong vòng lặp for, vì thế thêm -- vào trước &quot;\)</span>i==1” ở dòng gần cuối thành “<span class="math">\(i--==1&quot; và vì thế bỏ luôn đoạn (\)</span>i-1) ở sau đó</li>
</ul>
Như vậy solution tiếp theo của chúng ta sẽ là {% codeblock sol2.php %} &lt;? <span class="math">\(a=&quot; of beer on the wall&quot;; for(\)</span>i=99;$i&gt;=1;){ <span class="math">\(x=&#39;bottle&#39;;\)</span>i==1?:$x.=‘s’; <span class="math">\(b=&quot;&lt;p&gt;\)</span>i <span class="math">\(x\)</span>a, $i $x of beer.<br>“; <span class="math">\(b.=\)</span>i–==1?”Go to the store and buy some more, 99 {<span class="math">\(x}s\)</span>a.“:”Take one down and pass it around, “.$i.” <span class="math">\(x\)</span>a.
</p>
<p>“; echo $b; } {% endcodeblock %}</p>
<p>241 bytes!</p>
<h2 id="the-trick">The trick</h2>
<p>Bạn có nghĩ đã hết cách để rút gọn đoạn code ?</p>
<p>Bạn có quên điều gì không ? Bỏ đi tất cả các ký tự line-feed (line break), cho code thành 1 dòng, chúng ra sẽ có kết quả tốt hơn.</p>
{% codeblock sol4.php %} &lt;?<span class="math">\(a=&quot; of beer on the wall&quot;;for(\)</span>i=99;<span class="math">\(i&gt;0;){\)</span>x=‘bottle’;<span class="math">\(i^1?\)</span>x.=‘s’:0;<span class="math">\(b=&quot;&lt;p&gt;\)</span>i <span class="math">\(x\)</span>a, $i <span class="math">\(x of beer.&lt;br&gt;&quot;;\)</span>b.=$ i–==1?“Go to the store and buy some more, 99 {<span class="math">\(x}s\)</span>a.”:“Take one down and pass it around,”.$i.&quot; <span class="math">\(x\)</span>a.
</p>
<p>“;echo $b;} {% endcodeblock %}</p>
<p>233 bytes!</p>
<p>Bạn có tin có 1 đoạn code sẽ cho kết quả tương tự với … 30 bytes ???</p>
<p>!!</p>
<p>{% codeblock trick.php %} <?include('http://bit.ly/xxxx'); ?> {% endcodeblock %}</p>
<p>PHP là 1 ngôn ngữ web! Với allow_url_fopen và allow_url_include turn on có thể dễ dàng load 1 link kết quả có sẵn đi kèm 1 dịch vụ như bitly !</p>
<p>Stay hungry, stay foolish :D</p>
<h2 id="tham-khảo">Tham khảo</h2>
<ol type="1">
<li><a href="http://www.phpgolf.org/tips">phpgolf tips and tricks</a></li>
<li><a href="http://stackoverflow.com/questions/3801097/solve-this-php-puzzle-in-as-few-bytes-as-possible">Question on StackOverFlow</a></li>
</ol>]]></content>
  </entry>
  
</feed>
